
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c00c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  0800c1e0  0800c1e0  0001c1e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4c0  0800c4c0  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4c0  0800c4c0  0001c4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4c8  0800c4c8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4c8  0800c4c8  0001c4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4cc  0800c4cc  0001c4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c4d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  200001ec  0800c6bc  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  0800c6bc  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ade1  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a9e  00000000  00000000  0003affd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016b0  00000000  00000000  0003eaa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a8  00000000  00000000  00040150  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029c23  00000000  00000000  000415f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014e1a  00000000  00000000  0006b21b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fbde0  00000000  00000000  00080035  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f4  00000000  00000000  0017be15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a7c  00000000  00000000  0017bf0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c1c4 	.word	0x0800c1c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0800c1c4 	.word	0x0800c1c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fda:	4b28      	ldr	r3, [pc, #160]	; (800107c <MX_ADC1_Init+0xb4>)
 8000fdc:	4a28      	ldr	r2, [pc, #160]	; (8001080 <MX_ADC1_Init+0xb8>)
 8000fde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000fe0:	4b26      	ldr	r3, [pc, #152]	; (800107c <MX_ADC1_Init+0xb4>)
 8000fe2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fe6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe8:	4b24      	ldr	r3, [pc, #144]	; (800107c <MX_ADC1_Init+0xb4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <MX_ADC1_Init+0xb4>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <MX_ADC1_Init+0xb4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <MX_ADC1_Init+0xb4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001002:	4b1e      	ldr	r3, [pc, #120]	; (800107c <MX_ADC1_Init+0xb4>)
 8001004:	2200      	movs	r2, #0
 8001006:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <MX_ADC1_Init+0xb4>)
 800100a:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <MX_ADC1_Init+0xbc>)
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_ADC1_Init+0xb4>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <MX_ADC1_Init+0xb4>)
 8001016:	2202      	movs	r2, #2
 8001018:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_ADC1_Init+0xb4>)
 800101c:	2201      	movs	r2, #1
 800101e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <MX_ADC1_Init+0xb4>)
 8001024:	2200      	movs	r2, #0
 8001026:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001028:	4814      	ldr	r0, [pc, #80]	; (800107c <MX_ADC1_Init+0xb4>)
 800102a:	f002 f9f3 	bl	8003414 <HAL_ADC_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001034:	f001 fc92 	bl	800295c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001038:	230c      	movs	r3, #12
 800103a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800103c:	2301      	movs	r3, #1
 800103e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001040:	2307      	movs	r3, #7
 8001042:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001044:	463b      	mov	r3, r7
 8001046:	4619      	mov	r1, r3
 8001048:	480c      	ldr	r0, [pc, #48]	; (800107c <MX_ADC1_Init+0xb4>)
 800104a:	f002 fa27 	bl	800349c <HAL_ADC_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001054:	f001 fc82 	bl	800295c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001058:	2306      	movs	r3, #6
 800105a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800105c:	2302      	movs	r3, #2
 800105e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001060:	463b      	mov	r3, r7
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_ADC1_Init+0xb4>)
 8001066:	f002 fa19 	bl	800349c <HAL_ADC_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001070:	f001 fc74 	bl	800295c <Error_Handler>
  }

}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000218 	.word	0x20000218
 8001080:	40012000 	.word	0x40012000
 8001084:	0f000001 	.word	0x0f000001

08001088 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a39      	ldr	r2, [pc, #228]	; (800118c <HAL_ADC_MspInit+0x104>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d16b      	bne.n	8001182 <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010aa:	4b39      	ldr	r3, [pc, #228]	; (8001190 <HAL_ADC_MspInit+0x108>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	4a38      	ldr	r2, [pc, #224]	; (8001190 <HAL_ADC_MspInit+0x108>)
 80010b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b36      	ldr	r3, [pc, #216]	; (8001190 <HAL_ADC_MspInit+0x108>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	4b33      	ldr	r3, [pc, #204]	; (8001190 <HAL_ADC_MspInit+0x108>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a32      	ldr	r2, [pc, #200]	; (8001190 <HAL_ADC_MspInit+0x108>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b30      	ldr	r3, [pc, #192]	; (8001190 <HAL_ADC_MspInit+0x108>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <HAL_ADC_MspInit+0x108>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a2c      	ldr	r2, [pc, #176]	; (8001190 <HAL_ADC_MspInit+0x108>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <HAL_ADC_MspInit+0x108>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = POT1_AIN_Pin;
 80010f2:	2304      	movs	r3, #4
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f6:	2303      	movs	r3, #3
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT1_AIN_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4823      	ldr	r0, [pc, #140]	; (8001194 <HAL_ADC_MspInit+0x10c>)
 8001106:	f003 f8f5 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT2_AIN_Pin;
 800110a:	2340      	movs	r3, #64	; 0x40
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT2_AIN_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	481e      	ldr	r0, [pc, #120]	; (8001198 <HAL_ADC_MspInit+0x110>)
 800111e:	f003 f8e9 	bl	80042f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_ADC_MspInit+0x114>)
 8001124:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <HAL_ADC_MspInit+0x118>)
 8001126:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <HAL_ADC_MspInit+0x114>)
 800112a:	2200      	movs	r2, #0
 800112c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <HAL_ADC_MspInit+0x114>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_ADC_MspInit+0x114>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <HAL_ADC_MspInit+0x114>)
 800113c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001140:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_ADC_MspInit+0x114>)
 8001144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001148:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_ADC_MspInit+0x114>)
 800114c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001150:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_ADC_MspInit+0x114>)
 8001154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001158:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_ADC_MspInit+0x114>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_ADC_MspInit+0x114>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001166:	480d      	ldr	r0, [pc, #52]	; (800119c <HAL_ADC_MspInit+0x114>)
 8001168:	f002 fdba 	bl	8003ce0 <HAL_DMA_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8001172:	f001 fbf3 	bl	800295c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_ADC_MspInit+0x114>)
 800117a:	639a      	str	r2, [r3, #56]	; 0x38
 800117c:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_ADC_MspInit+0x114>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	; 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40012000 	.word	0x40012000
 8001190:	40023800 	.word	0x40023800
 8001194:	40020800 	.word	0x40020800
 8001198:	40020000 	.word	0x40020000
 800119c:	20000260 	.word	0x20000260
 80011a0:	40026410 	.word	0x40026410

080011a4 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4603      	mov	r3, r0
 80011b0:	73fb      	strb	r3, [r7, #15]
 80011b2:	4613      	mov	r3, r2
 80011b4:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 fb36 	bl	8001828 <null_ptr_check>
 80011bc:	4603      	mov	r3, r0
 80011be:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 80011c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d11c      	bne.n	8001202 <bmp280_get_regs+0x5e>
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d019      	beq.n	8001202 <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	789b      	ldrb	r3, [r3, #2]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d103      	bne.n	80011de <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011dc:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685c      	ldr	r4, [r3, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7858      	ldrb	r0, [r3, #1]
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	7bf9      	ldrb	r1, [r7, #15]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	47a0      	blx	r4
 80011f0:	4603      	mov	r3, r0
 80011f2:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 80011f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d004      	beq.n	8001206 <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 80011fc:	23fc      	movs	r3, #252	; 0xfc
 80011fe:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8001200:	e001      	b.n	8001206 <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001202:	23ff      	movs	r3, #255	; 0xff
 8001204:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001206:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800120a:	4618      	mov	r0, r3
 800120c:	371c      	adds	r7, #28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd90      	pop	{r4, r7, pc}

08001212 <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8001212:	b590      	push	{r4, r7, lr}
 8001214:	b089      	sub	sp, #36	; 0x24
 8001216:	af00      	add	r7, sp, #0
 8001218:	60f8      	str	r0, [r7, #12]
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4613      	mov	r3, r2
 8001220:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b04      	cmp	r3, #4
 8001226:	d901      	bls.n	800122c <bmp280_set_regs+0x1a>
    {
        len = 4;
 8001228:	2304      	movs	r3, #4
 800122a:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 800122c:	6838      	ldr	r0, [r7, #0]
 800122e:	f000 fafb 	bl	8001828 <null_ptr_check>
 8001232:	4603      	mov	r3, r0
 8001234:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001236:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d14d      	bne.n	80012da <bmp280_set_regs+0xc8>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d04a      	beq.n	80012da <bmp280_set_regs+0xc8>
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d047      	beq.n	80012da <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d041      	beq.n	80012d4 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	789b      	ldrb	r3, [r3, #2]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d114      	bne.n	8001288 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800125e:	2300      	movs	r3, #0
 8001260:	76fb      	strb	r3, [r7, #27]
 8001262:	e00d      	b.n	8001280 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001264:	7efb      	ldrb	r3, [r7, #27]
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	4413      	add	r3, r2
 800126a:	781a      	ldrb	r2, [r3, #0]
 800126c:	7efb      	ldrb	r3, [r7, #27]
 800126e:	68f9      	ldr	r1, [r7, #12]
 8001270:	440b      	add	r3, r1
 8001272:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800127a:	7efb      	ldrb	r3, [r7, #27]
 800127c:	3301      	adds	r3, #1
 800127e:	76fb      	strb	r3, [r7, #27]
 8001280:	7efa      	ldrb	r2, [r7, #27]
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	429a      	cmp	r2, r3
 8001286:	d3ed      	bcc.n	8001264 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d90d      	bls.n	80012aa <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f107 0110 	add.w	r1, r7, #16
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 fae6 	bl	8001868 <interleave_data>
                temp_len = ((len * 2) - 1);
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	83bb      	strh	r3, [r7, #28]
 80012a8:	e001      	b.n	80012ae <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689c      	ldr	r4, [r3, #8]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	7858      	ldrb	r0, [r3, #1]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	7819      	ldrb	r1, [r3, #0]
 80012ba:	8bbb      	ldrh	r3, [r7, #28]
 80012bc:	f107 0210 	add.w	r2, r7, #16
 80012c0:	47a0      	blx	r4
 80012c2:	4603      	mov	r3, r0
 80012c4:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 80012c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d008      	beq.n	80012e0 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 80012ce:	23fc      	movs	r3, #252	; 0xfc
 80012d0:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 80012d2:	e005      	b.n	80012e0 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 80012d4:	23fd      	movs	r3, #253	; 0xfd
 80012d6:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 80012d8:	e002      	b.n	80012e0 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80012da:	23ff      	movs	r3, #255	; 0xff
 80012dc:	77fb      	strb	r3, [r7, #31]
 80012de:	e000      	b.n	80012e2 <bmp280_set_regs+0xd0>
        if (len != 0)
 80012e0:	bf00      	nop
    }

    return rslt;
 80012e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}

080012ee <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 80012f6:	23e0      	movs	r3, #224	; 0xe0
 80012f8:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 80012fa:	23b6      	movs	r3, #182	; 0xb6
 80012fc:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 fa92 	bl	8001828 <null_ptr_check>
 8001304:	4603      	mov	r3, r0
 8001306:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10d      	bne.n	800132c <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001310:	f107 010d 	add.w	r1, r7, #13
 8001314:	f107 000e 	add.w	r0, r7, #14
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f7ff ff79 	bl	8001212 <bmp280_set_regs>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	2002      	movs	r0, #2
 800132a:	4798      	blx	r3
    }

    return rslt;
 800132c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8001340:	2305      	movs	r3, #5
 8001342:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 fa6f 	bl	8001828 <null_ptr_check>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 800134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d150      	bne.n	80013f8 <bmp280_init+0xc0>
    {
        while (try_count)
 8001356:	e02d      	b.n	80013b4 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	20d0      	movs	r0, #208	; 0xd0
 8001360:	f7ff ff20 	bl	80011a4 <bmp280_get_regs>
 8001364:	4603      	mov	r3, r0
 8001366:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 8001368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d11a      	bne.n	80013a6 <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 8001374:	2b56      	cmp	r3, #86	; 0x56
 8001376:	d007      	beq.n	8001388 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b57      	cmp	r3, #87	; 0x57
 800137e:	d003      	beq.n	8001388 <bmp280_init+0x50>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b58      	cmp	r3, #88	; 0x58
 8001386:	d10e      	bne.n	80013a6 <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ffb0 	bl	80012ee <bmp280_soft_reset>
 800138e:	4603      	mov	r3, r0
 8001390:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d110      	bne.n	80013bc <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fa8f 	bl	80018be <get_calib_param>
 80013a0:	4603      	mov	r3, r0
 80013a2:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80013a4:	e00a      	b.n	80013bc <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	200a      	movs	r0, #10
 80013ac:	4798      	blx	r3
            --try_count;
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 80013b4:	7bbb      	ldrb	r3, [r7, #14]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1ce      	bne.n	8001358 <bmp280_init+0x20>
 80013ba:	e000      	b.n	80013be <bmp280_init+0x86>
                break;
 80013bc:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 80013be:	7bbb      	ldrb	r3, [r7, #14]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 80013c4:	23fe      	movs	r3, #254	; 0xfe
 80013c6:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 80013c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d113      	bne.n	80013f8 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 80013f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800140e:	2300      	movs	r3, #0
 8001410:	733b      	strb	r3, [r7, #12]
 8001412:	2300      	movs	r3, #0
 8001414:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8001416:	6838      	ldr	r0, [r7, #0]
 8001418:	f000 fa06 	bl	8001828 <null_ptr_check>
 800141c:	4603      	mov	r3, r0
 800141e:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8001420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d137      	bne.n	8001498 <bmp280_get_config+0x94>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d034      	beq.n	8001498 <bmp280_get_config+0x94>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 800142e:	f107 010c 	add.w	r1, r7, #12
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2202      	movs	r2, #2
 8001436:	20f4      	movs	r0, #244	; 0xf4
 8001438:	f7ff feb4 	bl	80011a4 <bmp280_get_regs>
 800143c:	4603      	mov	r3, r0
 800143e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d129      	bne.n	800149c <bmp280_get_config+0x98>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 8001448:	7b3b      	ldrb	r3, [r7, #12]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	b2da      	uxtb	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 8001452:	7b3b      	ldrb	r3, [r7, #12]
 8001454:	109b      	asrs	r3, r3, #2
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	b2da      	uxtb	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 8001462:	7b7b      	ldrb	r3, [r7, #13]
 8001464:	095b      	lsrs	r3, r3, #5
 8001466:	b2da      	uxtb	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 800146c:	7b7b      	ldrb	r3, [r7, #13]
 800146e:	109b      	asrs	r3, r3, #2
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	b2da      	uxtb	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 800147c:	7b7b      	ldrb	r3, [r7, #13]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	b2da      	uxtb	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	332c      	adds	r3, #44	; 0x2c
 800148e:	6810      	ldr	r0, [r2, #0]
 8001490:	6018      	str	r0, [r3, #0]
 8001492:	7912      	ldrb	r2, [r2, #4]
 8001494:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 8001496:	e001      	b.n	800149c <bmp280_get_config+0x98>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001498:	23ff      	movs	r3, #255	; 0xff
 800149a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800149c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 fa9e 	bl	80019f8 <conf_sensor>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	6039      	str	r1, [r7, #0]
 80014d0:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80014d2:	6838      	ldr	r0, [r7, #0]
 80014d4:	f000 f9a8 	bl	8001828 <null_ptr_check>
 80014d8:	4603      	mov	r3, r0
 80014da:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 80014dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d109      	bne.n	80014f8 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 fa82 	bl	80019f8 <conf_sensor>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	809a      	strh	r2, [r3, #4]

    rslt = null_ptr_check(dev);
 8001518:	6838      	ldr	r0, [r7, #0]
 800151a:	f000 f985 	bl	8001828 <null_ptr_check>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d133      	bne.n	8001592 <bmp280_get_uncomp_data+0x8e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d030      	beq.n	8001592 <bmp280_get_uncomp_data+0x8e>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8001530:	f107 0108 	add.w	r1, r7, #8
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	2206      	movs	r2, #6
 8001538:	20f7      	movs	r0, #247	; 0xf7
 800153a:	f7ff fe33 	bl	80011a4 <bmp280_get_regs>
 800153e:	4603      	mov	r3, r0
 8001540:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d120      	bne.n	800158c <bmp280_get_uncomp_data+0x88>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 800154a:	7a3b      	ldrb	r3, [r7, #8]
 800154c:	031a      	lsls	r2, r3, #12
 800154e:	7a7b      	ldrb	r3, [r7, #9]
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	4313      	orrs	r3, r2
 8001554:	7aba      	ldrb	r2, [r7, #10]
 8001556:	0912      	lsrs	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 8001560:	7afb      	ldrb	r3, [r7, #11]
 8001562:	031a      	lsls	r2, r3, #12
 8001564:	7b3b      	ldrb	r3, [r7, #12]
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	4313      	orrs	r3, r2
 800156a:	7b7a      	ldrb	r2, [r7, #13]
 800156c:	0912      	lsrs	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4619      	mov	r1, r3
 8001580:	4610      	mov	r0, r2
 8001582:	f000 faf3 	bl	8001b6c <st_check_boundaries>
 8001586:	4603      	mov	r3, r0
 8001588:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 800158a:	e004      	b.n	8001596 <bmp280_get_uncomp_data+0x92>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 800158c:	23f3      	movs	r3, #243	; 0xf3
 800158e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001590:	e001      	b.n	8001596 <bmp280_get_uncomp_data+0x92>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001592:	23ff      	movs	r3, #255	; 0xff
 8001594:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <bmp280_get_comp_temp_32bit>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_temp_32bit(int32_t *comp_temp, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b088      	sub	sp, #32
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f93a 	bl	8001828 <null_ptr_check>
 80015b4:	4603      	mov	r3, r0
 80015b6:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 80015b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d150      	bne.n	8001662 <bmp280_get_comp_temp_32bit+0xc0>
    {
        var1 =
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	da00      	bge.n	80015c8 <bmp280_get_comp_temp_32bit+0x26>
 80015c6:	3307      	adds	r3, #7
 80015c8:	10db      	asrs	r3, r3, #3
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	8a1b      	ldrh	r3, [r3, #16]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80015da:	fb02 f303 	mul.w	r3, r2, r3
        var1 =
 80015de:	2b00      	cmp	r3, #0
 80015e0:	da01      	bge.n	80015e6 <bmp280_get_comp_temp_32bit+0x44>
 80015e2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80015e6:	12db      	asrs	r3, r3, #11
 80015e8:	61bb      	str	r3, [r7, #24]
            2048;
        var2 =
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	da00      	bge.n	80015f2 <bmp280_get_comp_temp_32bit+0x50>
 80015f0:	330f      	adds	r3, #15
 80015f2:	111b      	asrs	r3, r3, #4
 80015f4:	461a      	mov	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	8a1b      	ldrh	r3, [r3, #16]
 80015fa:	1ad2      	subs	r2, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	da00      	bge.n	8001604 <bmp280_get_comp_temp_32bit+0x62>
 8001602:	330f      	adds	r3, #15
 8001604:	111b      	asrs	r3, r3, #4
 8001606:	4619      	mov	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	8a1b      	ldrh	r3, [r3, #16]
 800160c:	1acb      	subs	r3, r1, r3
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 800160e:	fb03 f302 	mul.w	r3, r3, r2
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8001612:	2b00      	cmp	r3, #0
 8001614:	da01      	bge.n	800161a <bmp280_get_comp_temp_32bit+0x78>
 8001616:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800161a:	131b      	asrs	r3, r3, #12
 800161c:	461a      	mov	r2, r3
             ((int32_t) dev->calib_param.dig_t3)) /
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8001624:	fb03 f302 	mul.w	r3, r3, r2
        var2 =
 8001628:	2b00      	cmp	r3, #0
 800162a:	da03      	bge.n	8001634 <bmp280_get_comp_temp_32bit+0x92>
 800162c:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001630:	441a      	add	r2, r3
 8001632:	4613      	mov	r3, r2
 8001634:	139b      	asrs	r3, r3, #14
 8001636:	617b      	str	r3, [r7, #20]
            16384;
        dev->calib_param.t_fine = var1 + var2;
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	441a      	add	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	3380      	adds	r3, #128	; 0x80
 800164e:	2b00      	cmp	r3, #0
 8001650:	da00      	bge.n	8001654 <bmp280_get_comp_temp_32bit+0xb2>
 8001652:	33ff      	adds	r3, #255	; 0xff
 8001654:	121b      	asrs	r3, r3, #8
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	601a      	str	r2, [r3, #0]
        rslt = BMP280_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	77fb      	strb	r3, [r7, #31]
 8001660:	e004      	b.n	800166c <bmp280_get_comp_temp_32bit+0xca>
    }
    else
    {
        *comp_temp = 0;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
        rslt = BMP280_E_32BIT_COMP_TEMP;
 8001668:	23f2      	movs	r3, #242	; 0xf2
 800166a:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800166c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <bmp280_get_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
int8_t bmp280_get_comp_temp_double(double *temperature, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 8001678:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800167c:	b08a      	sub	sp, #40	; 0x28
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f8ce 	bl	8001828 <null_ptr_check>
 800168c:	4603      	mov	r3, r0
 800168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001692:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001696:	2b00      	cmp	r3, #0
 8001698:	f040 80ac 	bne.w	80017f4 <bmp280_get_comp_temp_double+0x17c>
    {
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800169c:	68b8      	ldr	r0, [r7, #8]
 800169e:	f7fe ff61 	bl	8000564 <__aeabi_i2d>
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b5c      	ldr	r3, [pc, #368]	; (8001818 <bmp280_get_comp_temp_double+0x1a0>)
 80016a8:	f7ff f8f0 	bl	800088c <__aeabi_ddiv>
 80016ac:	4603      	mov	r3, r0
 80016ae:	460c      	mov	r4, r1
 80016b0:	4625      	mov	r5, r4
 80016b2:	461c      	mov	r4, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	8a1b      	ldrh	r3, [r3, #16]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff43 	bl	8000544 <__aeabi_ui2d>
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	4b56      	ldr	r3, [pc, #344]	; (800181c <bmp280_get_comp_temp_double+0x1a4>)
 80016c4:	f7ff f8e2 	bl	800088c <__aeabi_ddiv>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7fe fdfa 	bl	80002c8 <__aeabi_dsub>
 80016d4:	4603      	mov	r3, r0
 80016d6:	460c      	mov	r4, r1
 80016d8:	4625      	mov	r5, r4
 80016da:	461c      	mov	r4, r3
               ((double) dev->calib_param.dig_t2);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff3e 	bl	8000564 <__aeabi_i2d>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80016ec:	4620      	mov	r0, r4
 80016ee:	4629      	mov	r1, r5
 80016f0:	f7fe ffa2 	bl	8000638 <__aeabi_dmul>
 80016f4:	4603      	mov	r3, r0
 80016f6:	460c      	mov	r4, r1
 80016f8:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 =
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80016fc:	68b8      	ldr	r0, [r7, #8]
 80016fe:	f7fe ff31 	bl	8000564 <__aeabi_i2d>
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800170a:	f7ff f8bf 	bl	800088c <__aeabi_ddiv>
 800170e:	4603      	mov	r3, r0
 8001710:	460c      	mov	r4, r1
 8001712:	4625      	mov	r5, r4
 8001714:	461c      	mov	r4, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	8a1b      	ldrh	r3, [r3, #16]
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe ff12 	bl	8000544 <__aeabi_ui2d>
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	4b3e      	ldr	r3, [pc, #248]	; (8001820 <bmp280_get_comp_temp_double+0x1a8>)
 8001726:	f7ff f8b1 	bl	800088c <__aeabi_ddiv>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4620      	mov	r0, r4
 8001730:	4629      	mov	r1, r5
 8001732:	f7fe fdc9 	bl	80002c8 <__aeabi_dsub>
 8001736:	4603      	mov	r3, r0
 8001738:	460c      	mov	r4, r1
 800173a:	4625      	mov	r5, r4
 800173c:	461c      	mov	r4, r3
             (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 800173e:	68b8      	ldr	r0, [r7, #8]
 8001740:	f7fe ff10 	bl	8000564 <__aeabi_i2d>
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800174c:	f7ff f89e 	bl	800088c <__aeabi_ddiv>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4690      	mov	r8, r2
 8001756:	4699      	mov	r9, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	8a1b      	ldrh	r3, [r3, #16]
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fef1 	bl	8000544 <__aeabi_ui2d>
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <bmp280_get_comp_temp_double+0x1a8>)
 8001768:	f7ff f890 	bl	800088c <__aeabi_ddiv>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4640      	mov	r0, r8
 8001772:	4649      	mov	r1, r9
 8001774:	f7fe fda8 	bl	80002c8 <__aeabi_dsub>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 800177c:	4620      	mov	r0, r4
 800177e:	4629      	mov	r1, r5
 8001780:	f7fe ff5a 	bl	8000638 <__aeabi_dmul>
 8001784:	4603      	mov	r3, r0
 8001786:	460c      	mov	r4, r1
 8001788:	4625      	mov	r5, r4
 800178a:	461c      	mov	r4, r3
            ((double) dev->calib_param.dig_t3);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fee6 	bl	8000564 <__aeabi_i2d>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
        var2 =
 800179c:	4620      	mov	r0, r4
 800179e:	4629      	mov	r1, r5
 80017a0:	f7fe ff4a 	bl	8000638 <__aeabi_dmul>
 80017a4:	4603      	mov	r3, r0
 80017a6:	460c      	mov	r4, r1
 80017a8:	e9c7 3404 	strd	r3, r4, [r7, #16]
        dev->calib_param.t_fine = (int32_t) (var1 + var2);
 80017ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017b4:	f7fe fd8a 	bl	80002cc <__adddf3>
 80017b8:	4603      	mov	r3, r0
 80017ba:	460c      	mov	r4, r1
 80017bc:	4618      	mov	r0, r3
 80017be:	4621      	mov	r1, r4
 80017c0:	f7ff f9ea 	bl	8000b98 <__aeabi_d2iz>
 80017c4:	4602      	mov	r2, r0
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28
        *temperature = ((var1 + var2) / 5120.0);
 80017ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017d2:	f7fe fd7b 	bl	80002cc <__adddf3>
 80017d6:	4603      	mov	r3, r0
 80017d8:	460c      	mov	r4, r1
 80017da:	4618      	mov	r0, r3
 80017dc:	4621      	mov	r1, r4
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <bmp280_get_comp_temp_double+0x1ac>)
 80017e4:	f7ff f852 	bl	800088c <__aeabi_ddiv>
 80017e8:	4603      	mov	r3, r0
 80017ea:	460c      	mov	r4, r1
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	e9c2 3400 	strd	r3, r4, [r2]
 80017f2:	e009      	b.n	8001808 <bmp280_get_comp_temp_double+0x190>
    }
    else
    {
        *temperature = 0;
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	f04f 0400 	mov.w	r4, #0
 80017fe:	e9c2 3400 	strd	r3, r4, [r2]
        rslt = BMP280_E_DOUBLE_COMP_TEMP;
 8001802:	23ef      	movs	r3, #239	; 0xef
 8001804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8001808:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800180c:	4618      	mov	r0, r3
 800180e:	3728      	adds	r7, #40	; 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001816:	bf00      	nop
 8001818:	40d00000 	.word	0x40d00000
 800181c:	40900000 	.word	0x40900000
 8001820:	40c00000 	.word	0x40c00000
 8001824:	40b40000 	.word	0x40b40000

08001828 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00b      	beq.n	800184e <null_ptr_check+0x26>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d007      	beq.n	800184e <null_ptr_check+0x26>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <null_ptr_check+0x26>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 800184e:	23ff      	movs	r3, #255	; 0xff
 8001850:	73fb      	strb	r3, [r7, #15]
 8001852:	e001      	b.n	8001858 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8001876:	2301      	movs	r3, #1
 8001878:	75fb      	strb	r3, [r7, #23]
 800187a:	e016      	b.n	80018aa <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800187c:	7dfb      	ldrb	r3, [r7, #23]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	441a      	add	r2, r3
 8001882:	7dfb      	ldrb	r3, [r7, #23]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	3b01      	subs	r3, #1
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	440b      	add	r3, r1
 800188c:	7812      	ldrb	r2, [r2, #0]
 800188e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001890:	7dfb      	ldrb	r3, [r7, #23]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	441a      	add	r2, r3
 8001896:	7dfb      	ldrb	r3, [r7, #23]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4619      	mov	r1, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	440b      	add	r3, r1
 80018a0:	7812      	ldrb	r2, [r2, #0]
 80018a2:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	3301      	adds	r3, #1
 80018a8:	75fb      	strb	r3, [r7, #23]
 80018aa:	7dfa      	ldrb	r2, [r7, #23]
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d3e4      	bcc.n	800187c <interleave_data+0x14>
    }
}
 80018b2:	bf00      	nop
 80018b4:	371c      	adds	r7, #28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b08a      	sub	sp, #40	; 0x28
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	615a      	str	r2, [r3, #20]

    rslt = null_ptr_check(dev);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ffa5 	bl	8001828 <null_ptr_check>
 80018de:	4603      	mov	r3, r0
 80018e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 80018e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d17f      	bne.n	80019ec <get_calib_param+0x12e>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 80018ec:	f107 010c 	add.w	r1, r7, #12
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2218      	movs	r2, #24
 80018f4:	2088      	movs	r0, #136	; 0x88
 80018f6:	f7ff fc55 	bl	80011a4 <bmp280_get_regs>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8001900:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001904:	2b00      	cmp	r3, #0
 8001906:	d171      	bne.n	80019ec <get_calib_param+0x12e>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8001908:	7b7b      	ldrb	r3, [r7, #13]
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	b21a      	sxth	r2, r3
 800190e:	7b3b      	ldrb	r3, [r7, #12]
 8001910:	b21b      	sxth	r3, r3
 8001912:	4313      	orrs	r3, r2
 8001914:	b21b      	sxth	r3, r3
 8001916:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	b21a      	sxth	r2, r3
 8001922:	7bbb      	ldrb	r3, [r7, #14]
 8001924:	b21b      	sxth	r3, r3
 8001926:	4313      	orrs	r3, r2
 8001928:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 800192e:	7c7b      	ldrb	r3, [r7, #17]
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	b21a      	sxth	r2, r3
 8001934:	7c3b      	ldrb	r3, [r7, #16]
 8001936:	b21b      	sxth	r3, r3
 8001938:	4313      	orrs	r3, r2
 800193a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8001940:	7cfb      	ldrb	r3, [r7, #19]
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	b21a      	sxth	r2, r3
 8001946:	7cbb      	ldrb	r3, [r7, #18]
 8001948:	b21b      	sxth	r3, r3
 800194a:	4313      	orrs	r3, r2
 800194c:	b21b      	sxth	r3, r3
 800194e:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8001954:	7d7b      	ldrb	r3, [r7, #21]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	b21a      	sxth	r2, r3
 800195a:	7d3b      	ldrb	r3, [r7, #20]
 800195c:	b21b      	sxth	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8001966:	7dfb      	ldrb	r3, [r7, #23]
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	b21a      	sxth	r2, r3
 800196c:	7dbb      	ldrb	r3, [r7, #22]
 800196e:	b21b      	sxth	r3, r3
 8001970:	4313      	orrs	r3, r2
 8001972:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8001978:	7e7b      	ldrb	r3, [r7, #25]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	b21a      	sxth	r2, r3
 800197e:	7e3b      	ldrb	r3, [r7, #24]
 8001980:	b21b      	sxth	r3, r3
 8001982:	4313      	orrs	r3, r2
 8001984:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 800198a:	7efb      	ldrb	r3, [r7, #27]
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	b21a      	sxth	r2, r3
 8001990:	7ebb      	ldrb	r3, [r7, #26]
 8001992:	b21b      	sxth	r3, r3
 8001994:	4313      	orrs	r3, r2
 8001996:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 800199c:	7f7b      	ldrb	r3, [r7, #29]
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	b21a      	sxth	r2, r3
 80019a2:	7f3b      	ldrb	r3, [r7, #28]
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	4313      	orrs	r3, r2
 80019a8:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 80019ae:	7ffb      	ldrb	r3, [r7, #31]
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	b21a      	sxth	r2, r3
 80019b4:	7fbb      	ldrb	r3, [r7, #30]
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	4313      	orrs	r3, r2
 80019ba:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 80019c0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	b21a      	sxth	r2, r3
 80019c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	4313      	orrs	r3, r2
 80019d0:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 80019d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	b21a      	sxth	r2, r3
 80019de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	4313      	orrs	r3, r2
 80019e6:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 80019ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3728      	adds	r7, #40	; 0x28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001a06:	2300      	movs	r3, #0
 8001a08:	753b      	strb	r3, [r7, #20]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	757b      	strb	r3, [r7, #21]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8001a0e:	4b56      	ldr	r3, [pc, #344]	; (8001b68 <conf_sensor+0x170>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff07 	bl	8001828 <null_ptr_check>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8001a1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 8095 	bne.w	8001b52 <conf_sensor+0x15a>
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 8091 	beq.w	8001b52 <conf_sensor+0x15a>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8001a30:	f107 0114 	add.w	r1, r7, #20
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2202      	movs	r2, #2
 8001a38:	20f4      	movs	r0, #244	; 0xf4
 8001a3a:	f7ff fbb3 	bl	80011a4 <bmp280_get_regs>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8001a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f040 8086 	bne.w	8001b58 <conf_sensor+0x160>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fc4e 	bl	80012ee <bmp280_soft_reset>
 8001a52:	4603      	mov	r3, r0
 8001a54:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8001a56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d17c      	bne.n	8001b58 <conf_sensor+0x160>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 8001a5e:	7d3b      	ldrb	r3, [r7, #20]
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	b25a      	sxtb	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	015b      	lsls	r3, r3, #5
 8001a6e:	b25b      	sxtb	r3, r3
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b25b      	sxtb	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8001a78:	7d3b      	ldrb	r3, [r7, #20]
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	f023 031c 	bic.w	r3, r3, #28
 8001a80:	b25a      	sxtb	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	785b      	ldrb	r3, [r3, #1]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	b25b      	sxtb	r3, r3
 8001a8a:	f003 031c 	and.w	r3, r3, #28
 8001a8e:	b25b      	sxtb	r3, r3
 8001a90:	4313      	orrs	r3, r2
 8001a92:	b25b      	sxtb	r3, r3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8001a98:	7d7b      	ldrb	r3, [r7, #21]
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	b25a      	sxtb	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	789b      	ldrb	r3, [r3, #2]
 8001aa6:	015b      	lsls	r3, r3, #5
 8001aa8:	b25b      	sxtb	r3, r3
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b25b      	sxtb	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 8001ab2:	7d7b      	ldrb	r3, [r7, #21]
 8001ab4:	b25b      	sxtb	r3, r3
 8001ab6:	f023 031c 	bic.w	r3, r3, #28
 8001aba:	b25a      	sxtb	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	78db      	ldrb	r3, [r3, #3]
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	b25b      	sxtb	r3, r3
 8001ac4:	f003 031c 	and.w	r3, r3, #28
 8001ac8:	b25b      	sxtb	r3, r3
 8001aca:	4313      	orrs	r3, r2
 8001acc:	b25b      	sxtb	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 8001ad2:	7d7b      	ldrb	r3, [r7, #21]
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	b25a      	sxtb	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	791b      	ldrb	r3, [r3, #4]
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	b25b      	sxtb	r3, r3
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8001af0:	f107 0114 	add.w	r1, r7, #20
 8001af4:	f107 0010 	add.w	r0, r7, #16
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f7ff fb89 	bl	8001212 <bmp280_set_regs>
 8001b00:	4603      	mov	r3, r0
 8001b02:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8001b04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d125      	bne.n	8001b58 <conf_sensor+0x160>
                {
                    dev->conf = *conf;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	332c      	adds	r3, #44	; 0x2c
 8001b12:	6810      	ldr	r0, [r2, #0]
 8001b14:	6018      	str	r0, [r3, #0]
 8001b16:	7912      	ldrb	r2, [r2, #4]
 8001b18:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d01b      	beq.n	8001b58 <conf_sensor+0x160>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8001b20:	7d3b      	ldrb	r3, [r7, #20]
 8001b22:	b25b      	sxtb	r3, r3
 8001b24:	f023 0303 	bic.w	r3, r3, #3
 8001b28:	b25a      	sxtb	r2, r3
 8001b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	b25b      	sxtb	r3, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b25b      	sxtb	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 8001b3c:	f107 0114 	add.w	r1, r7, #20
 8001b40:	f107 0010 	add.w	r0, r7, #16
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f7ff fb63 	bl	8001212 <bmp280_set_regs>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8001b50:	e002      	b.n	8001b58 <conf_sensor+0x160>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001b52:	23ff      	movs	r3, #255	; 0xff
 8001b54:	75fb      	strb	r3, [r7, #23]
 8001b56:	e000      	b.n	8001b5a <conf_sensor+0x162>
        if (rslt == BMP280_OK)
 8001b58:	bf00      	nop
    }

    return rslt;
 8001b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	0800c1e0 	.word	0x0800c1e0

08001b6c <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	dd03      	ble.n	8001b88 <st_check_boundaries+0x1c>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a15      	ldr	r2, [pc, #84]	; (8001bd8 <st_check_boundaries+0x6c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	dd09      	ble.n	8001b9c <st_check_boundaries+0x30>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	dd03      	ble.n	8001b96 <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	4a11      	ldr	r2, [pc, #68]	; (8001bd8 <st_check_boundaries+0x6c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	dd02      	ble.n	8001b9c <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001b96:	23f4      	movs	r3, #244	; 0xf4
 8001b98:	73fb      	strb	r3, [r7, #15]
 8001b9a:	e015      	b.n	8001bc8 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	dd03      	ble.n	8001baa <st_check_boundaries+0x3e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <st_check_boundaries+0x6c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	dd02      	ble.n	8001bb0 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 8001baa:	23f6      	movs	r3, #246	; 0xf6
 8001bac:	73fb      	strb	r3, [r7, #15]
 8001bae:	e00b      	b.n	8001bc8 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	dd03      	ble.n	8001bbe <st_check_boundaries+0x52>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <st_check_boundaries+0x6c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	dd02      	ble.n	8001bc4 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8001bbe:	23f5      	movs	r3, #245	; 0xf5
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	e001      	b.n	8001bc8 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	000fffef 	.word	0x000fffef

08001bdc <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001be2:	463b      	mov	r3, r7
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001bea:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <MX_DAC_Init+0x4c>)
 8001bec:	4a0f      	ldr	r2, [pc, #60]	; (8001c2c <MX_DAC_Init+0x50>)
 8001bee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001bf0:	480d      	ldr	r0, [pc, #52]	; (8001c28 <MX_DAC_Init+0x4c>)
 8001bf2:	f001 ffa8 	bl	8003b46 <HAL_DAC_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001bfc:	f000 feae 	bl	800295c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001c08:	463b      	mov	r3, r7
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4806      	ldr	r0, [pc, #24]	; (8001c28 <MX_DAC_Init+0x4c>)
 8001c10:	f002 f80f 	bl	8003c32 <HAL_DAC_ConfigChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001c1a:	f000 fe9f 	bl	800295c <Error_Handler>
  }

}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000320 	.word	0x20000320
 8001c2c:	40007400 	.word	0x40007400

08001c30 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a32      	ldr	r2, [pc, #200]	; (8001d18 <HAL_DAC_MspInit+0xe8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d15d      	bne.n	8001d0e <HAL_DAC_MspInit+0xde>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001c52:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <HAL_DAC_MspInit+0xec>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a31      	ldr	r2, [pc, #196]	; (8001d1c <HAL_DAC_MspInit+0xec>)
 8001c58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <HAL_DAC_MspInit+0xec>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	4b2c      	ldr	r3, [pc, #176]	; (8001d1c <HAL_DAC_MspInit+0xec>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a2b      	ldr	r2, [pc, #172]	; (8001d1c <HAL_DAC_MspInit+0xec>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <HAL_DAC_MspInit+0xec>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = OSC_AOUT_Pin;
 8001c82:	2310      	movs	r3, #16
 8001c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c86:	2303      	movs	r3, #3
 8001c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OSC_AOUT_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4822      	ldr	r0, [pc, #136]	; (8001d20 <HAL_DAC_MspInit+0xf0>)
 8001c96:	f002 fb2d 	bl	80042f4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001c9a:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001c9c:	4a22      	ldr	r2, [pc, #136]	; (8001d28 <HAL_DAC_MspInit+0xf8>)
 8001c9e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001ca2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001ca6:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001caa:	2240      	movs	r2, #64	; 0x40
 8001cac:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cba:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001cbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cc2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001cc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cca:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001cd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cda:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001ce2:	4810      	ldr	r0, [pc, #64]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001ce4:	f001 fffc 	bl	8003ce0 <HAL_DMA_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 8001cee:	f000 fe35 	bl	800295c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2100      	movs	r1, #0
 8001d02:	2036      	movs	r0, #54	; 0x36
 8001d04:	f001 fee9 	bl	8003ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d08:	2036      	movs	r0, #54	; 0x36
 8001d0a:	f001 ff02 	bl	8003b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3728      	adds	r7, #40	; 0x28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40007400 	.word	0x40007400
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020000 	.word	0x40020000
 8001d24:	200002c0 	.word	0x200002c0
 8001d28:	40026088 	.word	0x40026088

08001d2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <MX_DMA_Init+0x60>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a15      	ldr	r2, [pc, #84]	; (8001d8c <MX_DMA_Init+0x60>)
 8001d38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <MX_DMA_Init+0x60>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <MX_DMA_Init+0x60>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a0f      	ldr	r2, [pc, #60]	; (8001d8c <MX_DMA_Init+0x60>)
 8001d50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <MX_DMA_Init+0x60>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	2010      	movs	r0, #16
 8001d68:	f001 feb7 	bl	8003ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d6c:	2010      	movs	r0, #16
 8001d6e:	f001 fed0 	bl	8003b12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	2038      	movs	r0, #56	; 0x38
 8001d78:	f001 feaf 	bl	8003ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d7c:	2038      	movs	r0, #56	; 0x38
 8001d7e:	f001 fec8 	bl	8003b12 <HAL_NVIC_EnableIRQ>

}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800

08001d90 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08e      	sub	sp, #56	; 0x38
 8001d94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001da6:	4bb3      	ldr	r3, [pc, #716]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4ab2      	ldr	r2, [pc, #712]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001dac:	f043 0310 	orr.w	r3, r3, #16
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4bb0      	ldr	r3, [pc, #704]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	623b      	str	r3, [r7, #32]
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbe:	4bad      	ldr	r3, [pc, #692]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4aac      	ldr	r2, [pc, #688]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4baa      	ldr	r3, [pc, #680]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dd6:	4ba7      	ldr	r3, [pc, #668]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4aa6      	ldr	r2, [pc, #664]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001ddc:	f043 0320 	orr.w	r3, r3, #32
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4ba4      	ldr	r3, [pc, #656]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dee:	4ba1      	ldr	r3, [pc, #644]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4aa0      	ldr	r2, [pc, #640]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b9e      	ldr	r3, [pc, #632]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	4b9b      	ldr	r3, [pc, #620]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a9a      	ldr	r2, [pc, #616]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b98      	ldr	r3, [pc, #608]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	4b95      	ldr	r3, [pc, #596]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a94      	ldr	r2, [pc, #592]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b92      	ldr	r3, [pc, #584]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e36:	4b8f      	ldr	r3, [pc, #572]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a8e      	ldr	r2, [pc, #568]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b8c      	ldr	r3, [pc, #560]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4e:	4b89      	ldr	r3, [pc, #548]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a88      	ldr	r2, [pc, #544]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e54:	f043 0308 	orr.w	r3, r3, #8
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b86      	ldr	r3, [pc, #536]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS2_Pin|BMP280_CS1_Pin, GPIO_PIN_SET);
 8001e66:	2201      	movs	r2, #1
 8001e68:	2118      	movs	r1, #24
 8001e6a:	4883      	ldr	r0, [pc, #524]	; (8002078 <MX_GPIO_Init+0x2e8>)
 8001e6c:	f002 fbec 	bl	8004648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DISP_F_Pin|DISP_E_Pin|DISP_2_Pin|DISP_1_Pin
 8001e70:	2200      	movs	r2, #0
 8001e72:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8001e76:	4881      	ldr	r0, [pc, #516]	; (800207c <MX_GPIO_Init+0x2ec>)
 8001e78:	f002 fbe6 	bl	8004648 <HAL_GPIO_WritePin>
                          |DISP_3_Pin|DISP_D_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISP_H_Pin|LCD_RS_Pin|LAMP_TRIAC_Pin, GPIO_PIN_RESET);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2149      	movs	r1, #73	; 0x49
 8001e80:	487f      	ldr	r0, [pc, #508]	; (8002080 <MX_GPIO_Init+0x2f0>)
 8001e82:	f002 fbe1 	bl	8004648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2108      	movs	r1, #8
 8001e8a:	487e      	ldr	r0, [pc, #504]	; (8002084 <MX_GPIO_Init+0x2f4>)
 8001e8c:	f002 fbdc 	bl	8004648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 8001e90:	2200      	movs	r2, #0
 8001e92:	f644 4181 	movw	r1, #19585	; 0x4c81
 8001e96:	487c      	ldr	r0, [pc, #496]	; (8002088 <MX_GPIO_Init+0x2f8>)
 8001e98:	f002 fbd6 	bl	8004648 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISP_A_Pin|DISP_4_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2143      	movs	r1, #67	; 0x43
 8001ea0:	487a      	ldr	r0, [pc, #488]	; (800208c <MX_GPIO_Init+0x2fc>)
 8001ea2:	f002 fbd1 	bl	8004648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1EX_GPIO_Port, LD1EX_Pin, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eac:	4872      	ldr	r0, [pc, #456]	; (8002078 <MX_GPIO_Init+0x2e8>)
 8001eae:	f002 fbcb 	bl	8004648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISP_C_Pin|DISP_B_Pin|DISP_G_Pin|LCD_D4_Pin
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	21fb      	movs	r1, #251	; 0xfb
 8001eb6:	4876      	ldr	r0, [pc, #472]	; (8002090 <MX_GPIO_Init+0x300>)
 8001eb8:	f002 fbc6 	bl	8004648 <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP280_CS2_Pin|BMP280_CS1_Pin;
 8001ebc:	2318      	movs	r3, #24
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4869      	ldr	r0, [pc, #420]	; (8002078 <MX_GPIO_Init+0x2e8>)
 8001ed4:	f002 fa0e 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ede:	4b6d      	ldr	r3, [pc, #436]	; (8002094 <MX_GPIO_Init+0x304>)
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eea:	4619      	mov	r1, r3
 8001eec:	4864      	ldr	r0, [pc, #400]	; (8002080 <MX_GPIO_Init+0x2f0>)
 8001eee:	f002 fa01 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = DISP_F_Pin|DISP_E_Pin|DISP_D_Pin;
 8001ef2:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ef8:	2311      	movs	r3, #17
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001efc:	2301      	movs	r3, #1
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f08:	4619      	mov	r1, r3
 8001f0a:	485c      	ldr	r0, [pc, #368]	; (800207c <MX_GPIO_Init+0x2ec>)
 8001f0c:	f002 f9f2 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = DISP_2_Pin|DISP_1_Pin|DISP_3_Pin;
 8001f10:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f16:	2301      	movs	r3, #1
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f26:	4619      	mov	r1, r3
 8001f28:	4854      	ldr	r0, [pc, #336]	; (800207c <MX_GPIO_Init+0x2ec>)
 8001f2a:	f002 f9e3 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISP_H_Pin;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f32:	2311      	movs	r3, #17
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DISP_H_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f42:	4619      	mov	r1, r3
 8001f44:	484e      	ldr	r0, [pc, #312]	; (8002080 <MX_GPIO_Init+0x2f0>)
 8001f46:	f002 f9d5 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f4a:	2332      	movs	r3, #50	; 0x32
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f56:	2303      	movs	r3, #3
 8001f58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f5a:	230b      	movs	r3, #11
 8001f5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f62:	4619      	mov	r1, r3
 8001f64:	4846      	ldr	r0, [pc, #280]	; (8002080 <MX_GPIO_Init+0x2f0>)
 8001f66:	f002 f9c5 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7e:	4619      	mov	r1, r3
 8001f80:	483f      	ldr	r0, [pc, #252]	; (8002080 <MX_GPIO_Init+0x2f0>)
 8001f82:	f002 f9b7 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001f86:	2306      	movs	r3, #6
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f96:	230b      	movs	r3, #11
 8001f98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4838      	ldr	r0, [pc, #224]	; (8002084 <MX_GPIO_Init+0x2f4>)
 8001fa2:	f002 f9a7 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001faa:	2301      	movs	r3, #1
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8001fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4831      	ldr	r0, [pc, #196]	; (8002084 <MX_GPIO_Init+0x2f4>)
 8001fbe:	f002 f999 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX1_Btn_Pin;
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fc6:	4b34      	ldr	r3, [pc, #208]	; (8002098 <MX_GPIO_Init+0x308>)
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EX1_Btn_GPIO_Port, &GPIO_InitStruct);
 8001fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	482b      	ldr	r0, [pc, #172]	; (8002084 <MX_GPIO_Init+0x2f4>)
 8001fd6:	f002 f98d 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 8001fda:	f644 4381 	movw	r3, #19585	; 0x4c81
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4825      	ldr	r0, [pc, #148]	; (8002088 <MX_GPIO_Init+0x2f8>)
 8001ff4:	f002 f97e 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX2_Btn_Pin;
 8001ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ffe:	4b25      	ldr	r3, [pc, #148]	; (8002094 <MX_GPIO_Init+0x304>)
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EX2_Btn_GPIO_Port, &GPIO_InitStruct);
 8002006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200a:	4619      	mov	r1, r3
 800200c:	481b      	ldr	r0, [pc, #108]	; (800207c <MX_GPIO_Init+0x2ec>)
 800200e:	f002 f971 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISP_A_Pin;
 8002012:	2301      	movs	r3, #1
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002016:	2311      	movs	r3, #17
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800201a:	2301      	movs	r3, #1
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DISP_A_GPIO_Port, &GPIO_InitStruct);
 8002022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002026:	4619      	mov	r1, r3
 8002028:	4818      	ldr	r0, [pc, #96]	; (800208c <MX_GPIO_Init+0x2fc>)
 800202a:	f002 f963 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = DISP_4_Pin|USB_PowerSwitchOn_Pin;
 800202e:	2342      	movs	r3, #66	; 0x42
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002032:	2301      	movs	r3, #1
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800203e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002042:	4619      	mov	r1, r3
 8002044:	4811      	ldr	r0, [pc, #68]	; (800208c <MX_GPIO_Init+0x2fc>)
 8002046:	f002 f955 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1EX_Pin;
 800204a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD1EX_GPIO_Port, &GPIO_InitStruct);
 800205c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002060:	4619      	mov	r1, r3
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <MX_GPIO_Init+0x2e8>)
 8002064:	f002 f946 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	e014      	b.n	800209c <MX_GPIO_Init+0x30c>
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800
 8002078:	40021000 	.word	0x40021000
 800207c:	40021400 	.word	0x40021400
 8002080:	40020800 	.word	0x40020800
 8002084:	40020000 	.word	0x40020000
 8002088:	40020400 	.word	0x40020400
 800208c:	40021800 	.word	0x40021800
 8002090:	40020c00 	.word	0x40020c00
 8002094:	10110000 	.word	0x10110000
 8002098:	10210000 	.word	0x10210000
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020a6:	230b      	movs	r3, #11
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80020aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ae:	4619      	mov	r1, r3
 80020b0:	4851      	ldr	r0, [pc, #324]	; (80021f8 <MX_GPIO_Init+0x468>)
 80020b2:	f002 f91f 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 80020b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020bc:	4b4f      	ldr	r3, [pc, #316]	; (80021fc <MX_GPIO_Init+0x46c>)
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 80020c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c8:	4619      	mov	r1, r3
 80020ca:	484b      	ldr	r0, [pc, #300]	; (80021f8 <MX_GPIO_Init+0x468>)
 80020cc:	f002 f912 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 80020d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020d6:	4b4a      	ldr	r3, [pc, #296]	; (8002200 <MX_GPIO_Init+0x470>)
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e2:	4619      	mov	r1, r3
 80020e4:	4847      	ldr	r0, [pc, #284]	; (8002204 <MX_GPIO_Init+0x474>)
 80020e6:	f002 f905 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 80020ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 80020f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fc:	4619      	mov	r1, r3
 80020fe:	4841      	ldr	r0, [pc, #260]	; (8002204 <MX_GPIO_Init+0x474>)
 8002100:	f002 f8f8 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002108:	2300      	movs	r3, #0
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002114:	4619      	mov	r1, r3
 8002116:	483c      	ldr	r0, [pc, #240]	; (8002208 <MX_GPIO_Init+0x478>)
 8002118:	f002 f8ec 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 800211c:	2340      	movs	r3, #64	; 0x40
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002120:	2301      	movs	r3, #1
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002128:	2302      	movs	r3, #2
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002130:	4619      	mov	r1, r3
 8002132:	4836      	ldr	r0, [pc, #216]	; (800220c <MX_GPIO_Init+0x47c>)
 8002134:	f002 f8de 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002138:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002146:	2303      	movs	r3, #3
 8002148:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800214a:	230a      	movs	r3, #10
 800214c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002152:	4619      	mov	r1, r3
 8002154:	482e      	ldr	r0, [pc, #184]	; (8002210 <MX_GPIO_Init+0x480>)
 8002156:	f002 f8cd 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800215a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002160:	2300      	movs	r3, #0
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216c:	4619      	mov	r1, r3
 800216e:	4828      	ldr	r0, [pc, #160]	; (8002210 <MX_GPIO_Init+0x480>)
 8002170:	f002 f8c0 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DISP_C_Pin|DISP_B_Pin|DISP_G_Pin;
 8002174:	230b      	movs	r3, #11
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002178:	2311      	movs	r3, #17
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800217c:	2301      	movs	r3, #1
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002188:	4619      	mov	r1, r3
 800218a:	481e      	ldr	r0, [pc, #120]	; (8002204 <MX_GPIO_Init+0x474>)
 800218c:	f002 f8b2 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 8002190:	23f0      	movs	r3, #240	; 0xf0
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002194:	2301      	movs	r3, #1
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a4:	4619      	mov	r1, r3
 80021a6:	4817      	ldr	r0, [pc, #92]	; (8002204 <MX_GPIO_Init+0x474>)
 80021a8:	f002 f8a4 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80021ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ba:	2303      	movs	r3, #3
 80021bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021be:	230b      	movs	r3, #11
 80021c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c6:	4619      	mov	r1, r3
 80021c8:	480f      	ldr	r0, [pc, #60]	; (8002208 <MX_GPIO_Init+0x478>)
 80021ca:	f002 f893 	bl	80042f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	2017      	movs	r0, #23
 80021d4:	f001 fc81 	bl	8003ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80021d8:	2017      	movs	r0, #23
 80021da:	f001 fc9a 	bl	8003b12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	2028      	movs	r0, #40	; 0x28
 80021e4:	f001 fc79 	bl	8003ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021e8:	2028      	movs	r0, #40	; 0x28
 80021ea:	f001 fc92 	bl	8003b12 <HAL_NVIC_EnableIRQ>

}
 80021ee:	bf00      	nop
 80021f0:	3738      	adds	r7, #56	; 0x38
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40020400 	.word	0x40020400
 80021fc:	10110000 	.word	0x10110000
 8002200:	10210000 	.word	0x10210000
 8002204:	40020c00 	.word	0x40020c00
 8002208:	40021800 	.word	0x40021800
 800220c:	40020800 	.word	0x40020800
 8002210:	40020000 	.word	0x40020000

08002214 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <MX_I2C1_Init+0x74>)
 800221a:	4a1c      	ldr	r2, [pc, #112]	; (800228c <MX_I2C1_Init+0x78>)
 800221c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <MX_I2C1_Init+0x74>)
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <MX_I2C1_Init+0x7c>)
 8002222:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <MX_I2C1_Init+0x74>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <MX_I2C1_Init+0x74>)
 800222c:	2201      	movs	r2, #1
 800222e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002230:	4b15      	ldr	r3, [pc, #84]	; (8002288 <MX_I2C1_Init+0x74>)
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <MX_I2C1_Init+0x74>)
 8002238:	2200      	movs	r2, #0
 800223a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <MX_I2C1_Init+0x74>)
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_I2C1_Init+0x74>)
 8002244:	2200      	movs	r2, #0
 8002246:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <MX_I2C1_Init+0x74>)
 800224a:	2200      	movs	r2, #0
 800224c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800224e:	480e      	ldr	r0, [pc, #56]	; (8002288 <MX_I2C1_Init+0x74>)
 8002250:	f002 fa38 	bl	80046c4 <HAL_I2C_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800225a:	f000 fb7f 	bl	800295c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800225e:	2100      	movs	r1, #0
 8002260:	4809      	ldr	r0, [pc, #36]	; (8002288 <MX_I2C1_Init+0x74>)
 8002262:	f002 fabf 	bl	80047e4 <HAL_I2CEx_ConfigAnalogFilter>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800226c:	f000 fb76 	bl	800295c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002270:	2100      	movs	r1, #0
 8002272:	4805      	ldr	r0, [pc, #20]	; (8002288 <MX_I2C1_Init+0x74>)
 8002274:	f002 fb01 	bl	800487a <HAL_I2CEx_ConfigDigitalFilter>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800227e:	f000 fb6d 	bl	800295c <Error_Handler>
  }

}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000334 	.word	0x20000334
 800228c:	40005400 	.word	0x40005400
 8002290:	20404768 	.word	0x20404768

08002294 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a17      	ldr	r2, [pc, #92]	; (8002310 <HAL_I2C_MspInit+0x7c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d128      	bne.n	8002308 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <HAL_I2C_MspInit+0x80>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a16      	ldr	r2, [pc, #88]	; (8002314 <HAL_I2C_MspInit+0x80>)
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b14      	ldr	r3, [pc, #80]	; (8002314 <HAL_I2C_MspInit+0x80>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 80022ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d4:	2312      	movs	r3, #18
 80022d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d8:	2301      	movs	r3, #1
 80022da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022dc:	2303      	movs	r3, #3
 80022de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022e0:	2304      	movs	r3, #4
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	4619      	mov	r1, r3
 80022ea:	480b      	ldr	r0, [pc, #44]	; (8002318 <HAL_I2C_MspInit+0x84>)
 80022ec:	f002 f802 	bl	80042f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_I2C_MspInit+0x80>)
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	4a07      	ldr	r2, [pc, #28]	; (8002314 <HAL_I2C_MspInit+0x80>)
 80022f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022fa:	6413      	str	r3, [r2, #64]	; 0x40
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_I2C_MspInit+0x80>)
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002308:	bf00      	nop
 800230a:	3728      	adds	r7, #40	; 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40005400 	.word	0x40005400
 8002314:	40023800 	.word	0x40023800
 8002318:	40020400 	.word	0x40020400

0800231c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void  HAL_UART_RxCpltCallback(UART_HandleTypeDef  *huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT   (&huart3  , (uint8_t*) rx_buffer  , 2); //Zadawanie wypełnienia  PWM do tranzystora [0 3.3V]
 8002324:	2202      	movs	r2, #2
 8002326:	4915      	ldr	r1, [pc, #84]	; (800237c <HAL_UART_RxCpltCallback+0x60>)
 8002328:	4815      	ldr	r0, [pc, #84]	; (8002380 <HAL_UART_RxCpltCallback+0x64>)
 800232a:	f005 faef 	bl	800790c <HAL_UART_Receive_IT>

	if (huart->Instance == USART3)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a14      	ldr	r2, [pc, #80]	; (8002384 <HAL_UART_RxCpltCallback+0x68>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d11c      	bne.n	8002372 <HAL_UART_RxCpltCallback+0x56>
	{
		inc = (((float)rx_buffer [0] - 48)*10 +   ((float)rx_buffer [1] - 48));  //-48
 8002338:	4b10      	ldr	r3, [pc, #64]	; (800237c <HAL_UART_RxCpltCallback+0x60>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	ee07 3a90 	vmov	s15, r3
 8002340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002344:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002388 <HAL_UART_RxCpltCallback+0x6c>
 8002348:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800234c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002350:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_UART_RxCpltCallback+0x60>)
 8002356:	785b      	ldrb	r3, [r3, #1]
 8002358:	ee07 3a90 	vmov	s15, r3
 800235c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002360:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002388 <HAL_UART_RxCpltCallback+0x6c>
 8002364:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800236c:	4b07      	ldr	r3, [pc, #28]	; (800238c <HAL_UART_RxCpltCallback+0x70>)
 800236e:	edc3 7a00 	vstr	s15, [r3]

	}
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000380 	.word	0x20000380
 8002380:	20000530 	.word	0x20000530
 8002384:	40004800 	.word	0x40004800
 8002388:	42400000 	.word	0x42400000
 800238c:	20000000 	.word	0x20000000

08002390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b0a3      	sub	sp, #140	; 0x8c
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
struct bmp280_dev bmp280_1 = {
 8002396:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800239a:	2234      	movs	r2, #52	; 0x34
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f006 f9d0 	bl	8008744 <memset>
 80023a4:	2301      	movs	r3, #1
 80023a6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80023aa:	4ba6      	ldr	r3, [pc, #664]	; (8002644 <main+0x2b4>)
 80023ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80023ae:	4ba6      	ldr	r3, [pc, #664]	; (8002648 <main+0x2b8>)
 80023b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023b2:	4ba6      	ldr	r3, [pc, #664]	; (800264c <main+0x2bc>)
 80023b4:	653b      	str	r3, [r7, #80]	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b6:	f000 ffae 	bl	8003316 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023ba:	f000 f963 	bl	8002684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023be:	f7ff fce7 	bl	8001d90 <MX_GPIO_Init>
  MX_DMA_Init();
 80023c2:	f7ff fcb3 	bl	8001d2c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80023c6:	f000 ff01 	bl	80031cc <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80023ca:	f000 fc47 	bl	8002c5c <MX_TIM2_Init>
  MX_TIM3_Init();
 80023ce:	f000 fc9b 	bl	8002d08 <MX_TIM3_Init>
  MX_TIM4_Init();
 80023d2:	f000 fd31 	bl	8002e38 <MX_TIM4_Init>
  MX_I2C1_Init();
 80023d6:	f7ff ff1d 	bl	8002214 <MX_I2C1_Init>
  MX_SPI4_Init();
 80023da:	f000 fac7 	bl	800296c <MX_SPI4_Init>
  MX_ADC1_Init();
 80023de:	f7fe fdf3 	bl	8000fc8 <MX_ADC1_Init>
  MX_DAC_Init();
 80023e2:	f7ff fbfb 	bl	8001bdc <MX_DAC_Init>
  MX_TIM6_Init();
 80023e6:	f000 fd7b 	bl	8002ee0 <MX_TIM6_Init>
  MX_TIM7_Init();
 80023ea:	f000 fdaf 	bl	8002f4c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT   (&huart3  , (uint8_t*) rx_buffer  , 2);
 80023ee:	2202      	movs	r2, #2
 80023f0:	4997      	ldr	r1, [pc, #604]	; (8002650 <main+0x2c0>)
 80023f2:	4898      	ldr	r0, [pc, #608]	; (8002654 <main+0x2c4>)
 80023f4:	f005 fa8a 	bl	800790c <HAL_UART_Receive_IT>


  HAL_StatusTypeDef tx_status = HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

  HAL_TIM_Base_Init(&htim3); // Inicjalizacja timera 3 odpowiedzialnego za PWM
 80023fe:	4896      	ldr	r0, [pc, #600]	; (8002658 <main+0x2c8>)
 8002400:	f004 f89a 	bl	8006538 <HAL_TIM_Base_Init>

  //Initialize BMP280 sensor
  int8_t rslt;
  struct bmp280_config conf;

  rslt = bmp280_init(&bmp280_1);
 8002404:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe ff95 	bl	8001338 <bmp280_init>
 800240e:	4603      	mov	r3, r0
 8002410:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp280_get_config(&conf, &bmp280_1);
 8002414:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002418:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800241c:	4611      	mov	r1, r2
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe fff0 	bl	8001404 <bmp280_get_config>
 8002424:	4603      	mov	r3, r0
 8002426:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
  conf.filter = BMP280_FILTER_OFF;
 800242a:	2300      	movs	r3, #0
 800242c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  /* Temperature oversampling set at 4x */
  conf.os_temp = BMP280_OS_1X;
 8002430:	2301      	movs	r3, #1
 8002432:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  /* Pressure over sampling none (disabling pressure measurement) */
  conf.os_pres = BMP280_OS_1X;
 8002436:	2301      	movs	r3, #1
 8002438:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

  /* Setting the output data rate as 4HZ(250ms) */
  conf.odr = BMP280_ODR_1000_MS;
 800243c:	2305      	movs	r3, #5
 800243e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

  rslt = bmp280_set_config(&conf, &bmp280_1);
 8002442:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff f82b 	bl	80014a8 <bmp280_set_config>
 8002452:	4603      	mov	r3, r0
 8002454:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

  rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp280_1);
 8002458:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800245c:	4619      	mov	r1, r3
 800245e:	2003      	movs	r0, #3
 8002460:	f7ff f831 	bl	80014c6 <bmp280_set_power_mode>
 8002464:	4603      	mov	r3, r0
 8002466:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
  char str[4];

 // HAL_TIM_Base_Start(&htim3);
  //__HAL_TIM_SET_AUTORELOAD  (&htim3  , 999);

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Start PWM
 800246a:	210c      	movs	r1, #12
 800246c:	487a      	ldr	r0, [pc, #488]	; (8002658 <main+0x2c8>)
 800246e:	f004 f8c3 	bl	80065f8 <HAL_TIM_PWM_Start>

  arm_pid_instance_f32 PID;

  PID.Kp = K_P_CMSIS;
 8002472:	4b7a      	ldr	r3, [pc, #488]	; (800265c <main+0x2cc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	61bb      	str	r3, [r7, #24]
  PID.Ki = K_I_CMSIS;
 8002478:	4b79      	ldr	r3, [pc, #484]	; (8002660 <main+0x2d0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	61fb      	str	r3, [r7, #28]
  PID.Kd = K_D_CMSIS;
 800247e:	4b79      	ldr	r3, [pc, #484]	; (8002664 <main+0x2d4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	623b      	str	r3, [r7, #32]

  arm_pid_init_f32(&PID, 1); //Inicjalizacja PID
 8002484:	463b      	mov	r3, r7
 8002486:	2101      	movs	r1, #1
 8002488:	4618      	mov	r0, r3
 800248a:	f006 f913 	bl	80086b4 <arm_pid_init_f32>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Read BMP280 sensor
      /* Reading the raw data from sensor */
      rslt = bmp280_get_uncomp_data(&bmp280_1_data, &bmp280_1);
 800248e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002492:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff f833 	bl	8001504 <bmp280_get_uncomp_data>
 800249e:	4603      	mov	r3, r0
 80024a0:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

      /* Getting the 32 bit compensated temperature */
      rslt = bmp280_get_comp_temp_32bit(&temp32, bmp280_1_data.uncomp_temp, &bmp280_1);
 80024a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80024a6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80024aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff f877 	bl	80015a2 <bmp280_get_comp_temp_32bit>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

      /* Getting the compensated temperature as floating point value */
      rslt = bmp280_get_comp_temp_double(&temp, bmp280_1_data.uncomp_temp, &bmp280_1);
 80024ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80024bc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80024c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff f8d7 	bl	8001678 <bmp280_get_comp_temp_double>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

      /* Sleep time between measurements = BMP280_ODR_250_MS */
       bmp280_1.delay_ms(1000);
 80024d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024d6:	4798      	blx	r3

       pid_error = inc - temp; //blad
 80024d8:	4b63      	ldr	r3, [pc, #396]	; (8002668 <main+0x2d8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe f853 	bl	8000588 <__aeabi_f2d>
 80024e2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80024e6:	461a      	mov	r2, r3
 80024e8:	4623      	mov	r3, r4
 80024ea:	f7fd feed 	bl	80002c8 <__aeabi_dsub>
 80024ee:	4603      	mov	r3, r0
 80024f0:	460c      	mov	r4, r1
 80024f2:	4618      	mov	r0, r3
 80024f4:	4621      	mov	r1, r4
 80024f6:	f7fe fb97 	bl	8000c28 <__aeabi_d2f>
 80024fa:	4602      	mov	r2, r0
 80024fc:	4b5b      	ldr	r3, [pc, #364]	; (800266c <main+0x2dc>)
 80024fe:	601a      	str	r2, [r3, #0]
       //pid_error_abs = abs(pid_error);
       if (pid_error < 0)
 8002500:	4b5a      	ldr	r3, [pc, #360]	; (800266c <main+0x2dc>)
 8002502:	edd3 7a00 	vldr	s15, [r3]
 8002506:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800250a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250e:	d508      	bpl.n	8002522 <main+0x192>
    	   pid_error_abs = -pid_error;
 8002510:	4b56      	ldr	r3, [pc, #344]	; (800266c <main+0x2dc>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	eef1 7a67 	vneg.f32	s15, s15
 800251a:	4b55      	ldr	r3, [pc, #340]	; (8002670 <main+0x2e0>)
 800251c:	edc3 7a00 	vstr	s15, [r3]
 8002520:	e018      	b.n	8002554 <main+0x1c4>
       else if (pid_error > 0)
 8002522:	4b52      	ldr	r3, [pc, #328]	; (800266c <main+0x2dc>)
 8002524:	edd3 7a00 	vldr	s15, [r3]
 8002528:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002530:	dd04      	ble.n	800253c <main+0x1ac>
		   pid_error_abs = pid_error;
 8002532:	4b4e      	ldr	r3, [pc, #312]	; (800266c <main+0x2dc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a4e      	ldr	r2, [pc, #312]	; (8002670 <main+0x2e0>)
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e00b      	b.n	8002554 <main+0x1c4>
       else if (pid_error == 0)
 800253c:	4b4b      	ldr	r3, [pc, #300]	; (800266c <main+0x2dc>)
 800253e:	edd3 7a00 	vldr	s15, [r3]
 8002542:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254a:	d103      	bne.n	8002554 <main+0x1c4>
    	   pid_error_abs = 0;
 800254c:	4b48      	ldr	r3, [pc, #288]	; (8002670 <main+0x2e0>)
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
       duty = arm_pid_f32(&PID, pid_error); //wypelnienie PWM
 8002554:	4b45      	ldr	r3, [pc, #276]	; (800266c <main+0x2dc>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	463a      	mov	r2, r7
 800255a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800255e:	67fb      	str	r3, [r7, #124]	; 0x7c
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002560:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002564:	ed93 7a00 	vldr	s14, [r3]
 8002568:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800256c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002570:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002574:	edd3 6a01 	vldr	s13, [r3, #4]
 8002578:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800257c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002580:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002584:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002588:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800258c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002590:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002594:	edd3 7a04 	vldr	s15, [r3, #16]
 8002598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a4:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80025a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ac:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    /* Update state */
    S->state[1] = S->state[0];
 80025b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ba:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80025bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80025c2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80025c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80025ca:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80025cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ce:	4a29      	ldr	r2, [pc, #164]	; (8002674 <main+0x2e4>)
 80025d0:	6013      	str	r3, [r2, #0]

       if (duty > 1000) {
 80025d2:	4b28      	ldr	r3, [pc, #160]	; (8002674 <main+0x2e4>)
 80025d4:	edd3 7a00 	vldr	s15, [r3]
 80025d8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002678 <main+0x2e8>
 80025dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e4:	dd03      	ble.n	80025ee <main+0x25e>
                       duty = 1000;
 80025e6:	4b23      	ldr	r3, [pc, #140]	; (8002674 <main+0x2e4>)
 80025e8:	4a24      	ldr	r2, [pc, #144]	; (800267c <main+0x2ec>)
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	e00b      	b.n	8002606 <main+0x276>
                   } else if (duty < 0) {
 80025ee:	4b21      	ldr	r3, [pc, #132]	; (8002674 <main+0x2e4>)
 80025f0:	edd3 7a00 	vldr	s15, [r3]
 80025f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fc:	d503      	bpl.n	8002606 <main+0x276>
                       duty = 0;
 80025fe:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <main+0x2e4>)
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	601a      	str	r2, [r3, #0]


       //if(inc - temp < 2)
    	 //  duty /= 3;

	   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,duty); //zalacz grzalke
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <main+0x2e4>)
 8002608:	edd3 7a00 	vldr	s15, [r3]
 800260c:	4b12      	ldr	r3, [pc, #72]	; (8002658 <main+0x2c8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002614:	ee17 2a90 	vmov	r2, s15
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
    	   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,duty); //zalacz grzalke
    	   //wylacz wentylator
       } */


       sprintf(str, "%f", temp);
 800261a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800261e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002622:	461a      	mov	r2, r3
 8002624:	4623      	mov	r3, r4
 8002626:	4916      	ldr	r1, [pc, #88]	; (8002680 <main+0x2f0>)
 8002628:	f006 fed8 	bl	80093dc <siprintf>

       tx_status = HAL_UART_Transmit(&huart3,(uint8_t*) str, 5, 100); // Wyslanie temperatury
 800262c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002630:	2364      	movs	r3, #100	; 0x64
 8002632:	2205      	movs	r2, #5
 8002634:	4807      	ldr	r0, [pc, #28]	; (8002654 <main+0x2c4>)
 8002636:	f005 f8d7 	bl	80077e8 <HAL_UART_Transmit>
 800263a:	4603      	mov	r3, r0
 800263c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  {
 8002640:	e725      	b.n	800248e <main+0xfe>
 8002642:	bf00      	nop
 8002644:	0800286d 	.word	0x0800286d
 8002648:	080027ad 	.word	0x080027ad
 800264c:	080033d1 	.word	0x080033d1
 8002650:	20000380 	.word	0x20000380
 8002654:	20000530 	.word	0x20000530
 8002658:	20000430 	.word	0x20000430
 800265c:	20000004 	.word	0x20000004
 8002660:	20000008 	.word	0x20000008
 8002664:	2000000c 	.word	0x2000000c
 8002668:	20000000 	.word	0x20000000
 800266c:	20000384 	.word	0x20000384
 8002670:	20000388 	.word	0x20000388
 8002674:	20000208 	.word	0x20000208
 8002678:	447a0000 	.word	0x447a0000
 800267c:	447a0000 	.word	0x447a0000
 8002680:	0800c1e4 	.word	0x0800c1e4

08002684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b0b4      	sub	sp, #208	; 0xd0
 8002688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800268a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800268e:	2230      	movs	r2, #48	; 0x30
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f006 f856 	bl	8008744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002698:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a8:	f107 0308 	add.w	r3, r7, #8
 80026ac:	2284      	movs	r2, #132	; 0x84
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f006 f847 	bl	8008744 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80026b6:	f002 f92d 	bl	8004914 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ba:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <SystemClock_Config+0x120>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a39      	ldr	r2, [pc, #228]	; (80027a4 <SystemClock_Config+0x120>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
 80026c6:	4b37      	ldr	r3, [pc, #220]	; (80027a4 <SystemClock_Config+0x120>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d2:	4b35      	ldr	r3, [pc, #212]	; (80027a8 <SystemClock_Config+0x124>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a34      	ldr	r2, [pc, #208]	; (80027a8 <SystemClock_Config+0x124>)
 80026d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	4b32      	ldr	r3, [pc, #200]	; (80027a8 <SystemClock_Config+0x124>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80026f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80026f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026f8:	2302      	movs	r3, #2
 80026fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002702:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002706:	2304      	movs	r3, #4
 8002708:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 800270c:	23d8      	movs	r3, #216	; 0xd8
 800270e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002712:	2302      	movs	r3, #2
 8002714:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002718:	2303      	movs	r3, #3
 800271a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800271e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002722:	4618      	mov	r0, r3
 8002724:	f002 f956 	bl	80049d4 <HAL_RCC_OscConfig>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800272e:	f000 f915 	bl	800295c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002732:	f002 f8ff 	bl	8004934 <HAL_PWREx_EnableOverDrive>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800273c:	f000 f90e 	bl	800295c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002740:	230f      	movs	r3, #15
 8002742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002746:	2302      	movs	r3, #2
 8002748:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800274c:	2300      	movs	r3, #0
 800274e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002752:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002756:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800275a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800275e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002762:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002766:	2107      	movs	r1, #7
 8002768:	4618      	mov	r0, r3
 800276a:	f002 fbd7 	bl	8004f1c <HAL_RCC_ClockConfig>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002774:	f000 f8f2 	bl	800295c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8002778:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 800277c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800277e:	2300      	movs	r3, #0
 8002780:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002782:	2300      	movs	r3, #0
 8002784:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002786:	f107 0308 	add.w	r3, r7, #8
 800278a:	4618      	mov	r0, r3
 800278c:	f002 fdbe 	bl	800530c <HAL_RCCEx_PeriphCLKConfig>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8002796:	f000 f8e1 	bl	800295c <Error_Handler>
  }
}
 800279a:	bf00      	nop
 800279c:	37d0      	adds	r7, #208	; 0xd0
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40007000 	.word	0x40007000

080027ac <bmp280_spi_reg_write>:
 * @retval 0 -> Success
 * @retval >0 -> Failure Info
 *
 */
 int8_t bmp280_spi_reg_write ( uint8_t cs , uint8_t reg_addr , uint8_t * reg_data , uint16_t length )
 {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08c      	sub	sp, #48	; 0x30
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	603a      	str	r2, [r7, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
 80027ba:	460b      	mov	r3, r1
 80027bc:	71bb      	strb	r3, [r7, #6]
 80027be:	4613      	mov	r3, r2
 80027c0:	80bb      	strh	r3, [r7, #4]
 /* Implement the SPI write routine according to the target machine . */
 HAL_StatusTypeDef status = HAL_OK ;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 int32_t iError = BMP280_OK ;
 80027c8:	2300      	movs	r3, #0
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 uint8_t txarray [ BMP280_SPI_BUFFER_LEN ];
 uint8_t stringpos ;

 /* Copy register address and data to tx buffer */
 txarray [0] = reg_addr ;
 80027cc:	79bb      	ldrb	r3, [r7, #6]
 80027ce:	733b      	strb	r3, [r7, #12]
 for ( stringpos = 0; stringpos < length ; stringpos ++)
 80027d0:	2300      	movs	r3, #0
 80027d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027d6:	e011      	b.n	80027fc <bmp280_spi_reg_write+0x50>
 {
 txarray [ stringpos + BMP280_DATA_INDEX ] = reg_data [ stringpos ];
 80027d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	441a      	add	r2, r3
 80027e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027e4:	3301      	adds	r3, #1
 80027e6:	7812      	ldrb	r2, [r2, #0]
 80027e8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80027ec:	440b      	add	r3, r1
 80027ee:	f803 2c24 	strb.w	r2, [r3, #-36]
 for ( stringpos = 0; stringpos < length ; stringpos ++)
 80027f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027f6:	3301      	adds	r3, #1
 80027f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002800:	b29b      	uxth	r3, r3
 8002802:	88ba      	ldrh	r2, [r7, #4]
 8002804:	429a      	cmp	r2, r3
 8002806:	d8e7      	bhi.n	80027d8 <bmp280_spi_reg_write+0x2c>
 }
 // memcpy ( txarray + BMP280_DATA_INDEX , reg_data , length );

 /* Software slave selection procedure */
 if( cs == BMP280_CS1 )
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d104      	bne.n	8002818 <bmp280_spi_reg_write+0x6c>
 HAL_GPIO_WritePin ( BMP280_CS1_GPIO_Port , BMP280_CS1_Pin , GPIO_PIN_RESET ) ;
 800280e:	2200      	movs	r2, #0
 8002810:	2110      	movs	r1, #16
 8002812:	4814      	ldr	r0, [pc, #80]	; (8002864 <bmp280_spi_reg_write+0xb8>)
 8002814:	f001 ff18 	bl	8004648 <HAL_GPIO_WritePin>

 /* Data exchange */
 status = HAL_SPI_Transmit ( BMP280_SPI , ( uint8_t *) (& txarray ) , length +1 , 100) ;
 8002818:	88bb      	ldrh	r3, [r7, #4]
 800281a:	3301      	adds	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	f107 010c 	add.w	r1, r7, #12
 8002822:	2364      	movs	r3, #100	; 0x64
 8002824:	4810      	ldr	r0, [pc, #64]	; (8002868 <bmp280_spi_reg_write+0xbc>)
 8002826:	f003 f9f1 	bl	8005c0c <HAL_SPI_Transmit>
 800282a:	4603      	mov	r3, r0
 800282c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 while ( BMP280_SPI->State == HAL_SPI_STATE_BUSY ) {};
 8002830:	bf00      	nop
 8002832:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <bmp280_spi_reg_write+0xbc>)
 8002834:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d0f9      	beq.n	8002832 <bmp280_spi_reg_write+0x86>

 /* Disable all slaves */
 HAL_GPIO_WritePin ( BMP280_CS1_GPIO_Port , BMP280_CS1_Pin , GPIO_PIN_SET ) ;
 800283e:	2201      	movs	r2, #1
 8002840:	2110      	movs	r1, #16
 8002842:	4808      	ldr	r0, [pc, #32]	; (8002864 <bmp280_spi_reg_write+0xb8>)
 8002844:	f001 ff00 	bl	8004648 <HAL_GPIO_WritePin>

 if ( status != HAL_OK )
 8002848:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <bmp280_spi_reg_write+0xaa>
 {
 // The BMP280 API calls for 0 return value as a success , and -1 returned as failure
 iError = ( -1) ;
 8002850:	f04f 33ff 	mov.w	r3, #4294967295
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c
 }
 return ( int8_t ) iError ;
 8002856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002858:	b25b      	sxtb	r3, r3
 }
 800285a:	4618      	mov	r0, r3
 800285c:	3730      	adds	r7, #48	; 0x30
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000
 8002868:	2000038c 	.word	0x2000038c

0800286c <bmp280_spi_reg_read>:


 int8_t bmp280_spi_reg_read ( uint8_t cs , uint8_t reg_addr , uint8_t * reg_data , uint16_t length )
 {
 800286c:	b580      	push	{r7, lr}
 800286e:	b094      	sub	sp, #80	; 0x50
 8002870:	af02      	add	r7, sp, #8
 8002872:	603a      	str	r2, [r7, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
 800287a:	460b      	mov	r3, r1
 800287c:	71bb      	strb	r3, [r7, #6]
 800287e:	4613      	mov	r3, r2
 8002880:	80bb      	strh	r3, [r7, #4]
 /* Implement the SPI read routine according to the target machine . */
 HAL_StatusTypeDef status = HAL_OK ;
 8002882:	2300      	movs	r3, #0
 8002884:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 int32_t iError = BMP280_OK ;
 8002888:	2300      	movs	r3, #0
 800288a:	647b      	str	r3, [r7, #68]	; 0x44
 uint8_t txarray [ BMP280_SPI_BUFFER_LEN ] = {0 ,};
 800288c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	611a      	str	r2, [r3, #16]
 800289c:	615a      	str	r2, [r3, #20]
 800289e:	619a      	str	r2, [r3, #24]
 uint8_t rxarray [ BMP280_SPI_BUFFER_LEN ] = {0 ,};
 80028a0:	f107 0308 	add.w	r3, r7, #8
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
 80028b0:	615a      	str	r2, [r3, #20]
 80028b2:	619a      	str	r2, [r3, #24]
 uint8_t stringpos ;

 txarray [0] = reg_addr ;
 80028b4:	79bb      	ldrb	r3, [r7, #6]
 80028b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

 /* Software slave selection procedure */
 if( cs == BMP280_CS1 )
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d104      	bne.n	80028ca <bmp280_spi_reg_read+0x5e>
 HAL_GPIO_WritePin ( BMP280_CS1_GPIO_Port , BMP280_CS1_Pin , GPIO_PIN_RESET ) ;
 80028c0:	2200      	movs	r2, #0
 80028c2:	2110      	movs	r1, #16
 80028c4:	4823      	ldr	r0, [pc, #140]	; (8002954 <bmp280_spi_reg_read+0xe8>)
 80028c6:	f001 febf 	bl	8004648 <HAL_GPIO_WritePin>

 /* Data exchange */
 status = HAL_SPI_TransmitReceive ( BMP280_SPI , ( uint8_t *) (& txarray ) , ( uint8_t *) (&rxarray ) , length +1 , 5) ;
 80028ca:	88bb      	ldrh	r3, [r7, #4]
 80028cc:	3301      	adds	r3, #1
 80028ce:	b298      	uxth	r0, r3
 80028d0:	f107 0208 	add.w	r2, r7, #8
 80028d4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80028d8:	2305      	movs	r3, #5
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	4603      	mov	r3, r0
 80028de:	481e      	ldr	r0, [pc, #120]	; (8002958 <bmp280_spi_reg_read+0xec>)
 80028e0:	f003 fafa 	bl	8005ed8 <HAL_SPI_TransmitReceive>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 while ( BMP280_SPI-> State == HAL_SPI_STATE_BUSY ) {};
 80028ea:	bf00      	nop
 80028ec:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <bmp280_spi_reg_read+0xec>)
 80028ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d0f9      	beq.n	80028ec <bmp280_spi_reg_read+0x80>

 /* Disable all slaves */
 HAL_GPIO_WritePin ( BMP280_CS1_GPIO_Port , BMP280_CS1_Pin , GPIO_PIN_SET ) ;
 80028f8:	2201      	movs	r2, #1
 80028fa:	2110      	movs	r1, #16
 80028fc:	4815      	ldr	r0, [pc, #84]	; (8002954 <bmp280_spi_reg_read+0xe8>)
 80028fe:	f001 fea3 	bl	8004648 <HAL_GPIO_WritePin>

 /* Copy data from rx buffer */
 for ( stringpos = 0; stringpos < length ; stringpos ++)
 8002902:	2300      	movs	r3, #0
 8002904:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002908:	e011      	b.n	800292e <bmp280_spi_reg_read+0xc2>
 {
 reg_data [ stringpos ] = rxarray [ stringpos + BMP280_DATA_INDEX ];
 800290a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002914:	6839      	ldr	r1, [r7, #0]
 8002916:	440b      	add	r3, r1
 8002918:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800291c:	440a      	add	r2, r1
 800291e:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 8002922:	701a      	strb	r2, [r3, #0]
 for ( stringpos = 0; stringpos < length ; stringpos ++)
 8002924:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002928:	3301      	adds	r3, #1
 800292a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800292e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002932:	b29b      	uxth	r3, r3
 8002934:	88ba      	ldrh	r2, [r7, #4]
 8002936:	429a      	cmp	r2, r3
 8002938:	d8e7      	bhi.n	800290a <bmp280_spi_reg_read+0x9e>
 }
 // memcpy ( reg_data , rxarray + BMP280_DATA_INDEX , length );

 if ( status != HAL_OK )
 800293a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <bmp280_spi_reg_read+0xdc>
 {
 // The BME280 API calls for 0 return value as a success , and -1 returned as failure
 iError = ( -1) ;
 8002942:	f04f 33ff 	mov.w	r3, #4294967295
 8002946:	647b      	str	r3, [r7, #68]	; 0x44
 }

 return ( int8_t ) iError ;
 8002948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800294a:	b25b      	sxtb	r3, r3
 }
 800294c:	4618      	mov	r0, r3
 800294e:	3748      	adds	r7, #72	; 0x48
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	2000038c 	.word	0x2000038c

0800295c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <MX_SPI4_Init+0x74>)
 8002972:	4a1c      	ldr	r2, [pc, #112]	; (80029e4 <MX_SPI4_Init+0x78>)
 8002974:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002976:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <MX_SPI4_Init+0x74>)
 8002978:	f44f 7282 	mov.w	r2, #260	; 0x104
 800297c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800297e:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <MX_SPI4_Init+0x74>)
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002984:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <MX_SPI4_Init+0x74>)
 8002986:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800298a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800298c:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <MX_SPI4_Init+0x74>)
 800298e:	2202      	movs	r2, #2
 8002990:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <MX_SPI4_Init+0x74>)
 8002994:	2201      	movs	r2, #1
 8002996:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002998:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <MX_SPI4_Init+0x74>)
 800299a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800299e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <MX_SPI4_Init+0x74>)
 80029a2:	2218      	movs	r2, #24
 80029a4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029a6:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <MX_SPI4_Init+0x74>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <MX_SPI4_Init+0x74>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <MX_SPI4_Init+0x74>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <MX_SPI4_Init+0x74>)
 80029ba:	2207      	movs	r2, #7
 80029bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <MX_SPI4_Init+0x74>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <MX_SPI4_Init+0x74>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80029ca:	4805      	ldr	r0, [pc, #20]	; (80029e0 <MX_SPI4_Init+0x74>)
 80029cc:	f003 f88c 	bl	8005ae8 <HAL_SPI_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80029d6:	f7ff ffc1 	bl	800295c <Error_Handler>
  }

}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	2000038c 	.word	0x2000038c
 80029e4:	40013400 	.word	0x40013400

080029e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a17      	ldr	r2, [pc, #92]	; (8002a64 <HAL_SPI_MspInit+0x7c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d127      	bne.n	8002a5a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002a0a:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <HAL_SPI_MspInit+0x80>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	4a16      	ldr	r2, [pc, #88]	; (8002a68 <HAL_SPI_MspInit+0x80>)
 8002a10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a14:	6453      	str	r3, [r2, #68]	; 0x44
 8002a16:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_SPI_MspInit+0x80>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_SPI_MspInit+0x80>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4a10      	ldr	r2, [pc, #64]	; (8002a68 <HAL_SPI_MspInit+0x80>)
 8002a28:	f043 0310 	orr.w	r3, r3, #16
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <HAL_SPI_MspInit+0x80>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP280_SCK_Pin|BMP280_MISO_Pin|BMP280_MOSI_Pin;
 8002a3a:	2364      	movs	r3, #100	; 0x64
 8002a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a46:	2303      	movs	r3, #3
 8002a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002a4a:	2305      	movs	r3, #5
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	4805      	ldr	r0, [pc, #20]	; (8002a6c <HAL_SPI_MspInit+0x84>)
 8002a56:	f001 fc4d 	bl	80042f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	3728      	adds	r7, #40	; 0x28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40013400 	.word	0x40013400
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40021000 	.word	0x40021000

08002a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a76:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <HAL_MspInit+0x44>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <HAL_MspInit+0x44>)
 8002a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a80:	6413      	str	r3, [r2, #64]	; 0x40
 8002a82:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <HAL_MspInit+0x44>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	607b      	str	r3, [r7, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_MspInit+0x44>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	4a08      	ldr	r2, [pc, #32]	; (8002ab4 <HAL_MspInit+0x44>)
 8002a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a98:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_MspInit+0x44>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800

08002ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002abc:	e7fe      	b.n	8002abc <NMI_Handler+0x4>

08002abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ac2:	e7fe      	b.n	8002ac2 <HardFault_Handler+0x4>

08002ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ac8:	e7fe      	b.n	8002ac8 <MemManage_Handler+0x4>

08002aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ace:	e7fe      	b.n	8002ace <BusFault_Handler+0x4>

08002ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ad4:	e7fe      	b.n	8002ad4 <UsageFault_Handler+0x4>

08002ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002af2:	b480      	push	{r7}
 8002af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b04:	f000 fc44 	bl	8003390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <DMA1_Stream5_IRQHandler+0x10>)
 8002b12:	f001 f9b5 	bl	8003e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200002c0 	.word	0x200002c0

08002b20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002b24:	2020      	movs	r0, #32
 8002b26:	f001 fda9 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <TIM2_IRQHandler+0x10>)
 8002b36:	f003 fe7b 	bl	8006830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200004b0 	.word	0x200004b0

08002b44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <USART3_IRQHandler+0x10>)
 8002b4a:	f004 ff81 	bl	8007a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000530 	.word	0x20000530

08002b58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002b5c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b60:	f001 fd8c 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002b64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002b68:	f001 fd88 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002b6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b70:	f001 fd84 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002b74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002b78:	f001 fd80 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002b84:	4803      	ldr	r0, [pc, #12]	; (8002b94 <TIM6_DAC_IRQHandler+0x14>)
 8002b86:	f001 f800 	bl	8003b8a <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002b8a:	4803      	ldr	r0, [pc, #12]	; (8002b98 <TIM6_DAC_IRQHandler+0x18>)
 8002b8c:	f003 fe50 	bl	8006830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b90:	bf00      	nop
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20000320 	.word	0x20000320
 8002b98:	20000470 	.word	0x20000470

08002b9c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <TIM7_IRQHandler+0x10>)
 8002ba2:	f003 fe45 	bl	8006830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200004f0 	.word	0x200004f0

08002bb0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <DMA2_Stream0_IRQHandler+0x10>)
 8002bb6:	f001 f963 	bl	8003e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000260 	.word	0x20000260

08002bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bcc:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <_sbrk+0x5c>)
 8002bce:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <_sbrk+0x60>)
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bd8:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <_sbrk+0x64>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <_sbrk+0x64>)
 8002be2:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <_sbrk+0x68>)
 8002be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <_sbrk+0x64>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d207      	bcs.n	8002c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf4:	f005 fd7c 	bl	80086f0 <__errno>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	230c      	movs	r3, #12
 8002bfc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002c02:	e009      	b.n	8002c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <_sbrk+0x64>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c0a:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <_sbrk+0x64>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	4a05      	ldr	r2, [pc, #20]	; (8002c28 <_sbrk+0x64>)
 8002c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c16:	68fb      	ldr	r3, [r7, #12]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20050000 	.word	0x20050000
 8002c24:	00000400 	.word	0x00000400
 8002c28:	2000020c 	.word	0x2000020c
 8002c2c:	200005b8 	.word	0x200005b8

08002c30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c34:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <SystemInit+0x28>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	4a07      	ldr	r2, [pc, #28]	; (8002c58 <SystemInit+0x28>)
 8002c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <SystemInit+0x28>)
 8002c46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c4a:	609a      	str	r2, [r3, #8]
#endif
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c62:	f107 0310 	add.w	r3, r7, #16
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
 8002c6c:	609a      	str	r2, [r3, #8]
 8002c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002c7a:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <MX_TIM2_Init+0xa8>)
 8002c7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8002c82:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <MX_TIM2_Init+0xa8>)
 8002c84:	226b      	movs	r2, #107	; 0x6b
 8002c86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c88:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <MX_TIM2_Init+0xa8>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <MX_TIM2_Init+0xa8>)
 8002c90:	f241 3287 	movw	r2, #4999	; 0x1387
 8002c94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c96:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <MX_TIM2_Init+0xa8>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <MX_TIM2_Init+0xa8>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ca2:	4818      	ldr	r0, [pc, #96]	; (8002d04 <MX_TIM2_Init+0xa8>)
 8002ca4:	f003 fc48 	bl	8006538 <HAL_TIM_Base_Init>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002cae:	f7ff fe55 	bl	800295c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cb8:	f107 0310 	add.w	r3, r7, #16
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4811      	ldr	r0, [pc, #68]	; (8002d04 <MX_TIM2_Init+0xa8>)
 8002cc0:	f003 ffee 	bl	8006ca0 <HAL_TIM_ConfigClockSource>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002cca:	f7ff fe47 	bl	800295c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8002cce:	2108      	movs	r1, #8
 8002cd0:	480c      	ldr	r0, [pc, #48]	; (8002d04 <MX_TIM2_Init+0xa8>)
 8002cd2:	f003 fcd5 	bl	8006680 <HAL_TIM_OnePulse_Init>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002cdc:	f7ff fe3e 	bl	800295c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	4619      	mov	r1, r3
 8002cec:	4805      	ldr	r0, [pc, #20]	; (8002d04 <MX_TIM2_Init+0xa8>)
 8002cee:	f004 fc81 	bl	80075f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002cf8:	f7ff fe30 	bl	800295c <Error_Handler>
  }

}
 8002cfc:	bf00      	nop
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	200004b0 	.word	0x200004b0

08002d08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08e      	sub	sp, #56	; 0x38
 8002d0c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	605a      	str	r2, [r3, #4]
 8002d18:	609a      	str	r2, [r3, #8]
 8002d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d1c:	f107 031c 	add.w	r3, r7, #28
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d28:	463b      	mov	r3, r7
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]
 8002d34:	611a      	str	r2, [r3, #16]
 8002d36:	615a      	str	r2, [r3, #20]
 8002d38:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002d3a:	4b3d      	ldr	r3, [pc, #244]	; (8002e30 <MX_TIM3_Init+0x128>)
 8002d3c:	4a3d      	ldr	r2, [pc, #244]	; (8002e34 <MX_TIM3_Init+0x12c>)
 8002d3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8002d40:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <MX_TIM3_Init+0x128>)
 8002d42:	226b      	movs	r2, #107	; 0x6b
 8002d44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d46:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <MX_TIM3_Init+0x128>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002d4c:	4b38      	ldr	r3, [pc, #224]	; (8002e30 <MX_TIM3_Init+0x128>)
 8002d4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d54:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <MX_TIM3_Init+0x128>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d5a:	4b35      	ldr	r3, [pc, #212]	; (8002e30 <MX_TIM3_Init+0x128>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d60:	4833      	ldr	r0, [pc, #204]	; (8002e30 <MX_TIM3_Init+0x128>)
 8002d62:	f003 fbe9 	bl	8006538 <HAL_TIM_Base_Init>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002d6c:	f7ff fdf6 	bl	800295c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	482c      	ldr	r0, [pc, #176]	; (8002e30 <MX_TIM3_Init+0x128>)
 8002d7e:	f003 ff8f 	bl	8006ca0 <HAL_TIM_ConfigClockSource>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002d88:	f7ff fde8 	bl	800295c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d8c:	4828      	ldr	r0, [pc, #160]	; (8002e30 <MX_TIM3_Init+0x128>)
 8002d8e:	f003 fbfe 	bl	800658e <HAL_TIM_PWM_Init>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002d98:	f7ff fde0 	bl	800295c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da0:	2300      	movs	r3, #0
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002da4:	f107 031c 	add.w	r3, r7, #28
 8002da8:	4619      	mov	r1, r3
 8002daa:	4821      	ldr	r0, [pc, #132]	; (8002e30 <MX_TIM3_Init+0x128>)
 8002dac:	f004 fc22 	bl	80075f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002db6:	f7ff fdd1 	bl	800295c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dba:	2360      	movs	r3, #96	; 0x60
 8002dbc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dca:	463b      	mov	r3, r7
 8002dcc:	2200      	movs	r2, #0
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4817      	ldr	r0, [pc, #92]	; (8002e30 <MX_TIM3_Init+0x128>)
 8002dd2:	f003 fe4d 	bl	8006a70 <HAL_TIM_PWM_ConfigChannel>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002ddc:	f7ff fdbe 	bl	800295c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002de0:	463b      	mov	r3, r7
 8002de2:	2204      	movs	r2, #4
 8002de4:	4619      	mov	r1, r3
 8002de6:	4812      	ldr	r0, [pc, #72]	; (8002e30 <MX_TIM3_Init+0x128>)
 8002de8:	f003 fe42 	bl	8006a70 <HAL_TIM_PWM_ConfigChannel>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002df2:	f7ff fdb3 	bl	800295c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002df6:	463b      	mov	r3, r7
 8002df8:	2208      	movs	r2, #8
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	480c      	ldr	r0, [pc, #48]	; (8002e30 <MX_TIM3_Init+0x128>)
 8002dfe:	f003 fe37 	bl	8006a70 <HAL_TIM_PWM_ConfigChannel>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002e08:	f7ff fda8 	bl	800295c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e0c:	463b      	mov	r3, r7
 8002e0e:	220c      	movs	r2, #12
 8002e10:	4619      	mov	r1, r3
 8002e12:	4807      	ldr	r0, [pc, #28]	; (8002e30 <MX_TIM3_Init+0x128>)
 8002e14:	f003 fe2c 	bl	8006a70 <HAL_TIM_PWM_ConfigChannel>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002e1e:	f7ff fd9d 	bl	800295c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002e22:	4803      	ldr	r0, [pc, #12]	; (8002e30 <MX_TIM3_Init+0x128>)
 8002e24:	f000 f97c 	bl	8003120 <HAL_TIM_MspPostInit>

}
 8002e28:	bf00      	nop
 8002e2a:	3738      	adds	r7, #56	; 0x38
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20000430 	.word	0x20000430
 8002e34:	40000400 	.word	0x40000400

08002e38 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08c      	sub	sp, #48	; 0x30
 8002e3c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e3e:	f107 030c 	add.w	r3, r7, #12
 8002e42:	2224      	movs	r2, #36	; 0x24
 8002e44:	2100      	movs	r1, #0
 8002e46:	4618      	mov	r0, r3
 8002e48:	f005 fc7c 	bl	8008744 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e4c:	463b      	mov	r3, r7
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8002e56:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <MX_TIM4_Init+0xa0>)
 8002e58:	4a20      	ldr	r2, [pc, #128]	; (8002edc <MX_TIM4_Init+0xa4>)
 8002e5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8002e5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ed8 <MX_TIM4_Init+0xa0>)
 8002e5e:	2203      	movs	r2, #3
 8002e60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e62:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <MX_TIM4_Init+0xa0>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8002e68:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <MX_TIM4_Init+0xa0>)
 8002e6a:	2264      	movs	r2, #100	; 0x64
 8002e6c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ed8 <MX_TIM4_Init+0xa0>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e74:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <MX_TIM4_Init+0xa0>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e82:	2301      	movs	r3, #1
 8002e84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e92:	2301      	movs	r3, #1
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e96:	2300      	movs	r3, #0
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002e9e:	f107 030c 	add.w	r3, r7, #12
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	480c      	ldr	r0, [pc, #48]	; (8002ed8 <MX_TIM4_Init+0xa0>)
 8002ea6:	f003 fc31 	bl	800670c <HAL_TIM_Encoder_Init>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002eb0:	f7ff fd54 	bl	800295c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ebc:	463b      	mov	r3, r7
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4805      	ldr	r0, [pc, #20]	; (8002ed8 <MX_TIM4_Init+0xa0>)
 8002ec2:	f004 fb97 	bl	80075f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002ecc:	f7ff fd46 	bl	800295c <Error_Handler>
  }

}
 8002ed0:	bf00      	nop
 8002ed2:	3730      	adds	r7, #48	; 0x30
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	200003f0 	.word	0x200003f0
 8002edc:	40000800 	.word	0x40000800

08002ee0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee6:	1d3b      	adds	r3, r7, #4
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8002ef0:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <MX_TIM6_Init+0x64>)
 8002ef2:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <MX_TIM6_Init+0x68>)
 8002ef4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 107;
 8002ef6:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <MX_TIM6_Init+0x64>)
 8002ef8:	226b      	movs	r2, #107	; 0x6b
 8002efa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002efc:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <MX_TIM6_Init+0x64>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8002f02:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <MX_TIM6_Init+0x64>)
 8002f04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f08:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <MX_TIM6_Init+0x64>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f10:	480c      	ldr	r0, [pc, #48]	; (8002f44 <MX_TIM6_Init+0x64>)
 8002f12:	f003 fb11 	bl	8006538 <HAL_TIM_Base_Init>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002f1c:	f7ff fd1e 	bl	800295c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002f20:	2320      	movs	r3, #32
 8002f22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4805      	ldr	r0, [pc, #20]	; (8002f44 <MX_TIM6_Init+0x64>)
 8002f2e:	f004 fb61 	bl	80075f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002f38:	f7ff fd10 	bl	800295c <Error_Handler>
  }

}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20000470 	.word	0x20000470
 8002f48:	40001000 	.word	0x40001000

08002f4c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f52:	1d3b      	adds	r3, r7, #4
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8002f5c:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <MX_TIM7_Init+0x64>)
 8002f5e:	4a15      	ldr	r2, [pc, #84]	; (8002fb4 <MX_TIM7_Init+0x68>)
 8002f60:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 8002f62:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <MX_TIM7_Init+0x64>)
 8002f64:	226b      	movs	r2, #107	; 0x6b
 8002f66:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <MX_TIM7_Init+0x64>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <MX_TIM7_Init+0x64>)
 8002f70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f74:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f76:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <MX_TIM7_Init+0x64>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002f7c:	480c      	ldr	r0, [pc, #48]	; (8002fb0 <MX_TIM7_Init+0x64>)
 8002f7e:	f003 fadb 	bl	8006538 <HAL_TIM_Base_Init>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002f88:	f7ff fce8 	bl	800295c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002f94:	1d3b      	adds	r3, r7, #4
 8002f96:	4619      	mov	r1, r3
 8002f98:	4805      	ldr	r0, [pc, #20]	; (8002fb0 <MX_TIM7_Init+0x64>)
 8002f9a:	f004 fb2b 	bl	80075f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002fa4:	f7ff fcda 	bl	800295c <Error_Handler>
  }

}
 8002fa8:	bf00      	nop
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	200004f0 	.word	0x200004f0
 8002fb4:	40001400 	.word	0x40001400

08002fb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc8:	d114      	bne.n	8002ff4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fca:	4b2f      	ldr	r3, [pc, #188]	; (8003088 <HAL_TIM_Base_MspInit+0xd0>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	4a2e      	ldr	r2, [pc, #184]	; (8003088 <HAL_TIM_Base_MspInit+0xd0>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd6:	4b2c      	ldr	r3, [pc, #176]	; (8003088 <HAL_TIM_Base_MspInit+0xd0>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	201c      	movs	r0, #28
 8002fe8:	f000 fd77 	bl	8003ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fec:	201c      	movs	r0, #28
 8002fee:	f000 fd90 	bl	8003b12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002ff2:	e044      	b.n	800307e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a24      	ldr	r2, [pc, #144]	; (800308c <HAL_TIM_Base_MspInit+0xd4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d10c      	bne.n	8003018 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ffe:	4b22      	ldr	r3, [pc, #136]	; (8003088 <HAL_TIM_Base_MspInit+0xd0>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	4a21      	ldr	r2, [pc, #132]	; (8003088 <HAL_TIM_Base_MspInit+0xd0>)
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	6413      	str	r3, [r2, #64]	; 0x40
 800300a:	4b1f      	ldr	r3, [pc, #124]	; (8003088 <HAL_TIM_Base_MspInit+0xd0>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]
}
 8003016:	e032      	b.n	800307e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1c      	ldr	r2, [pc, #112]	; (8003090 <HAL_TIM_Base_MspInit+0xd8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d114      	bne.n	800304c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003022:	4b19      	ldr	r3, [pc, #100]	; (8003088 <HAL_TIM_Base_MspInit+0xd0>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	4a18      	ldr	r2, [pc, #96]	; (8003088 <HAL_TIM_Base_MspInit+0xd0>)
 8003028:	f043 0310 	orr.w	r3, r3, #16
 800302c:	6413      	str	r3, [r2, #64]	; 0x40
 800302e:	4b16      	ldr	r3, [pc, #88]	; (8003088 <HAL_TIM_Base_MspInit+0xd0>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800303a:	2200      	movs	r2, #0
 800303c:	2100      	movs	r1, #0
 800303e:	2036      	movs	r0, #54	; 0x36
 8003040:	f000 fd4b 	bl	8003ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003044:	2036      	movs	r0, #54	; 0x36
 8003046:	f000 fd64 	bl	8003b12 <HAL_NVIC_EnableIRQ>
}
 800304a:	e018      	b.n	800307e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a10      	ldr	r2, [pc, #64]	; (8003094 <HAL_TIM_Base_MspInit+0xdc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d113      	bne.n	800307e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <HAL_TIM_Base_MspInit+0xd0>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	4a0b      	ldr	r2, [pc, #44]	; (8003088 <HAL_TIM_Base_MspInit+0xd0>)
 800305c:	f043 0320 	orr.w	r3, r3, #32
 8003060:	6413      	str	r3, [r2, #64]	; 0x40
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <HAL_TIM_Base_MspInit+0xd0>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800306e:	2200      	movs	r2, #0
 8003070:	2100      	movs	r1, #0
 8003072:	2037      	movs	r0, #55	; 0x37
 8003074:	f000 fd31 	bl	8003ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003078:	2037      	movs	r0, #55	; 0x37
 800307a:	f000 fd4a 	bl	8003b12 <HAL_NVIC_EnableIRQ>
}
 800307e:	bf00      	nop
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40023800 	.word	0x40023800
 800308c:	40000400 	.word	0x40000400
 8003090:	40001000 	.word	0x40001000
 8003094:	40001400 	.word	0x40001400

08003098 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	f107 0314 	add.w	r3, r7, #20
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a17      	ldr	r2, [pc, #92]	; (8003114 <HAL_TIM_Encoder_MspInit+0x7c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d128      	bne.n	800310c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030ba:	4b17      	ldr	r3, [pc, #92]	; (8003118 <HAL_TIM_Encoder_MspInit+0x80>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	4a16      	ldr	r2, [pc, #88]	; (8003118 <HAL_TIM_Encoder_MspInit+0x80>)
 80030c0:	f043 0304 	orr.w	r3, r3, #4
 80030c4:	6413      	str	r3, [r2, #64]	; 0x40
 80030c6:	4b14      	ldr	r3, [pc, #80]	; (8003118 <HAL_TIM_Encoder_MspInit+0x80>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <HAL_TIM_Encoder_MspInit+0x80>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	4a10      	ldr	r2, [pc, #64]	; (8003118 <HAL_TIM_Encoder_MspInit+0x80>)
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	6313      	str	r3, [r2, #48]	; 0x30
 80030de:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <HAL_TIM_Encoder_MspInit+0x80>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_TIM_DT_Pin|ENC_TIM_CLK_Pin;
 80030ea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80030ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f0:	2302      	movs	r3, #2
 80030f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f8:	2300      	movs	r3, #0
 80030fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030fc:	2302      	movs	r3, #2
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003100:	f107 0314 	add.w	r3, r7, #20
 8003104:	4619      	mov	r1, r3
 8003106:	4805      	ldr	r0, [pc, #20]	; (800311c <HAL_TIM_Encoder_MspInit+0x84>)
 8003108:	f001 f8f4 	bl	80042f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800310c:	bf00      	nop
 800310e:	3728      	adds	r7, #40	; 0x28
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40000800 	.word	0x40000800
 8003118:	40023800 	.word	0x40023800
 800311c:	40020c00 	.word	0x40020c00

08003120 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08a      	sub	sp, #40	; 0x28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003128:	f107 0314 	add.w	r3, r7, #20
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1f      	ldr	r2, [pc, #124]	; (80031bc <HAL_TIM_MspPostInit+0x9c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d138      	bne.n	80031b4 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003142:	4b1f      	ldr	r3, [pc, #124]	; (80031c0 <HAL_TIM_MspPostInit+0xa0>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4a1e      	ldr	r2, [pc, #120]	; (80031c0 <HAL_TIM_MspPostInit+0xa0>)
 8003148:	f043 0302 	orr.w	r3, r3, #2
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <HAL_TIM_MspPostInit+0xa0>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800315a:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <HAL_TIM_MspPostInit+0xa0>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	4a18      	ldr	r2, [pc, #96]	; (80031c0 <HAL_TIM_MspPostInit+0xa0>)
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	6313      	str	r3, [r2, #48]	; 0x30
 8003166:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <HAL_TIM_MspPostInit+0xa0>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TM3_PWM_CH4_Pin|LED_RGB_CH_R_Pin;
 8003172:	2312      	movs	r3, #18
 8003174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003176:	2302      	movs	r3, #2
 8003178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317e:	2300      	movs	r3, #0
 8003180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003182:	2302      	movs	r3, #2
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003186:	f107 0314 	add.w	r3, r7, #20
 800318a:	4619      	mov	r1, r3
 800318c:	480d      	ldr	r0, [pc, #52]	; (80031c4 <HAL_TIM_MspPostInit+0xa4>)
 800318e:	f001 f8b1 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_RGB_CH_G_Pin|LED_RGB_CH_B_Pin;
 8003192:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003198:	2302      	movs	r3, #2
 800319a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a0:	2300      	movs	r3, #0
 80031a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031a4:	2302      	movs	r3, #2
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031a8:	f107 0314 	add.w	r3, r7, #20
 80031ac:	4619      	mov	r1, r3
 80031ae:	4806      	ldr	r0, [pc, #24]	; (80031c8 <HAL_TIM_MspPostInit+0xa8>)
 80031b0:	f001 f8a0 	bl	80042f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80031b4:	bf00      	nop
 80031b6:	3728      	adds	r7, #40	; 0x28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40020400 	.word	0x40020400
 80031c8:	40020800 	.word	0x40020800

080031cc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80031d0:	4b14      	ldr	r3, [pc, #80]	; (8003224 <MX_USART3_UART_Init+0x58>)
 80031d2:	4a15      	ldr	r2, [pc, #84]	; (8003228 <MX_USART3_UART_Init+0x5c>)
 80031d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80031d6:	4b13      	ldr	r3, [pc, #76]	; (8003224 <MX_USART3_UART_Init+0x58>)
 80031d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <MX_USART3_UART_Init+0x58>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <MX_USART3_UART_Init+0x58>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031ea:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <MX_USART3_UART_Init+0x58>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <MX_USART3_UART_Init+0x58>)
 80031f2:	220c      	movs	r2, #12
 80031f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031f6:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <MX_USART3_UART_Init+0x58>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031fc:	4b09      	ldr	r3, [pc, #36]	; (8003224 <MX_USART3_UART_Init+0x58>)
 80031fe:	2200      	movs	r2, #0
 8003200:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003202:	4b08      	ldr	r3, [pc, #32]	; (8003224 <MX_USART3_UART_Init+0x58>)
 8003204:	2200      	movs	r2, #0
 8003206:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <MX_USART3_UART_Init+0x58>)
 800320a:	2200      	movs	r2, #0
 800320c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800320e:	4805      	ldr	r0, [pc, #20]	; (8003224 <MX_USART3_UART_Init+0x58>)
 8003210:	f004 fa9c 	bl	800774c <HAL_UART_Init>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800321a:	f7ff fb9f 	bl	800295c <Error_Handler>
  }

}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000530 	.word	0x20000530
 8003228:	40004800 	.word	0x40004800

0800322c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08a      	sub	sp, #40	; 0x28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 0314 	add.w	r3, r7, #20
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1b      	ldr	r2, [pc, #108]	; (80032b8 <HAL_UART_MspInit+0x8c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d130      	bne.n	80032b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800324e:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <HAL_UART_MspInit+0x90>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	4a1a      	ldr	r2, [pc, #104]	; (80032bc <HAL_UART_MspInit+0x90>)
 8003254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003258:	6413      	str	r3, [r2, #64]	; 0x40
 800325a:	4b18      	ldr	r3, [pc, #96]	; (80032bc <HAL_UART_MspInit+0x90>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003266:	4b15      	ldr	r3, [pc, #84]	; (80032bc <HAL_UART_MspInit+0x90>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a14      	ldr	r2, [pc, #80]	; (80032bc <HAL_UART_MspInit+0x90>)
 800326c:	f043 0308 	orr.w	r3, r3, #8
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b12      	ldr	r3, [pc, #72]	; (80032bc <HAL_UART_MspInit+0x90>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800327e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003284:	2302      	movs	r3, #2
 8003286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003288:	2300      	movs	r3, #0
 800328a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800328c:	2303      	movs	r3, #3
 800328e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003290:	2307      	movs	r3, #7
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	4619      	mov	r1, r3
 800329a:	4809      	ldr	r0, [pc, #36]	; (80032c0 <HAL_UART_MspInit+0x94>)
 800329c:	f001 f82a 	bl	80042f4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80032a0:	2200      	movs	r2, #0
 80032a2:	2100      	movs	r1, #0
 80032a4:	2027      	movs	r0, #39	; 0x27
 80032a6:	f000 fc18 	bl	8003ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80032aa:	2027      	movs	r0, #39	; 0x27
 80032ac:	f000 fc31 	bl	8003b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80032b0:	bf00      	nop
 80032b2:	3728      	adds	r7, #40	; 0x28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40004800 	.word	0x40004800
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40020c00 	.word	0x40020c00

080032c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032ca:	e003      	b.n	80032d4 <LoopCopyDataInit>

080032cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032d2:	3104      	adds	r1, #4

080032d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032d4:	480b      	ldr	r0, [pc, #44]	; (8003304 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032d6:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032dc:	d3f6      	bcc.n	80032cc <CopyDataInit>
  ldr  r2, =_sbss
 80032de:	4a0b      	ldr	r2, [pc, #44]	; (800330c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032e0:	e002      	b.n	80032e8 <LoopFillZerobss>

080032e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032e4:	f842 3b04 	str.w	r3, [r2], #4

080032e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032e8:	4b09      	ldr	r3, [pc, #36]	; (8003310 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032ec:	d3f9      	bcc.n	80032e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032ee:	f7ff fc9f 	bl	8002c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032f2:	f005 fa03 	bl	80086fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032f6:	f7ff f84b 	bl	8002390 <main>
  bx  lr    
 80032fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032fc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003300:	0800c4d0 	.word	0x0800c4d0
  ldr  r0, =_sdata
 8003304:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003308:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 800330c:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8003310:	200005b8 	.word	0x200005b8

08003314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003314:	e7fe      	b.n	8003314 <ADC_IRQHandler>

08003316 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800331a:	2003      	movs	r0, #3
 800331c:	f000 fbd2 	bl	8003ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003320:	2000      	movs	r0, #0
 8003322:	f000 f805 	bl	8003330 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003326:	f7ff fba3 	bl	8002a70 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003338:	4b12      	ldr	r3, [pc, #72]	; (8003384 <HAL_InitTick+0x54>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_InitTick+0x58>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	4619      	mov	r1, r3
 8003342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003346:	fbb3 f3f1 	udiv	r3, r3, r1
 800334a:	fbb2 f3f3 	udiv	r3, r2, r3
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fbed 	bl	8003b2e <HAL_SYSTICK_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e00e      	b.n	800337c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b0f      	cmp	r3, #15
 8003362:	d80a      	bhi.n	800337a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003364:	2200      	movs	r2, #0
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	f04f 30ff 	mov.w	r0, #4294967295
 800336c:	f000 fbb5 	bl	8003ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003370:	4a06      	ldr	r2, [pc, #24]	; (800338c <HAL_InitTick+0x5c>)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	e000      	b.n	800337c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20000010 	.word	0x20000010
 8003388:	20000018 	.word	0x20000018
 800338c:	20000014 	.word	0x20000014

08003390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_IncTick+0x20>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_IncTick+0x24>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4413      	add	r3, r2
 80033a0:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <HAL_IncTick+0x24>)
 80033a2:	6013      	str	r3, [r2, #0]
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20000018 	.word	0x20000018
 80033b4:	200005b0 	.word	0x200005b0

080033b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return uwTick;
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <HAL_GetTick+0x14>)
 80033be:	681b      	ldr	r3, [r3, #0]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	200005b0 	.word	0x200005b0

080033d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033d8:	f7ff ffee 	bl	80033b8 <HAL_GetTick>
 80033dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d005      	beq.n	80033f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <HAL_Delay+0x40>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4413      	add	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033f6:	bf00      	nop
 80033f8:	f7ff ffde 	bl	80033b8 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	429a      	cmp	r2, r3
 8003406:	d8f7      	bhi.n	80033f8 <HAL_Delay+0x28>
  {
  }
}
 8003408:	bf00      	nop
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20000018 	.word	0x20000018

08003414 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e031      	b.n	800348e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d109      	bne.n	8003446 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd fe28 	bl	8001088 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2b00      	cmp	r3, #0
 8003450:	d116      	bne.n	8003480 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <HAL_ADC_Init+0x84>)
 8003458:	4013      	ands	r3, r2
 800345a:	f043 0202 	orr.w	r2, r3, #2
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f964 	bl	8003730 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f023 0303 	bic.w	r3, r3, #3
 8003476:	f043 0201 	orr.w	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	641a      	str	r2, [r3, #64]	; 0x40
 800347e:	e001      	b.n	8003484 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800348c:	7bfb      	ldrb	r3, [r7, #15]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	ffffeefd 	.word	0xffffeefd

0800349c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x1c>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e12a      	b.n	800370e <HAL_ADC_ConfigChannel+0x272>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b09      	cmp	r3, #9
 80034c6:	d93a      	bls.n	800353e <HAL_ADC_ConfigChannel+0xa2>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034d0:	d035      	beq.n	800353e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68d9      	ldr	r1, [r3, #12]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	4613      	mov	r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	3b1e      	subs	r3, #30
 80034e8:	2207      	movs	r2, #7
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43da      	mvns	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	400a      	ands	r2, r1
 80034f6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a87      	ldr	r2, [pc, #540]	; (800371c <HAL_ADC_ConfigChannel+0x280>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d10a      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68d9      	ldr	r1, [r3, #12]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	061a      	lsls	r2, r3, #24
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003516:	e035      	b.n	8003584 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68d9      	ldr	r1, [r3, #12]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	4618      	mov	r0, r3
 800352a:	4603      	mov	r3, r0
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4403      	add	r3, r0
 8003530:	3b1e      	subs	r3, #30
 8003532:	409a      	lsls	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800353c:	e022      	b.n	8003584 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6919      	ldr	r1, [r3, #16]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	b29b      	uxth	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	4613      	mov	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	2207      	movs	r2, #7
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43da      	mvns	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	400a      	ands	r2, r1
 8003560:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6919      	ldr	r1, [r3, #16]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	b29b      	uxth	r3, r3
 8003572:	4618      	mov	r0, r3
 8003574:	4603      	mov	r3, r0
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4403      	add	r3, r0
 800357a:	409a      	lsls	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b06      	cmp	r3, #6
 800358a:	d824      	bhi.n	80035d6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	3b05      	subs	r3, #5
 800359e:	221f      	movs	r2, #31
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43da      	mvns	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	400a      	ands	r2, r1
 80035ac:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	4618      	mov	r0, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	3b05      	subs	r3, #5
 80035c8:	fa00 f203 	lsl.w	r2, r0, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	635a      	str	r2, [r3, #52]	; 0x34
 80035d4:	e04c      	b.n	8003670 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	d824      	bhi.n	8003628 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	3b23      	subs	r3, #35	; 0x23
 80035f0:	221f      	movs	r2, #31
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43da      	mvns	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	400a      	ands	r2, r1
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	b29b      	uxth	r3, r3
 800360c:	4618      	mov	r0, r3
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	3b23      	subs	r3, #35	; 0x23
 800361a:	fa00 f203 	lsl.w	r2, r0, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	631a      	str	r2, [r3, #48]	; 0x30
 8003626:	e023      	b.n	8003670 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	3b41      	subs	r3, #65	; 0x41
 800363a:	221f      	movs	r2, #31
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43da      	mvns	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	400a      	ands	r2, r1
 8003648:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	4618      	mov	r0, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	3b41      	subs	r3, #65	; 0x41
 8003664:	fa00 f203 	lsl.w	r2, r0, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a2a      	ldr	r2, [pc, #168]	; (8003720 <HAL_ADC_ConfigChannel+0x284>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d10a      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x1f4>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003682:	d105      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003684:	4b27      	ldr	r3, [pc, #156]	; (8003724 <HAL_ADC_ConfigChannel+0x288>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4a26      	ldr	r2, [pc, #152]	; (8003724 <HAL_ADC_ConfigChannel+0x288>)
 800368a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800368e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a22      	ldr	r2, [pc, #136]	; (8003720 <HAL_ADC_ConfigChannel+0x284>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d109      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x212>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b12      	cmp	r3, #18
 80036a0:	d105      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80036a2:	4b20      	ldr	r3, [pc, #128]	; (8003724 <HAL_ADC_ConfigChannel+0x288>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4a1f      	ldr	r2, [pc, #124]	; (8003724 <HAL_ADC_ConfigChannel+0x288>)
 80036a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036ac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <HAL_ADC_ConfigChannel+0x284>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d125      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x268>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a17      	ldr	r2, [pc, #92]	; (800371c <HAL_ADC_ConfigChannel+0x280>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d003      	beq.n	80036ca <HAL_ADC_ConfigChannel+0x22e>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b11      	cmp	r3, #17
 80036c8:	d11c      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80036ca:	4b16      	ldr	r3, [pc, #88]	; (8003724 <HAL_ADC_ConfigChannel+0x288>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4a15      	ldr	r2, [pc, #84]	; (8003724 <HAL_ADC_ConfigChannel+0x288>)
 80036d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036d4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a10      	ldr	r2, [pc, #64]	; (800371c <HAL_ADC_ConfigChannel+0x280>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d111      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <HAL_ADC_ConfigChannel+0x28c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a11      	ldr	r2, [pc, #68]	; (800372c <HAL_ADC_ConfigChannel+0x290>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	0c9a      	lsrs	r2, r3, #18
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80036f6:	e002      	b.n	80036fe <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1f9      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	10000012 	.word	0x10000012
 8003720:	40012000 	.word	0x40012000
 8003724:	40012300 	.word	0x40012300
 8003728:	20000010 	.word	0x20000010
 800372c:	431bde83 	.word	0x431bde83

08003730 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003738:	4b78      	ldr	r3, [pc, #480]	; (800391c <ADC_Init+0x1ec>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	4a77      	ldr	r2, [pc, #476]	; (800391c <ADC_Init+0x1ec>)
 800373e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003742:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003744:	4b75      	ldr	r3, [pc, #468]	; (800391c <ADC_Init+0x1ec>)
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4973      	ldr	r1, [pc, #460]	; (800391c <ADC_Init+0x1ec>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003760:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	021a      	lsls	r2, r3, #8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003784:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6859      	ldr	r1, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6899      	ldr	r1, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	4a58      	ldr	r2, [pc, #352]	; (8003920 <ADC_Init+0x1f0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d022      	beq.n	800380a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6899      	ldr	r1, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6899      	ldr	r1, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	e00f      	b.n	800382a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003818:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003828:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0202 	bic.w	r2, r2, #2
 8003838:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6899      	ldr	r1, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	005a      	lsls	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01b      	beq.n	8003890 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003866:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003876:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6859      	ldr	r1, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	3b01      	subs	r3, #1
 8003884:	035a      	lsls	r2, r3, #13
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]
 800388e:	e007      	b.n	80038a0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800389e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	051a      	lsls	r2, r3, #20
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6899      	ldr	r1, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038e2:	025a      	lsls	r2, r3, #9
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6899      	ldr	r1, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	029a      	lsls	r2, r3, #10
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	609a      	str	r2, [r3, #8]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	40012300 	.word	0x40012300
 8003920:	0f000001 	.word	0x0f000001

08003924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <__NVIC_SetPriorityGrouping+0x40>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003940:	4013      	ands	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <__NVIC_SetPriorityGrouping+0x44>)
 800394e:	4313      	orrs	r3, r2
 8003950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003952:	4a04      	ldr	r2, [pc, #16]	; (8003964 <__NVIC_SetPriorityGrouping+0x40>)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	60d3      	str	r3, [r2, #12]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000ed00 	.word	0xe000ed00
 8003968:	05fa0000 	.word	0x05fa0000

0800396c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003970:	4b04      	ldr	r3, [pc, #16]	; (8003984 <__NVIC_GetPriorityGrouping+0x18>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	0a1b      	lsrs	r3, r3, #8
 8003976:	f003 0307 	and.w	r3, r3, #7
}
 800397a:	4618      	mov	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003996:	2b00      	cmp	r3, #0
 8003998:	db0b      	blt.n	80039b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	f003 021f 	and.w	r2, r3, #31
 80039a0:	4907      	ldr	r1, [pc, #28]	; (80039c0 <__NVIC_EnableIRQ+0x38>)
 80039a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	2001      	movs	r0, #1
 80039aa:	fa00 f202 	lsl.w	r2, r0, r2
 80039ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	e000e100 	.word	0xe000e100

080039c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	6039      	str	r1, [r7, #0]
 80039ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	db0a      	blt.n	80039ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	490c      	ldr	r1, [pc, #48]	; (8003a10 <__NVIC_SetPriority+0x4c>)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	0112      	lsls	r2, r2, #4
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	440b      	add	r3, r1
 80039e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039ec:	e00a      	b.n	8003a04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4908      	ldr	r1, [pc, #32]	; (8003a14 <__NVIC_SetPriority+0x50>)
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	3b04      	subs	r3, #4
 80039fc:	0112      	lsls	r2, r2, #4
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	440b      	add	r3, r1
 8003a02:	761a      	strb	r2, [r3, #24]
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000e100 	.word	0xe000e100
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	; 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f1c3 0307 	rsb	r3, r3, #7
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	bf28      	it	cs
 8003a36:	2304      	movcs	r3, #4
 8003a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	2b06      	cmp	r3, #6
 8003a40:	d902      	bls.n	8003a48 <NVIC_EncodePriority+0x30>
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	3b03      	subs	r3, #3
 8003a46:	e000      	b.n	8003a4a <NVIC_EncodePriority+0x32>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43da      	mvns	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a60:	f04f 31ff 	mov.w	r1, #4294967295
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6a:	43d9      	mvns	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a70:	4313      	orrs	r3, r2
         );
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3724      	adds	r7, #36	; 0x24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a90:	d301      	bcc.n	8003a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a92:	2301      	movs	r3, #1
 8003a94:	e00f      	b.n	8003ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a96:	4a0a      	ldr	r2, [pc, #40]	; (8003ac0 <SysTick_Config+0x40>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a9e:	210f      	movs	r1, #15
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	f7ff ff8e 	bl	80039c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <SysTick_Config+0x40>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aae:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <SysTick_Config+0x40>)
 8003ab0:	2207      	movs	r2, #7
 8003ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	e000e010 	.word	0xe000e010

08003ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff ff29 	bl	8003924 <__NVIC_SetPriorityGrouping>
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b086      	sub	sp, #24
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
 8003ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003aec:	f7ff ff3e 	bl	800396c <__NVIC_GetPriorityGrouping>
 8003af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68b9      	ldr	r1, [r7, #8]
 8003af6:	6978      	ldr	r0, [r7, #20]
 8003af8:	f7ff ff8e 	bl	8003a18 <NVIC_EncodePriority>
 8003afc:	4602      	mov	r2, r0
 8003afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b02:	4611      	mov	r1, r2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff ff5d 	bl	80039c4 <__NVIC_SetPriority>
}
 8003b0a:	bf00      	nop
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	4603      	mov	r3, r0
 8003b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff ff31 	bl	8003988 <__NVIC_EnableIRQ>
}
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff ffa2 	bl	8003a80 <SysTick_Config>
 8003b3c:	4603      	mov	r3, r0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e014      	b.n	8003b82 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	791b      	ldrb	r3, [r3, #4]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d105      	bne.n	8003b6e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7fe f861 	bl	8001c30 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2202      	movs	r2, #2
 8003b72:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba0:	d118      	bne.n	8003bd4 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f043 0201 	orr.w	r2, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bbc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bcc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f825 	bl	8003c1e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003be2:	d118      	bne.n	8003c16 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2204      	movs	r2, #4
 8003be8:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f043 0202 	orr.w	r2, r3, #2
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003bfe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003c0e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f85b 	bl	8003ccc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b087      	sub	sp, #28
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	2300      	movs	r3, #0
 8003c44:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	795b      	ldrb	r3, [r3, #5]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_DAC_ConfigChannel+0x20>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e036      	b.n	8003cc0 <HAL_DAC_ConfigChannel+0x8e>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003c66:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4013      	ands	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6819      	ldr	r1, [r3, #0]
 8003ca0:	22c0      	movs	r2, #192	; 0xc0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43da      	mvns	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	400a      	ands	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cec:	f7ff fb64 	bl	80033b8 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e099      	b.n	8003e30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0201 	bic.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d1c:	e00f      	b.n	8003d3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d1e:	f7ff fb4b 	bl	80033b8 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b05      	cmp	r3, #5
 8003d2a:	d908      	bls.n	8003d3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2203      	movs	r2, #3
 8003d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e078      	b.n	8003e30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e8      	bne.n	8003d1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	4b38      	ldr	r3, [pc, #224]	; (8003e38 <HAL_DMA_Init+0x158>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d107      	bne.n	8003da8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	4313      	orrs	r3, r2
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f023 0307 	bic.w	r3, r3, #7
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d117      	bne.n	8003e02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00e      	beq.n	8003e02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fa0b 	bl	8004200 <DMA_CheckFifoParam>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2240      	movs	r2, #64	; 0x40
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e016      	b.n	8003e30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f9c2 	bl	8004194 <DMA_CalcBaseAndBitshift>
 8003e10:	4603      	mov	r3, r0
 8003e12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e18:	223f      	movs	r2, #63	; 0x3f
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	f010803f 	.word	0xf010803f

08003e3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d004      	beq.n	8003e5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2280      	movs	r2, #128	; 0x80
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e00c      	b.n	8003e74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2205      	movs	r2, #5
 8003e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003e8c:	4b92      	ldr	r3, [pc, #584]	; (80040d8 <HAL_DMA_IRQHandler+0x258>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a92      	ldr	r2, [pc, #584]	; (80040dc <HAL_DMA_IRQHandler+0x25c>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	0a9b      	lsrs	r3, r3, #10
 8003e98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eaa:	2208      	movs	r2, #8
 8003eac:	409a      	lsls	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d01a      	beq.n	8003eec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d013      	beq.n	8003eec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0204 	bic.w	r2, r2, #4
 8003ed2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed8:	2208      	movs	r2, #8
 8003eda:	409a      	lsls	r2, r3
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee4:	f043 0201 	orr.w	r2, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d012      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0e:	2201      	movs	r2, #1
 8003f10:	409a      	lsls	r2, r3
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	f043 0202 	orr.w	r2, r3, #2
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f26:	2204      	movs	r2, #4
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d012      	beq.n	8003f58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00b      	beq.n	8003f58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f44:	2204      	movs	r2, #4
 8003f46:	409a      	lsls	r2, r3
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f50:	f043 0204 	orr.w	r2, r3, #4
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5c:	2210      	movs	r2, #16
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d043      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d03c      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7a:	2210      	movs	r2, #16
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d018      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d108      	bne.n	8003fb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d024      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	4798      	blx	r3
 8003fae:	e01f      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d01b      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	4798      	blx	r3
 8003fc0:	e016      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d107      	bne.n	8003fe0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0208 	bic.w	r2, r2, #8
 8003fde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 808e 	beq.w	800411e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8086 	beq.w	800411e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004016:	2220      	movs	r2, #32
 8004018:	409a      	lsls	r2, r3
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b05      	cmp	r3, #5
 8004028:	d136      	bne.n	8004098 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0216 	bic.w	r2, r2, #22
 8004038:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004048:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	d103      	bne.n	800405a <HAL_DMA_IRQHandler+0x1da>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004056:	2b00      	cmp	r3, #0
 8004058:	d007      	beq.n	800406a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0208 	bic.w	r2, r2, #8
 8004068:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406e:	223f      	movs	r2, #63	; 0x3f
 8004070:	409a      	lsls	r2, r3
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408a:	2b00      	cmp	r3, #0
 800408c:	d07d      	beq.n	800418a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
        }
        return;
 8004096:	e078      	b.n	800418a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01c      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d108      	bne.n	80040c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d030      	beq.n	800411e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
 80040c4:	e02b      	b.n	800411e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d027      	beq.n	800411e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	4798      	blx	r3
 80040d6:	e022      	b.n	800411e <HAL_DMA_IRQHandler+0x29e>
 80040d8:	20000010 	.word	0x20000010
 80040dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10f      	bne.n	800410e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0210 	bic.w	r2, r2, #16
 80040fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	2b00      	cmp	r3, #0
 8004124:	d032      	beq.n	800418c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d022      	beq.n	8004178 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2205      	movs	r2, #5
 8004136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0201 	bic.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	3301      	adds	r3, #1
 800414e:	60bb      	str	r3, [r7, #8]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	429a      	cmp	r2, r3
 8004154:	d307      	bcc.n	8004166 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1f2      	bne.n	800414a <HAL_DMA_IRQHandler+0x2ca>
 8004164:	e000      	b.n	8004168 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004166:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	4798      	blx	r3
 8004188:	e000      	b.n	800418c <HAL_DMA_IRQHandler+0x30c>
        return;
 800418a:	bf00      	nop
    }
  }
}
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop

08004194 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	3b10      	subs	r3, #16
 80041a4:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <DMA_CalcBaseAndBitshift+0x60>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041ae:	4a12      	ldr	r2, [pc, #72]	; (80041f8 <DMA_CalcBaseAndBitshift+0x64>)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d908      	bls.n	80041d4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <DMA_CalcBaseAndBitshift+0x68>)
 80041ca:	4013      	ands	r3, r2
 80041cc:	1d1a      	adds	r2, r3, #4
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	659a      	str	r2, [r3, #88]	; 0x58
 80041d2:	e006      	b.n	80041e2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <DMA_CalcBaseAndBitshift+0x68>)
 80041dc:	4013      	ands	r3, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	aaaaaaab 	.word	0xaaaaaaab
 80041f8:	0800c200 	.word	0x0800c200
 80041fc:	fffffc00 	.word	0xfffffc00

08004200 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d11f      	bne.n	800425a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b03      	cmp	r3, #3
 800421e:	d855      	bhi.n	80042cc <DMA_CheckFifoParam+0xcc>
 8004220:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <DMA_CheckFifoParam+0x28>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	08004239 	.word	0x08004239
 800422c:	0800424b 	.word	0x0800424b
 8004230:	08004239 	.word	0x08004239
 8004234:	080042cd 	.word	0x080042cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d045      	beq.n	80042d0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004248:	e042      	b.n	80042d0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004252:	d13f      	bne.n	80042d4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004258:	e03c      	b.n	80042d4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004262:	d121      	bne.n	80042a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b03      	cmp	r3, #3
 8004268:	d836      	bhi.n	80042d8 <DMA_CheckFifoParam+0xd8>
 800426a:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <DMA_CheckFifoParam+0x70>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	08004281 	.word	0x08004281
 8004274:	08004287 	.word	0x08004287
 8004278:	08004281 	.word	0x08004281
 800427c:	08004299 	.word	0x08004299
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
      break;
 8004284:	e02f      	b.n	80042e6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d024      	beq.n	80042dc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004296:	e021      	b.n	80042dc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042a0:	d11e      	bne.n	80042e0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042a6:	e01b      	b.n	80042e0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d902      	bls.n	80042b4 <DMA_CheckFifoParam+0xb4>
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d003      	beq.n	80042ba <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042b2:	e018      	b.n	80042e6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
      break;
 80042b8:	e015      	b.n	80042e6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00e      	beq.n	80042e4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	73fb      	strb	r3, [r7, #15]
      break;
 80042ca:	e00b      	b.n	80042e4 <DMA_CheckFifoParam+0xe4>
      break;
 80042cc:	bf00      	nop
 80042ce:	e00a      	b.n	80042e6 <DMA_CheckFifoParam+0xe6>
      break;
 80042d0:	bf00      	nop
 80042d2:	e008      	b.n	80042e6 <DMA_CheckFifoParam+0xe6>
      break;
 80042d4:	bf00      	nop
 80042d6:	e006      	b.n	80042e6 <DMA_CheckFifoParam+0xe6>
      break;
 80042d8:	bf00      	nop
 80042da:	e004      	b.n	80042e6 <DMA_CheckFifoParam+0xe6>
      break;
 80042dc:	bf00      	nop
 80042de:	e002      	b.n	80042e6 <DMA_CheckFifoParam+0xe6>
      break;   
 80042e0:	bf00      	nop
 80042e2:	e000      	b.n	80042e6 <DMA_CheckFifoParam+0xe6>
      break;
 80042e4:	bf00      	nop
    }
  } 
  
  return status; 
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b089      	sub	sp, #36	; 0x24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800430a:	2300      	movs	r3, #0
 800430c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	e175      	b.n	8004600 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004314:	2201      	movs	r2, #1
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	429a      	cmp	r2, r3
 800432e:	f040 8164 	bne.w	80045fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d00b      	beq.n	8004352 <HAL_GPIO_Init+0x5e>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d007      	beq.n	8004352 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004346:	2b11      	cmp	r3, #17
 8004348:	d003      	beq.n	8004352 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b12      	cmp	r3, #18
 8004350:	d130      	bne.n	80043b4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	2203      	movs	r2, #3
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43db      	mvns	r3, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4013      	ands	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	4313      	orrs	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004388:	2201      	movs	r2, #1
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	43db      	mvns	r3, r3
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	4013      	ands	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	091b      	lsrs	r3, r3, #4
 800439e:	f003 0201 	and.w	r2, r3, #1
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	2203      	movs	r2, #3
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	43db      	mvns	r3, r3
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4013      	ands	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	4313      	orrs	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d003      	beq.n	80043f4 <HAL_GPIO_Init+0x100>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b12      	cmp	r3, #18
 80043f2:	d123      	bne.n	800443c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	08da      	lsrs	r2, r3, #3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3208      	adds	r2, #8
 80043fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	220f      	movs	r2, #15
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4013      	ands	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4313      	orrs	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	08da      	lsrs	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3208      	adds	r2, #8
 8004436:	69b9      	ldr	r1, [r7, #24]
 8004438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	2203      	movs	r2, #3
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	43db      	mvns	r3, r3
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4013      	ands	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 0203 	and.w	r2, r3, #3
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4313      	orrs	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80be 	beq.w	80045fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800447e:	4b65      	ldr	r3, [pc, #404]	; (8004614 <HAL_GPIO_Init+0x320>)
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004482:	4a64      	ldr	r2, [pc, #400]	; (8004614 <HAL_GPIO_Init+0x320>)
 8004484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004488:	6453      	str	r3, [r2, #68]	; 0x44
 800448a:	4b62      	ldr	r3, [pc, #392]	; (8004614 <HAL_GPIO_Init+0x320>)
 800448c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004496:	4a60      	ldr	r2, [pc, #384]	; (8004618 <HAL_GPIO_Init+0x324>)
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	089b      	lsrs	r3, r3, #2
 800449c:	3302      	adds	r3, #2
 800449e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	220f      	movs	r2, #15
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43db      	mvns	r3, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4013      	ands	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a57      	ldr	r2, [pc, #348]	; (800461c <HAL_GPIO_Init+0x328>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d037      	beq.n	8004532 <HAL_GPIO_Init+0x23e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a56      	ldr	r2, [pc, #344]	; (8004620 <HAL_GPIO_Init+0x32c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d031      	beq.n	800452e <HAL_GPIO_Init+0x23a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a55      	ldr	r2, [pc, #340]	; (8004624 <HAL_GPIO_Init+0x330>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d02b      	beq.n	800452a <HAL_GPIO_Init+0x236>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a54      	ldr	r2, [pc, #336]	; (8004628 <HAL_GPIO_Init+0x334>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d025      	beq.n	8004526 <HAL_GPIO_Init+0x232>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a53      	ldr	r2, [pc, #332]	; (800462c <HAL_GPIO_Init+0x338>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01f      	beq.n	8004522 <HAL_GPIO_Init+0x22e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a52      	ldr	r2, [pc, #328]	; (8004630 <HAL_GPIO_Init+0x33c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d019      	beq.n	800451e <HAL_GPIO_Init+0x22a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a51      	ldr	r2, [pc, #324]	; (8004634 <HAL_GPIO_Init+0x340>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <HAL_GPIO_Init+0x226>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a50      	ldr	r2, [pc, #320]	; (8004638 <HAL_GPIO_Init+0x344>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00d      	beq.n	8004516 <HAL_GPIO_Init+0x222>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a4f      	ldr	r2, [pc, #316]	; (800463c <HAL_GPIO_Init+0x348>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d007      	beq.n	8004512 <HAL_GPIO_Init+0x21e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a4e      	ldr	r2, [pc, #312]	; (8004640 <HAL_GPIO_Init+0x34c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d101      	bne.n	800450e <HAL_GPIO_Init+0x21a>
 800450a:	2309      	movs	r3, #9
 800450c:	e012      	b.n	8004534 <HAL_GPIO_Init+0x240>
 800450e:	230a      	movs	r3, #10
 8004510:	e010      	b.n	8004534 <HAL_GPIO_Init+0x240>
 8004512:	2308      	movs	r3, #8
 8004514:	e00e      	b.n	8004534 <HAL_GPIO_Init+0x240>
 8004516:	2307      	movs	r3, #7
 8004518:	e00c      	b.n	8004534 <HAL_GPIO_Init+0x240>
 800451a:	2306      	movs	r3, #6
 800451c:	e00a      	b.n	8004534 <HAL_GPIO_Init+0x240>
 800451e:	2305      	movs	r3, #5
 8004520:	e008      	b.n	8004534 <HAL_GPIO_Init+0x240>
 8004522:	2304      	movs	r3, #4
 8004524:	e006      	b.n	8004534 <HAL_GPIO_Init+0x240>
 8004526:	2303      	movs	r3, #3
 8004528:	e004      	b.n	8004534 <HAL_GPIO_Init+0x240>
 800452a:	2302      	movs	r3, #2
 800452c:	e002      	b.n	8004534 <HAL_GPIO_Init+0x240>
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <HAL_GPIO_Init+0x240>
 8004532:	2300      	movs	r3, #0
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	f002 0203 	and.w	r2, r2, #3
 800453a:	0092      	lsls	r2, r2, #2
 800453c:	4093      	lsls	r3, r2
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4313      	orrs	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004544:	4934      	ldr	r1, [pc, #208]	; (8004618 <HAL_GPIO_Init+0x324>)
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	089b      	lsrs	r3, r3, #2
 800454a:	3302      	adds	r3, #2
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004552:	4b3c      	ldr	r3, [pc, #240]	; (8004644 <HAL_GPIO_Init+0x350>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	43db      	mvns	r3, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4013      	ands	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004576:	4a33      	ldr	r2, [pc, #204]	; (8004644 <HAL_GPIO_Init+0x350>)
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800457c:	4b31      	ldr	r3, [pc, #196]	; (8004644 <HAL_GPIO_Init+0x350>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	43db      	mvns	r3, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4013      	ands	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045a0:	4a28      	ldr	r2, [pc, #160]	; (8004644 <HAL_GPIO_Init+0x350>)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045a6:	4b27      	ldr	r3, [pc, #156]	; (8004644 <HAL_GPIO_Init+0x350>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	43db      	mvns	r3, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4013      	ands	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045ca:	4a1e      	ldr	r2, [pc, #120]	; (8004644 <HAL_GPIO_Init+0x350>)
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045d0:	4b1c      	ldr	r3, [pc, #112]	; (8004644 <HAL_GPIO_Init+0x350>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	43db      	mvns	r3, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4013      	ands	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045f4:	4a13      	ldr	r2, [pc, #76]	; (8004644 <HAL_GPIO_Init+0x350>)
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	3301      	adds	r3, #1
 80045fe:	61fb      	str	r3, [r7, #28]
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	2b0f      	cmp	r3, #15
 8004604:	f67f ae86 	bls.w	8004314 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004608:	bf00      	nop
 800460a:	3724      	adds	r7, #36	; 0x24
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	40023800 	.word	0x40023800
 8004618:	40013800 	.word	0x40013800
 800461c:	40020000 	.word	0x40020000
 8004620:	40020400 	.word	0x40020400
 8004624:	40020800 	.word	0x40020800
 8004628:	40020c00 	.word	0x40020c00
 800462c:	40021000 	.word	0x40021000
 8004630:	40021400 	.word	0x40021400
 8004634:	40021800 	.word	0x40021800
 8004638:	40021c00 	.word	0x40021c00
 800463c:	40022000 	.word	0x40022000
 8004640:	40022400 	.word	0x40022400
 8004644:	40013c00 	.word	0x40013c00

08004648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	807b      	strh	r3, [r7, #2]
 8004654:	4613      	mov	r3, r2
 8004656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004658:	787b      	ldrb	r3, [r7, #1]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800465e:	887a      	ldrh	r2, [r7, #2]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004664:	e003      	b.n	800466e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004666:	887b      	ldrh	r3, [r7, #2]
 8004668:	041a      	lsls	r2, r3, #16
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	619a      	str	r2, [r3, #24]
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
	...

0800467c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	88fb      	ldrh	r3, [r7, #6]
 800468c:	4013      	ands	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d006      	beq.n	80046a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004692:	4a05      	ldr	r2, [pc, #20]	; (80046a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004694:	88fb      	ldrh	r3, [r7, #6]
 8004696:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f806 	bl	80046ac <HAL_GPIO_EXTI_Callback>
  }
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40013c00 	.word	0x40013c00

080046ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
	...

080046c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e07f      	b.n	80047d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fd fdd2 	bl	8002294 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2224      	movs	r2, #36	; 0x24
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0201 	bic.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004714:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004724:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d107      	bne.n	800473e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	e006      	b.n	800474c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800474a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d104      	bne.n	800475e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800475c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6859      	ldr	r1, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4b1d      	ldr	r3, [pc, #116]	; (80047e0 <HAL_I2C_Init+0x11c>)
 800476a:	430b      	orrs	r3, r1
 800476c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800477c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	ea42 0103 	orr.w	r1, r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	021a      	lsls	r2, r3, #8
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69d9      	ldr	r1, [r3, #28]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1a      	ldr	r2, [r3, #32]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	02008000 	.word	0x02008000

080047e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	d138      	bne.n	800486c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004804:	2302      	movs	r3, #2
 8004806:	e032      	b.n	800486e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2224      	movs	r2, #36	; 0x24
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004836:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6819      	ldr	r1, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	e000      	b.n	800486e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800486c:	2302      	movs	r3, #2
  }
}
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b20      	cmp	r3, #32
 800488e:	d139      	bne.n	8004904 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800489a:	2302      	movs	r3, #2
 800489c:	e033      	b.n	8004906 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2224      	movs	r2, #36	; 0x24
 80048aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0201 	bic.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	e000      	b.n	8004906 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004904:	2302      	movs	r3, #2
  }
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
	...

08004914 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a04      	ldr	r2, [pc, #16]	; (8004930 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800491e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004922:	6013      	str	r3, [r2, #0]
}
 8004924:	bf00      	nop
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40007000 	.word	0x40007000

08004934 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800493e:	4b23      	ldr	r3, [pc, #140]	; (80049cc <HAL_PWREx_EnableOverDrive+0x98>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	4a22      	ldr	r2, [pc, #136]	; (80049cc <HAL_PWREx_EnableOverDrive+0x98>)
 8004944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004948:	6413      	str	r3, [r2, #64]	; 0x40
 800494a:	4b20      	ldr	r3, [pc, #128]	; (80049cc <HAL_PWREx_EnableOverDrive+0x98>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004956:	4b1e      	ldr	r3, [pc, #120]	; (80049d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1d      	ldr	r2, [pc, #116]	; (80049d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800495c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004960:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004962:	f7fe fd29 	bl	80033b8 <HAL_GetTick>
 8004966:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004968:	e009      	b.n	800497e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800496a:	f7fe fd25 	bl	80033b8 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004978:	d901      	bls.n	800497e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e022      	b.n	80049c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800497e:	4b14      	ldr	r3, [pc, #80]	; (80049d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498a:	d1ee      	bne.n	800496a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800498c:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a0f      	ldr	r2, [pc, #60]	; (80049d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004996:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004998:	f7fe fd0e 	bl	80033b8 <HAL_GetTick>
 800499c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800499e:	e009      	b.n	80049b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049a0:	f7fe fd0a 	bl	80033b8 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ae:	d901      	bls.n	80049b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e007      	b.n	80049c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049b4:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049c0:	d1ee      	bne.n	80049a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40007000 	.word	0x40007000

080049d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80049dc:	2300      	movs	r3, #0
 80049de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e291      	b.n	8004f0e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 8087 	beq.w	8004b06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049f8:	4b96      	ldr	r3, [pc, #600]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 030c 	and.w	r3, r3, #12
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d00c      	beq.n	8004a1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a04:	4b93      	ldr	r3, [pc, #588]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 030c 	and.w	r3, r3, #12
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d112      	bne.n	8004a36 <HAL_RCC_OscConfig+0x62>
 8004a10:	4b90      	ldr	r3, [pc, #576]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a1c:	d10b      	bne.n	8004a36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a1e:	4b8d      	ldr	r3, [pc, #564]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d06c      	beq.n	8004b04 <HAL_RCC_OscConfig+0x130>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d168      	bne.n	8004b04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e26b      	b.n	8004f0e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3e:	d106      	bne.n	8004a4e <HAL_RCC_OscConfig+0x7a>
 8004a40:	4b84      	ldr	r3, [pc, #528]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a83      	ldr	r2, [pc, #524]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	e02e      	b.n	8004aac <HAL_RCC_OscConfig+0xd8>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10c      	bne.n	8004a70 <HAL_RCC_OscConfig+0x9c>
 8004a56:	4b7f      	ldr	r3, [pc, #508]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a7e      	ldr	r2, [pc, #504]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	4b7c      	ldr	r3, [pc, #496]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a7b      	ldr	r2, [pc, #492]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	e01d      	b.n	8004aac <HAL_RCC_OscConfig+0xd8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a78:	d10c      	bne.n	8004a94 <HAL_RCC_OscConfig+0xc0>
 8004a7a:	4b76      	ldr	r3, [pc, #472]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a75      	ldr	r2, [pc, #468]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	4b73      	ldr	r3, [pc, #460]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a72      	ldr	r2, [pc, #456]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	e00b      	b.n	8004aac <HAL_RCC_OscConfig+0xd8>
 8004a94:	4b6f      	ldr	r3, [pc, #444]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a6e      	ldr	r2, [pc, #440]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	4b6c      	ldr	r3, [pc, #432]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a6b      	ldr	r2, [pc, #428]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d013      	beq.n	8004adc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fe fc80 	bl	80033b8 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004abc:	f7fe fc7c 	bl	80033b8 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	; 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e21f      	b.n	8004f0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ace:	4b61      	ldr	r3, [pc, #388]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0xe8>
 8004ada:	e014      	b.n	8004b06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fe fc6c 	bl	80033b8 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae4:	f7fe fc68 	bl	80033b8 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b64      	cmp	r3, #100	; 0x64
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e20b      	b.n	8004f0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af6:	4b57      	ldr	r3, [pc, #348]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x110>
 8004b02:	e000      	b.n	8004b06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d069      	beq.n	8004be6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b12:	4b50      	ldr	r3, [pc, #320]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 030c 	and.w	r3, r3, #12
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00b      	beq.n	8004b36 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b1e:	4b4d      	ldr	r3, [pc, #308]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d11c      	bne.n	8004b64 <HAL_RCC_OscConfig+0x190>
 8004b2a:	4b4a      	ldr	r3, [pc, #296]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d116      	bne.n	8004b64 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b36:	4b47      	ldr	r3, [pc, #284]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <HAL_RCC_OscConfig+0x17a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d001      	beq.n	8004b4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e1df      	b.n	8004f0e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4e:	4b41      	ldr	r3, [pc, #260]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	493d      	ldr	r1, [pc, #244]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b62:	e040      	b.n	8004be6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d023      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b6c:	4b39      	ldr	r3, [pc, #228]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a38      	ldr	r2, [pc, #224]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fe fc1e 	bl	80033b8 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b80:	f7fe fc1a 	bl	80033b8 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e1bd      	b.n	8004f0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b92:	4b30      	ldr	r3, [pc, #192]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9e:	4b2d      	ldr	r3, [pc, #180]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4929      	ldr	r1, [pc, #164]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	600b      	str	r3, [r1, #0]
 8004bb2:	e018      	b.n	8004be6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bb4:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a26      	ldr	r2, [pc, #152]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc0:	f7fe fbfa 	bl	80033b8 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc8:	f7fe fbf6 	bl	80033b8 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e199      	b.n	8004f0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bda:	4b1e      	ldr	r3, [pc, #120]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d038      	beq.n	8004c64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d019      	beq.n	8004c2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bfa:	4b16      	ldr	r3, [pc, #88]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bfe:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c06:	f7fe fbd7 	bl	80033b8 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c0e:	f7fe fbd3 	bl	80033b8 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e176      	b.n	8004f0e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c20:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0f0      	beq.n	8004c0e <HAL_RCC_OscConfig+0x23a>
 8004c2c:	e01a      	b.n	8004c64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c2e:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c32:	4a08      	ldr	r2, [pc, #32]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3a:	f7fe fbbd 	bl	80033b8 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c40:	e00a      	b.n	8004c58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c42:	f7fe fbb9 	bl	80033b8 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d903      	bls.n	8004c58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e15c      	b.n	8004f0e <HAL_RCC_OscConfig+0x53a>
 8004c54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c58:	4b91      	ldr	r3, [pc, #580]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1ee      	bne.n	8004c42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 80a4 	beq.w	8004dba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c72:	4b8b      	ldr	r3, [pc, #556]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10d      	bne.n	8004c9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c7e:	4b88      	ldr	r3, [pc, #544]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	4a87      	ldr	r2, [pc, #540]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c88:	6413      	str	r3, [r2, #64]	; 0x40
 8004c8a:	4b85      	ldr	r3, [pc, #532]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c92:	60bb      	str	r3, [r7, #8]
 8004c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c96:	2301      	movs	r3, #1
 8004c98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c9a:	4b82      	ldr	r3, [pc, #520]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d118      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004ca6:	4b7f      	ldr	r3, [pc, #508]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a7e      	ldr	r2, [pc, #504]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cb2:	f7fe fb81 	bl	80033b8 <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cb8:	e008      	b.n	8004ccc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cba:	f7fe fb7d 	bl	80033b8 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b64      	cmp	r3, #100	; 0x64
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e120      	b.n	8004f0e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ccc:	4b75      	ldr	r3, [pc, #468]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0f0      	beq.n	8004cba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d106      	bne.n	8004cee <HAL_RCC_OscConfig+0x31a>
 8004ce0:	4b6f      	ldr	r3, [pc, #444]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	4a6e      	ldr	r2, [pc, #440]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	6713      	str	r3, [r2, #112]	; 0x70
 8004cec:	e02d      	b.n	8004d4a <HAL_RCC_OscConfig+0x376>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10c      	bne.n	8004d10 <HAL_RCC_OscConfig+0x33c>
 8004cf6:	4b6a      	ldr	r3, [pc, #424]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfa:	4a69      	ldr	r2, [pc, #420]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004cfc:	f023 0301 	bic.w	r3, r3, #1
 8004d00:	6713      	str	r3, [r2, #112]	; 0x70
 8004d02:	4b67      	ldr	r3, [pc, #412]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d06:	4a66      	ldr	r2, [pc, #408]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004d08:	f023 0304 	bic.w	r3, r3, #4
 8004d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d0e:	e01c      	b.n	8004d4a <HAL_RCC_OscConfig+0x376>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b05      	cmp	r3, #5
 8004d16:	d10c      	bne.n	8004d32 <HAL_RCC_OscConfig+0x35e>
 8004d18:	4b61      	ldr	r3, [pc, #388]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1c:	4a60      	ldr	r2, [pc, #384]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004d1e:	f043 0304 	orr.w	r3, r3, #4
 8004d22:	6713      	str	r3, [r2, #112]	; 0x70
 8004d24:	4b5e      	ldr	r3, [pc, #376]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d28:	4a5d      	ldr	r2, [pc, #372]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d30:	e00b      	b.n	8004d4a <HAL_RCC_OscConfig+0x376>
 8004d32:	4b5b      	ldr	r3, [pc, #364]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d36:	4a5a      	ldr	r2, [pc, #360]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004d38:	f023 0301 	bic.w	r3, r3, #1
 8004d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d3e:	4b58      	ldr	r3, [pc, #352]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d42:	4a57      	ldr	r2, [pc, #348]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004d44:	f023 0304 	bic.w	r3, r3, #4
 8004d48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d015      	beq.n	8004d7e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d52:	f7fe fb31 	bl	80033b8 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d58:	e00a      	b.n	8004d70 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5a:	f7fe fb2d 	bl	80033b8 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e0ce      	b.n	8004f0e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d70:	4b4b      	ldr	r3, [pc, #300]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0ee      	beq.n	8004d5a <HAL_RCC_OscConfig+0x386>
 8004d7c:	e014      	b.n	8004da8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7e:	f7fe fb1b 	bl	80033b8 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d84:	e00a      	b.n	8004d9c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d86:	f7fe fb17 	bl	80033b8 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e0b8      	b.n	8004f0e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d9c:	4b40      	ldr	r3, [pc, #256]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1ee      	bne.n	8004d86 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004da8:	7dfb      	ldrb	r3, [r7, #23]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d105      	bne.n	8004dba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dae:	4b3c      	ldr	r3, [pc, #240]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	4a3b      	ldr	r2, [pc, #236]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 80a4 	beq.w	8004f0c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dc4:	4b36      	ldr	r3, [pc, #216]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 030c 	and.w	r3, r3, #12
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d06b      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d149      	bne.n	8004e6c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd8:	4b31      	ldr	r3, [pc, #196]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a30      	ldr	r2, [pc, #192]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fe fae8 	bl	80033b8 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dec:	f7fe fae4 	bl	80033b8 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e087      	b.n	8004f0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dfe:	4b28      	ldr	r3, [pc, #160]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69da      	ldr	r2, [r3, #28]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	019b      	lsls	r3, r3, #6
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	085b      	lsrs	r3, r3, #1
 8004e22:	3b01      	subs	r3, #1
 8004e24:	041b      	lsls	r3, r3, #16
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	061b      	lsls	r3, r3, #24
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	4a1b      	ldr	r2, [pc, #108]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004e32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e36:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e38:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a18      	ldr	r2, [pc, #96]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fe fab8 	bl	80033b8 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e4c:	f7fe fab4 	bl	80033b8 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e057      	b.n	8004f0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5e:	4b10      	ldr	r3, [pc, #64]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0f0      	beq.n	8004e4c <HAL_RCC_OscConfig+0x478>
 8004e6a:	e04f      	b.n	8004f0c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a0b      	ldr	r2, [pc, #44]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004e72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e78:	f7fe fa9e 	bl	80033b8 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e80:	f7fe fa9a 	bl	80033b8 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e03d      	b.n	8004f0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e92:	4b03      	ldr	r3, [pc, #12]	; (8004ea0 <HAL_RCC_OscConfig+0x4cc>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f0      	bne.n	8004e80 <HAL_RCC_OscConfig+0x4ac>
 8004e9e:	e035      	b.n	8004f0c <HAL_RCC_OscConfig+0x538>
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004ea8:	4b1b      	ldr	r3, [pc, #108]	; (8004f18 <HAL_RCC_OscConfig+0x544>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d028      	beq.n	8004f08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d121      	bne.n	8004f08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d11a      	bne.n	8004f08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ed8:	4013      	ands	r3, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ede:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d111      	bne.n	8004f08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eee:	085b      	lsrs	r3, r3, #1
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d107      	bne.n	8004f08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d001      	beq.n	8004f0c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	40023800 	.word	0x40023800

08004f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e0d0      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f34:	4b6a      	ldr	r3, [pc, #424]	; (80050e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 030f 	and.w	r3, r3, #15
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d910      	bls.n	8004f64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f42:	4b67      	ldr	r3, [pc, #412]	; (80050e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f023 020f 	bic.w	r2, r3, #15
 8004f4a:	4965      	ldr	r1, [pc, #404]	; (80050e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f52:	4b63      	ldr	r3, [pc, #396]	; (80050e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d001      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0b8      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d020      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f7c:	4b59      	ldr	r3, [pc, #356]	; (80050e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	4a58      	ldr	r2, [pc, #352]	; (80050e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f94:	4b53      	ldr	r3, [pc, #332]	; (80050e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	4a52      	ldr	r2, [pc, #328]	; (80050e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa0:	4b50      	ldr	r3, [pc, #320]	; (80050e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	494d      	ldr	r1, [pc, #308]	; (80050e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d040      	beq.n	8005040 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d107      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fc6:	4b47      	ldr	r3, [pc, #284]	; (80050e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d115      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e07f      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d107      	bne.n	8004fee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fde:	4b41      	ldr	r3, [pc, #260]	; (80050e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e073      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fee:	4b3d      	ldr	r3, [pc, #244]	; (80050e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e06b      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ffe:	4b39      	ldr	r3, [pc, #228]	; (80050e4 <HAL_RCC_ClockConfig+0x1c8>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f023 0203 	bic.w	r2, r3, #3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	4936      	ldr	r1, [pc, #216]	; (80050e4 <HAL_RCC_ClockConfig+0x1c8>)
 800500c:	4313      	orrs	r3, r2
 800500e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005010:	f7fe f9d2 	bl	80033b8 <HAL_GetTick>
 8005014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005016:	e00a      	b.n	800502e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005018:	f7fe f9ce 	bl	80033b8 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f241 3288 	movw	r2, #5000	; 0x1388
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e053      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502e:	4b2d      	ldr	r3, [pc, #180]	; (80050e4 <HAL_RCC_ClockConfig+0x1c8>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 020c 	and.w	r2, r3, #12
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	429a      	cmp	r2, r3
 800503e:	d1eb      	bne.n	8005018 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005040:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d210      	bcs.n	8005070 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504e:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 020f 	bic.w	r2, r3, #15
 8005056:	4922      	ldr	r1, [pc, #136]	; (80050e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800505e:	4b20      	ldr	r3, [pc, #128]	; (80050e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d001      	beq.n	8005070 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e032      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	d008      	beq.n	800508e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800507c:	4b19      	ldr	r3, [pc, #100]	; (80050e4 <HAL_RCC_ClockConfig+0x1c8>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	4916      	ldr	r1, [pc, #88]	; (80050e4 <HAL_RCC_ClockConfig+0x1c8>)
 800508a:	4313      	orrs	r3, r2
 800508c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d009      	beq.n	80050ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800509a:	4b12      	ldr	r3, [pc, #72]	; (80050e4 <HAL_RCC_ClockConfig+0x1c8>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	490e      	ldr	r1, [pc, #56]	; (80050e4 <HAL_RCC_ClockConfig+0x1c8>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050ae:	f000 f821 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 80050b2:	4601      	mov	r1, r0
 80050b4:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <HAL_RCC_ClockConfig+0x1c8>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	091b      	lsrs	r3, r3, #4
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	4a0a      	ldr	r2, [pc, #40]	; (80050e8 <HAL_RCC_ClockConfig+0x1cc>)
 80050c0:	5cd3      	ldrb	r3, [r2, r3]
 80050c2:	fa21 f303 	lsr.w	r3, r1, r3
 80050c6:	4a09      	ldr	r2, [pc, #36]	; (80050ec <HAL_RCC_ClockConfig+0x1d0>)
 80050c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050ca:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <HAL_RCC_ClockConfig+0x1d4>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fe f92e 	bl	8003330 <HAL_InitTick>

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40023c00 	.word	0x40023c00
 80050e4:	40023800 	.word	0x40023800
 80050e8:	0800c1e8 	.word	0x0800c1e8
 80050ec:	20000010 	.word	0x20000010
 80050f0:	20000014 	.word	0x20000014

080050f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	607b      	str	r3, [r7, #4]
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	2300      	movs	r3, #0
 8005104:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800510a:	4b63      	ldr	r3, [pc, #396]	; (8005298 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 030c 	and.w	r3, r3, #12
 8005112:	2b04      	cmp	r3, #4
 8005114:	d007      	beq.n	8005126 <HAL_RCC_GetSysClockFreq+0x32>
 8005116:	2b08      	cmp	r3, #8
 8005118:	d008      	beq.n	800512c <HAL_RCC_GetSysClockFreq+0x38>
 800511a:	2b00      	cmp	r3, #0
 800511c:	f040 80b4 	bne.w	8005288 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005120:	4b5e      	ldr	r3, [pc, #376]	; (800529c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005122:	60bb      	str	r3, [r7, #8]
      break;
 8005124:	e0b3      	b.n	800528e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005126:	4b5e      	ldr	r3, [pc, #376]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005128:	60bb      	str	r3, [r7, #8]
      break;
 800512a:	e0b0      	b.n	800528e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800512c:	4b5a      	ldr	r3, [pc, #360]	; (8005298 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005134:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005136:	4b58      	ldr	r3, [pc, #352]	; (8005298 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d04a      	beq.n	80051d8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005142:	4b55      	ldr	r3, [pc, #340]	; (8005298 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	099b      	lsrs	r3, r3, #6
 8005148:	f04f 0400 	mov.w	r4, #0
 800514c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	ea03 0501 	and.w	r5, r3, r1
 8005158:	ea04 0602 	and.w	r6, r4, r2
 800515c:	4629      	mov	r1, r5
 800515e:	4632      	mov	r2, r6
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	f04f 0400 	mov.w	r4, #0
 8005168:	0154      	lsls	r4, r2, #5
 800516a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800516e:	014b      	lsls	r3, r1, #5
 8005170:	4619      	mov	r1, r3
 8005172:	4622      	mov	r2, r4
 8005174:	1b49      	subs	r1, r1, r5
 8005176:	eb62 0206 	sbc.w	r2, r2, r6
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	f04f 0400 	mov.w	r4, #0
 8005182:	0194      	lsls	r4, r2, #6
 8005184:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005188:	018b      	lsls	r3, r1, #6
 800518a:	1a5b      	subs	r3, r3, r1
 800518c:	eb64 0402 	sbc.w	r4, r4, r2
 8005190:	f04f 0100 	mov.w	r1, #0
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	00e2      	lsls	r2, r4, #3
 800519a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800519e:	00d9      	lsls	r1, r3, #3
 80051a0:	460b      	mov	r3, r1
 80051a2:	4614      	mov	r4, r2
 80051a4:	195b      	adds	r3, r3, r5
 80051a6:	eb44 0406 	adc.w	r4, r4, r6
 80051aa:	f04f 0100 	mov.w	r1, #0
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	0262      	lsls	r2, r4, #9
 80051b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80051b8:	0259      	lsls	r1, r3, #9
 80051ba:	460b      	mov	r3, r1
 80051bc:	4614      	mov	r4, r2
 80051be:	4618      	mov	r0, r3
 80051c0:	4621      	mov	r1, r4
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f04f 0400 	mov.w	r4, #0
 80051c8:	461a      	mov	r2, r3
 80051ca:	4623      	mov	r3, r4
 80051cc:	f7fb fd7c 	bl	8000cc8 <__aeabi_uldivmod>
 80051d0:	4603      	mov	r3, r0
 80051d2:	460c      	mov	r4, r1
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	e049      	b.n	800526c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051d8:	4b2f      	ldr	r3, [pc, #188]	; (8005298 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	099b      	lsrs	r3, r3, #6
 80051de:	f04f 0400 	mov.w	r4, #0
 80051e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	ea03 0501 	and.w	r5, r3, r1
 80051ee:	ea04 0602 	and.w	r6, r4, r2
 80051f2:	4629      	mov	r1, r5
 80051f4:	4632      	mov	r2, r6
 80051f6:	f04f 0300 	mov.w	r3, #0
 80051fa:	f04f 0400 	mov.w	r4, #0
 80051fe:	0154      	lsls	r4, r2, #5
 8005200:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005204:	014b      	lsls	r3, r1, #5
 8005206:	4619      	mov	r1, r3
 8005208:	4622      	mov	r2, r4
 800520a:	1b49      	subs	r1, r1, r5
 800520c:	eb62 0206 	sbc.w	r2, r2, r6
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	f04f 0400 	mov.w	r4, #0
 8005218:	0194      	lsls	r4, r2, #6
 800521a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800521e:	018b      	lsls	r3, r1, #6
 8005220:	1a5b      	subs	r3, r3, r1
 8005222:	eb64 0402 	sbc.w	r4, r4, r2
 8005226:	f04f 0100 	mov.w	r1, #0
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	00e2      	lsls	r2, r4, #3
 8005230:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005234:	00d9      	lsls	r1, r3, #3
 8005236:	460b      	mov	r3, r1
 8005238:	4614      	mov	r4, r2
 800523a:	195b      	adds	r3, r3, r5
 800523c:	eb44 0406 	adc.w	r4, r4, r6
 8005240:	f04f 0100 	mov.w	r1, #0
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	02a2      	lsls	r2, r4, #10
 800524a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800524e:	0299      	lsls	r1, r3, #10
 8005250:	460b      	mov	r3, r1
 8005252:	4614      	mov	r4, r2
 8005254:	4618      	mov	r0, r3
 8005256:	4621      	mov	r1, r4
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f04f 0400 	mov.w	r4, #0
 800525e:	461a      	mov	r2, r3
 8005260:	4623      	mov	r3, r4
 8005262:	f7fb fd31 	bl	8000cc8 <__aeabi_uldivmod>
 8005266:	4603      	mov	r3, r0
 8005268:	460c      	mov	r4, r1
 800526a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800526c:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	0c1b      	lsrs	r3, r3, #16
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	3301      	adds	r3, #1
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	fbb2 f3f3 	udiv	r3, r2, r3
 8005284:	60bb      	str	r3, [r7, #8]
      break;
 8005286:	e002      	b.n	800528e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005288:	4b04      	ldr	r3, [pc, #16]	; (800529c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800528a:	60bb      	str	r3, [r7, #8]
      break;
 800528c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800528e:	68bb      	ldr	r3, [r7, #8]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005298:	40023800 	.word	0x40023800
 800529c:	00f42400 	.word	0x00f42400
 80052a0:	007a1200 	.word	0x007a1200

080052a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052a8:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052aa:	681b      	ldr	r3, [r3, #0]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20000010 	.word	0x20000010

080052bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052c0:	f7ff fff0 	bl	80052a4 <HAL_RCC_GetHCLKFreq>
 80052c4:	4601      	mov	r1, r0
 80052c6:	4b05      	ldr	r3, [pc, #20]	; (80052dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	0a9b      	lsrs	r3, r3, #10
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	4a03      	ldr	r2, [pc, #12]	; (80052e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052d2:	5cd3      	ldrb	r3, [r2, r3]
 80052d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052d8:	4618      	mov	r0, r3
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40023800 	.word	0x40023800
 80052e0:	0800c1f8 	.word	0x0800c1f8

080052e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052e8:	f7ff ffdc 	bl	80052a4 <HAL_RCC_GetHCLKFreq>
 80052ec:	4601      	mov	r1, r0
 80052ee:	4b05      	ldr	r3, [pc, #20]	; (8005304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	0b5b      	lsrs	r3, r3, #13
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	4a03      	ldr	r2, [pc, #12]	; (8005308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052fa:	5cd3      	ldrb	r3, [r2, r3]
 80052fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005300:	4618      	mov	r0, r3
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40023800 	.word	0x40023800
 8005308:	0800c1f8 	.word	0x0800c1f8

0800530c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d012      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005334:	4b69      	ldr	r3, [pc, #420]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	4a68      	ldr	r2, [pc, #416]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800533a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800533e:	6093      	str	r3, [r2, #8]
 8005340:	4b66      	ldr	r3, [pc, #408]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005348:	4964      	ldr	r1, [pc, #400]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800534a:	4313      	orrs	r3, r2
 800534c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005356:	2301      	movs	r3, #1
 8005358:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d017      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005366:	4b5d      	ldr	r3, [pc, #372]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800536c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005374:	4959      	ldr	r1, [pc, #356]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005376:	4313      	orrs	r3, r2
 8005378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005380:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005384:	d101      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005386:	2301      	movs	r3, #1
 8005388:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005392:	2301      	movs	r3, #1
 8005394:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d017      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053a2:	4b4e      	ldr	r3, [pc, #312]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	494a      	ldr	r1, [pc, #296]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053c0:	d101      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80053c2:	2301      	movs	r3, #1
 80053c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80053ce:	2301      	movs	r3, #1
 80053d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80053de:	2301      	movs	r3, #1
 80053e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 808b 	beq.w	8005506 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053f0:	4b3a      	ldr	r3, [pc, #232]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	4a39      	ldr	r2, [pc, #228]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053fa:	6413      	str	r3, [r2, #64]	; 0x40
 80053fc:	4b37      	ldr	r3, [pc, #220]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005404:	60bb      	str	r3, [r7, #8]
 8005406:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005408:	4b35      	ldr	r3, [pc, #212]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a34      	ldr	r2, [pc, #208]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800540e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005412:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005414:	f7fd ffd0 	bl	80033b8 <HAL_GetTick>
 8005418:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800541a:	e008      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800541c:	f7fd ffcc 	bl	80033b8 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b64      	cmp	r3, #100	; 0x64
 8005428:	d901      	bls.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e355      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800542e:	4b2c      	ldr	r3, [pc, #176]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0f0      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800543a:	4b28      	ldr	r3, [pc, #160]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005442:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d035      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	429a      	cmp	r2, r3
 8005456:	d02e      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005458:	4b20      	ldr	r3, [pc, #128]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800545a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005460:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005462:	4b1e      	ldr	r3, [pc, #120]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005466:	4a1d      	ldr	r2, [pc, #116]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800546c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800546e:	4b1b      	ldr	r3, [pc, #108]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005472:	4a1a      	ldr	r2, [pc, #104]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005478:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800547a:	4a18      	ldr	r2, [pc, #96]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005480:	4b16      	ldr	r3, [pc, #88]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b01      	cmp	r3, #1
 800548a:	d114      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548c:	f7fd ff94 	bl	80033b8 <HAL_GetTick>
 8005490:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005492:	e00a      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005494:	f7fd ff90 	bl	80033b8 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e317      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054aa:	4b0c      	ldr	r3, [pc, #48]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0ee      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c2:	d111      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80054c4:	4b05      	ldr	r3, [pc, #20]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054d0:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80054d2:	400b      	ands	r3, r1
 80054d4:	4901      	ldr	r1, [pc, #4]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	608b      	str	r3, [r1, #8]
 80054da:	e00b      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80054dc:	40023800 	.word	0x40023800
 80054e0:	40007000 	.word	0x40007000
 80054e4:	0ffffcff 	.word	0x0ffffcff
 80054e8:	4bb0      	ldr	r3, [pc, #704]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	4aaf      	ldr	r2, [pc, #700]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054f2:	6093      	str	r3, [r2, #8]
 80054f4:	4bad      	ldr	r3, [pc, #692]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005500:	49aa      	ldr	r1, [pc, #680]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005502:	4313      	orrs	r3, r2
 8005504:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0310 	and.w	r3, r3, #16
 800550e:	2b00      	cmp	r3, #0
 8005510:	d010      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005512:	4ba6      	ldr	r3, [pc, #664]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005518:	4aa4      	ldr	r2, [pc, #656]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800551a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800551e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005522:	4ba2      	ldr	r3, [pc, #648]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005524:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	499f      	ldr	r1, [pc, #636]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005540:	4b9a      	ldr	r3, [pc, #616]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005546:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800554e:	4997      	ldr	r1, [pc, #604]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005562:	4b92      	ldr	r3, [pc, #584]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005568:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005570:	498e      	ldr	r1, [pc, #568]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005584:	4b89      	ldr	r3, [pc, #548]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005592:	4986      	ldr	r1, [pc, #536]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055a6:	4b81      	ldr	r3, [pc, #516]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b4:	497d      	ldr	r1, [pc, #500]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055c8:	4b78      	ldr	r3, [pc, #480]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ce:	f023 0203 	bic.w	r2, r3, #3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d6:	4975      	ldr	r1, [pc, #468]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055ea:	4b70      	ldr	r3, [pc, #448]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f0:	f023 020c 	bic.w	r2, r3, #12
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f8:	496c      	ldr	r1, [pc, #432]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800560c:	4b67      	ldr	r3, [pc, #412]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800560e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005612:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800561a:	4964      	ldr	r1, [pc, #400]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800562e:	4b5f      	ldr	r3, [pc, #380]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005634:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800563c:	495b      	ldr	r1, [pc, #364]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005650:	4b56      	ldr	r3, [pc, #344]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005656:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565e:	4953      	ldr	r1, [pc, #332]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005672:	4b4e      	ldr	r3, [pc, #312]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005678:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005680:	494a      	ldr	r1, [pc, #296]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005694:	4b45      	ldr	r3, [pc, #276]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a2:	4942      	ldr	r1, [pc, #264]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80056b6:	4b3d      	ldr	r3, [pc, #244]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c4:	4939      	ldr	r1, [pc, #228]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056d8:	4b34      	ldr	r3, [pc, #208]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056e6:	4931      	ldr	r1, [pc, #196]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d011      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80056fa:	4b2c      	ldr	r3, [pc, #176]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005700:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005708:	4928      	ldr	r1, [pc, #160]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800570a:	4313      	orrs	r3, r2
 800570c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005718:	d101      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800571a:	2301      	movs	r3, #1
 800571c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800572a:	2301      	movs	r3, #1
 800572c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800573a:	4b1c      	ldr	r3, [pc, #112]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800573c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005740:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005748:	4918      	ldr	r1, [pc, #96]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00b      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800575c:	4b13      	ldr	r3, [pc, #76]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005762:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800576c:	490f      	ldr	r1, [pc, #60]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d005      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005782:	f040 80d8 	bne.w	8005936 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005786:	4b09      	ldr	r3, [pc, #36]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a08      	ldr	r2, [pc, #32]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800578c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005792:	f7fd fe11 	bl	80033b8 <HAL_GetTick>
 8005796:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005798:	e00a      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800579a:	f7fd fe0d 	bl	80033b8 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b64      	cmp	r3, #100	; 0x64
 80057a6:	d903      	bls.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e196      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80057ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057b0:	4b6c      	ldr	r3, [pc, #432]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1ee      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d021      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x500>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d11d      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80057d0:	4b64      	ldr	r3, [pc, #400]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057d6:	0c1b      	lsrs	r3, r3, #16
 80057d8:	f003 0303 	and.w	r3, r3, #3
 80057dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80057de:	4b61      	ldr	r3, [pc, #388]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e4:	0e1b      	lsrs	r3, r3, #24
 80057e6:	f003 030f 	and.w	r3, r3, #15
 80057ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	019a      	lsls	r2, r3, #6
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	041b      	lsls	r3, r3, #16
 80057f6:	431a      	orrs	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	061b      	lsls	r3, r3, #24
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	071b      	lsls	r3, r3, #28
 8005804:	4957      	ldr	r1, [pc, #348]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d004      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005820:	d00a      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800582a:	2b00      	cmp	r3, #0
 800582c:	d02e      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005836:	d129      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005838:	4b4a      	ldr	r3, [pc, #296]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800583a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800583e:	0c1b      	lsrs	r3, r3, #16
 8005840:	f003 0303 	and.w	r3, r3, #3
 8005844:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005846:	4b47      	ldr	r3, [pc, #284]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800584c:	0f1b      	lsrs	r3, r3, #28
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	019a      	lsls	r2, r3, #6
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	041b      	lsls	r3, r3, #16
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	061b      	lsls	r3, r3, #24
 8005866:	431a      	orrs	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	071b      	lsls	r3, r3, #28
 800586c:	493d      	ldr	r1, [pc, #244]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800586e:	4313      	orrs	r3, r2
 8005870:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005874:	4b3b      	ldr	r3, [pc, #236]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800587a:	f023 021f 	bic.w	r2, r3, #31
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	3b01      	subs	r3, #1
 8005884:	4937      	ldr	r1, [pc, #220]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01d      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005898:	4b32      	ldr	r3, [pc, #200]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800589a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800589e:	0e1b      	lsrs	r3, r3, #24
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058a6:	4b2f      	ldr	r3, [pc, #188]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ac:	0f1b      	lsrs	r3, r3, #28
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	019a      	lsls	r2, r3, #6
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	041b      	lsls	r3, r3, #16
 80058c0:	431a      	orrs	r2, r3
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	061b      	lsls	r3, r3, #24
 80058c6:	431a      	orrs	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	071b      	lsls	r3, r3, #28
 80058cc:	4925      	ldr	r1, [pc, #148]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d011      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	019a      	lsls	r2, r3, #6
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	041b      	lsls	r3, r3, #16
 80058ec:	431a      	orrs	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	061b      	lsls	r3, r3, #24
 80058f4:	431a      	orrs	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	071b      	lsls	r3, r3, #28
 80058fc:	4919      	ldr	r1, [pc, #100]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005904:	4b17      	ldr	r3, [pc, #92]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a16      	ldr	r2, [pc, #88]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800590a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800590e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005910:	f7fd fd52 	bl	80033b8 <HAL_GetTick>
 8005914:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005916:	e008      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005918:	f7fd fd4e 	bl	80033b8 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b64      	cmp	r3, #100	; 0x64
 8005924:	d901      	bls.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e0d7      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800592a:	4b0e      	ldr	r3, [pc, #56]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0f0      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	2b01      	cmp	r3, #1
 800593a:	f040 80cd 	bne.w	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800593e:	4b09      	ldr	r3, [pc, #36]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a08      	ldr	r2, [pc, #32]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800594a:	f7fd fd35 	bl	80033b8 <HAL_GetTick>
 800594e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005950:	e00a      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005952:	f7fd fd31 	bl	80033b8 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b64      	cmp	r3, #100	; 0x64
 800595e:	d903      	bls.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e0ba      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005964:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005968:	4b5e      	ldr	r3, [pc, #376]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005974:	d0ed      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005986:	2b00      	cmp	r3, #0
 8005988:	d009      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005992:	2b00      	cmp	r3, #0
 8005994:	d02e      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d12a      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800599e:	4b51      	ldr	r3, [pc, #324]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a4:	0c1b      	lsrs	r3, r3, #16
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059ac:	4b4d      	ldr	r3, [pc, #308]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b2:	0f1b      	lsrs	r3, r3, #28
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	019a      	lsls	r2, r3, #6
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	041b      	lsls	r3, r3, #16
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	061b      	lsls	r3, r3, #24
 80059cc:	431a      	orrs	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	071b      	lsls	r3, r3, #28
 80059d2:	4944      	ldr	r1, [pc, #272]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80059da:	4b42      	ldr	r3, [pc, #264]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	3b01      	subs	r3, #1
 80059ea:	021b      	lsls	r3, r3, #8
 80059ec:	493d      	ldr	r1, [pc, #244]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d022      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a08:	d11d      	bne.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a0a:	4b36      	ldr	r3, [pc, #216]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a10:	0e1b      	lsrs	r3, r3, #24
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a18:	4b32      	ldr	r3, [pc, #200]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1e:	0f1b      	lsrs	r3, r3, #28
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	019a      	lsls	r2, r3, #6
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	041b      	lsls	r3, r3, #16
 8005a32:	431a      	orrs	r2, r3
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	061b      	lsls	r3, r3, #24
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	071b      	lsls	r3, r3, #28
 8005a3e:	4929      	ldr	r1, [pc, #164]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d028      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a52:	4b24      	ldr	r3, [pc, #144]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a58:	0e1b      	lsrs	r3, r3, #24
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a60:	4b20      	ldr	r3, [pc, #128]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a66:	0c1b      	lsrs	r3, r3, #16
 8005a68:	f003 0303 	and.w	r3, r3, #3
 8005a6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	019a      	lsls	r2, r3, #6
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	041b      	lsls	r3, r3, #16
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	061b      	lsls	r3, r3, #24
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	071b      	lsls	r3, r3, #28
 8005a86:	4917      	ldr	r1, [pc, #92]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a8e:	4b15      	ldr	r3, [pc, #84]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	4911      	ldr	r1, [pc, #68]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005aa4:	4b0f      	ldr	r3, [pc, #60]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a0e      	ldr	r2, [pc, #56]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab0:	f7fd fc82 	bl	80033b8 <HAL_GetTick>
 8005ab4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ab6:	e008      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ab8:	f7fd fc7e 	bl	80033b8 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b64      	cmp	r3, #100	; 0x64
 8005ac4:	d901      	bls.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e007      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005aca:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ad6:	d1ef      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3720      	adds	r7, #32
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40023800 	.word	0x40023800

08005ae8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e084      	b.n	8005c04 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d106      	bne.n	8005b1a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7fc ff67 	bl	80029e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b30:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b3a:	d902      	bls.n	8005b42 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	e002      	b.n	8005b48 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b46:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b50:	d007      	beq.n	8005b62 <HAL_SPI_Init+0x7a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b5a:	d002      	beq.n	8005b62 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10b      	bne.n	8005b82 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b72:	d903      	bls.n	8005b7c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	631a      	str	r2, [r3, #48]	; 0x30
 8005b7a:	e002      	b.n	8005b82 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	ea42 0103 	orr.w	r1, r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	0c1b      	lsrs	r3, r3, #16
 8005bc2:	f003 0204 	and.w	r2, r3, #4
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	ea42 0103 	orr.w	r1, r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69da      	ldr	r2, [r3, #28]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bf2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b088      	sub	sp, #32
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <HAL_SPI_Transmit+0x22>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e150      	b.n	8005ed0 <HAL_SPI_Transmit+0x2c4>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c36:	f7fd fbbf 	bl	80033b8 <HAL_GetTick>
 8005c3a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c3c:	88fb      	ldrh	r3, [r7, #6]
 8005c3e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d002      	beq.n	8005c52 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c50:	e135      	b.n	8005ebe <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <HAL_SPI_Transmit+0x52>
 8005c58:	88fb      	ldrh	r3, [r7, #6]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d102      	bne.n	8005c64 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c62:	e12c      	b.n	8005ebe <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2203      	movs	r2, #3
 8005c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	88fa      	ldrh	r2, [r7, #6]
 8005c7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	88fa      	ldrh	r2, [r7, #6]
 8005c82:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cae:	d107      	bne.n	8005cc0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cbe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cca:	2b40      	cmp	r3, #64	; 0x40
 8005ccc:	d007      	beq.n	8005cde <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ce6:	d94b      	bls.n	8005d80 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <HAL_SPI_Transmit+0xea>
 8005cf0:	8afb      	ldrh	r3, [r7, #22]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d13e      	bne.n	8005d74 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	881a      	ldrh	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	1c9a      	adds	r2, r3, #2
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d1a:	e02b      	b.n	8005d74 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d112      	bne.n	8005d50 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	881a      	ldrh	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	1c9a      	adds	r2, r3, #2
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d4e:	e011      	b.n	8005d74 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d50:	f7fd fb32 	bl	80033b8 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d803      	bhi.n	8005d68 <HAL_SPI_Transmit+0x15c>
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d66:	d102      	bne.n	8005d6e <HAL_SPI_Transmit+0x162>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d102      	bne.n	8005d74 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d72:	e0a4      	b.n	8005ebe <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1ce      	bne.n	8005d1c <HAL_SPI_Transmit+0x110>
 8005d7e:	e07c      	b.n	8005e7a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <HAL_SPI_Transmit+0x182>
 8005d88:	8afb      	ldrh	r3, [r7, #22]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d170      	bne.n	8005e70 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d912      	bls.n	8005dbe <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9c:	881a      	ldrh	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	1c9a      	adds	r2, r3, #2
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b02      	subs	r3, #2
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dbc:	e058      	b.n	8005e70 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	330c      	adds	r3, #12
 8005dc8:	7812      	ldrb	r2, [r2, #0]
 8005dca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005de4:	e044      	b.n	8005e70 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d12b      	bne.n	8005e4c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d912      	bls.n	8005e24 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e02:	881a      	ldrh	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	1c9a      	adds	r2, r3, #2
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	3b02      	subs	r3, #2
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e22:	e025      	b.n	8005e70 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	330c      	adds	r3, #12
 8005e2e:	7812      	ldrb	r2, [r2, #0]
 8005e30:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e4a:	e011      	b.n	8005e70 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e4c:	f7fd fab4 	bl	80033b8 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d803      	bhi.n	8005e64 <HAL_SPI_Transmit+0x258>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e62:	d102      	bne.n	8005e6a <HAL_SPI_Transmit+0x25e>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d102      	bne.n	8005e70 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e6e:	e026      	b.n	8005ebe <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1b5      	bne.n	8005de6 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 fb14 	bl	80064ac <SPI_EndRxTxTransaction>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e98:	2300      	movs	r3, #0
 8005e9a:	613b      	str	r3, [r7, #16]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	77fb      	strb	r3, [r7, #31]
 8005eba:	e000      	b.n	8005ebe <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005ebc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ece:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3720      	adds	r7, #32
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08a      	sub	sp, #40	; 0x28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d101      	bne.n	8005efe <HAL_SPI_TransmitReceive+0x26>
 8005efa:	2302      	movs	r3, #2
 8005efc:	e1fb      	b.n	80062f6 <HAL_SPI_TransmitReceive+0x41e>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f06:	f7fd fa57 	bl	80033b8 <HAL_GetTick>
 8005f0a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f12:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005f1a:	887b      	ldrh	r3, [r7, #2]
 8005f1c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005f1e:	887b      	ldrh	r3, [r7, #2]
 8005f20:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f22:	7efb      	ldrb	r3, [r7, #27]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d00e      	beq.n	8005f46 <HAL_SPI_TransmitReceive+0x6e>
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f2e:	d106      	bne.n	8005f3e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d102      	bne.n	8005f3e <HAL_SPI_TransmitReceive+0x66>
 8005f38:	7efb      	ldrb	r3, [r7, #27]
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d003      	beq.n	8005f46 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005f3e:	2302      	movs	r3, #2
 8005f40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005f44:	e1cd      	b.n	80062e2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d005      	beq.n	8005f58 <HAL_SPI_TransmitReceive+0x80>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <HAL_SPI_TransmitReceive+0x80>
 8005f52:	887b      	ldrh	r3, [r7, #2]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d103      	bne.n	8005f60 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005f5e:	e1c0      	b.n	80062e2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d003      	beq.n	8005f74 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2205      	movs	r2, #5
 8005f70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	887a      	ldrh	r2, [r7, #2]
 8005f84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	887a      	ldrh	r2, [r7, #2]
 8005f8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	887a      	ldrh	r2, [r7, #2]
 8005f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	887a      	ldrh	r2, [r7, #2]
 8005fa0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fb6:	d802      	bhi.n	8005fbe <HAL_SPI_TransmitReceive+0xe6>
 8005fb8:	8a3b      	ldrh	r3, [r7, #16]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d908      	bls.n	8005fd0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fcc:	605a      	str	r2, [r3, #4]
 8005fce:	e007      	b.n	8005fe0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fde:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fea:	2b40      	cmp	r3, #64	; 0x40
 8005fec:	d007      	beq.n	8005ffe <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ffc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006006:	d97c      	bls.n	8006102 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <HAL_SPI_TransmitReceive+0x13e>
 8006010:	8a7b      	ldrh	r3, [r7, #18]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d169      	bne.n	80060ea <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601a:	881a      	ldrh	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006026:	1c9a      	adds	r2, r3, #2
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006030:	b29b      	uxth	r3, r3
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800603a:	e056      	b.n	80060ea <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b02      	cmp	r3, #2
 8006048:	d11b      	bne.n	8006082 <HAL_SPI_TransmitReceive+0x1aa>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800604e:	b29b      	uxth	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d016      	beq.n	8006082 <HAL_SPI_TransmitReceive+0x1aa>
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	2b01      	cmp	r3, #1
 8006058:	d113      	bne.n	8006082 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	881a      	ldrh	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	1c9a      	adds	r2, r3, #2
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800607e:	2300      	movs	r3, #0
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b01      	cmp	r3, #1
 800608e:	d11c      	bne.n	80060ca <HAL_SPI_TransmitReceive+0x1f2>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006096:	b29b      	uxth	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d016      	beq.n	80060ca <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	b292      	uxth	r2, r2
 80060a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	1c9a      	adds	r2, r3, #2
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060c6:	2301      	movs	r3, #1
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80060ca:	f7fd f975 	bl	80033b8 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d807      	bhi.n	80060ea <HAL_SPI_TransmitReceive+0x212>
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e0:	d003      	beq.n	80060ea <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80060e8:	e0fb      	b.n	80062e2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1a3      	bne.n	800603c <HAL_SPI_TransmitReceive+0x164>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d19d      	bne.n	800603c <HAL_SPI_TransmitReceive+0x164>
 8006100:	e0df      	b.n	80062c2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <HAL_SPI_TransmitReceive+0x23a>
 800610a:	8a7b      	ldrh	r3, [r7, #18]
 800610c:	2b01      	cmp	r3, #1
 800610e:	f040 80cb 	bne.w	80062a8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b01      	cmp	r3, #1
 800611a:	d912      	bls.n	8006142 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	881a      	ldrh	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612c:	1c9a      	adds	r2, r3, #2
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006136:	b29b      	uxth	r3, r3
 8006138:	3b02      	subs	r3, #2
 800613a:	b29a      	uxth	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006140:	e0b2      	b.n	80062a8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	330c      	adds	r3, #12
 800614c:	7812      	ldrb	r2, [r2, #0]
 800614e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615e:	b29b      	uxth	r3, r3
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006168:	e09e      	b.n	80062a8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b02      	cmp	r3, #2
 8006176:	d134      	bne.n	80061e2 <HAL_SPI_TransmitReceive+0x30a>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800617c:	b29b      	uxth	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d02f      	beq.n	80061e2 <HAL_SPI_TransmitReceive+0x30a>
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	2b01      	cmp	r3, #1
 8006186:	d12c      	bne.n	80061e2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b01      	cmp	r3, #1
 8006190:	d912      	bls.n	80061b8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006196:	881a      	ldrh	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a2:	1c9a      	adds	r2, r3, #2
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	3b02      	subs	r3, #2
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061b6:	e012      	b.n	80061de <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	330c      	adds	r3, #12
 80061c2:	7812      	ldrb	r2, [r2, #0]
 80061c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	3b01      	subs	r3, #1
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d148      	bne.n	8006282 <HAL_SPI_TransmitReceive+0x3aa>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d042      	beq.n	8006282 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b01      	cmp	r3, #1
 8006206:	d923      	bls.n	8006250 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	b292      	uxth	r2, r2
 8006214:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	1c9a      	adds	r2, r3, #2
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b02      	subs	r3, #2
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b01      	cmp	r3, #1
 800623c:	d81f      	bhi.n	800627e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800624c:	605a      	str	r2, [r3, #4]
 800624e:	e016      	b.n	800627e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f103 020c 	add.w	r2, r3, #12
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625c:	7812      	ldrb	r2, [r2, #0]
 800625e:	b2d2      	uxtb	r2, r2
 8006260:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006272:	b29b      	uxth	r3, r3
 8006274:	3b01      	subs	r3, #1
 8006276:	b29a      	uxth	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800627e:	2301      	movs	r3, #1
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006282:	f7fd f899 	bl	80033b8 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628e:	429a      	cmp	r2, r3
 8006290:	d803      	bhi.n	800629a <HAL_SPI_TransmitReceive+0x3c2>
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006298:	d102      	bne.n	80062a0 <HAL_SPI_TransmitReceive+0x3c8>
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	2b00      	cmp	r3, #0
 800629e:	d103      	bne.n	80062a8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80062a6:	e01c      	b.n	80062e2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f47f af5b 	bne.w	800616a <HAL_SPI_TransmitReceive+0x292>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f47f af54 	bne.w	800616a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062c2:	69fa      	ldr	r2, [r7, #28]
 80062c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 f8f0 	bl	80064ac <SPI_EndRxTxTransaction>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d006      	beq.n	80062e0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2220      	movs	r2, #32
 80062dc:	661a      	str	r2, [r3, #96]	; 0x60
 80062de:	e000      	b.n	80062e2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80062e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80062f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3728      	adds	r7, #40	; 0x28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	603b      	str	r3, [r7, #0]
 800630a:	4613      	mov	r3, r2
 800630c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800630e:	e04c      	b.n	80063aa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006316:	d048      	beq.n	80063aa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006318:	f7fd f84e 	bl	80033b8 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	429a      	cmp	r2, r3
 8006326:	d902      	bls.n	800632e <SPI_WaitFlagStateUntilTimeout+0x30>
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d13d      	bne.n	80063aa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800633c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006346:	d111      	bne.n	800636c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006350:	d004      	beq.n	800635c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800635a:	d107      	bne.n	800636c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800636a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006374:	d10f      	bne.n	8006396 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006394:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e00f      	b.n	80063ca <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4013      	ands	r3, r2
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	bf0c      	ite	eq
 80063ba:	2301      	moveq	r3, #1
 80063bc:	2300      	movne	r3, #0
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	461a      	mov	r2, r3
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d1a3      	bne.n	8006310 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	607a      	str	r2, [r7, #4]
 80063de:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80063e0:	e057      	b.n	8006492 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80063e8:	d106      	bne.n	80063f8 <SPI_WaitFifoStateUntilTimeout+0x26>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d103      	bne.n	80063f8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	330c      	adds	r3, #12
 80063f6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fe:	d048      	beq.n	8006492 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006400:	f7fc ffda 	bl	80033b8 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	429a      	cmp	r2, r3
 800640e:	d902      	bls.n	8006416 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d13d      	bne.n	8006492 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006424:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800642e:	d111      	bne.n	8006454 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006438:	d004      	beq.n	8006444 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006442:	d107      	bne.n	8006454 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006452:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800645c:	d10f      	bne.n	800647e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800647c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e008      	b.n	80064a4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	4013      	ands	r3, r2
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d19f      	bne.n	80063e2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2200      	movs	r2, #0
 80064c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f7ff ff84 	bl	80063d2 <SPI_WaitFifoStateUntilTimeout>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d007      	beq.n	80064e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d4:	f043 0220 	orr.w	r2, r3, #32
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e027      	b.n	8006530 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2200      	movs	r2, #0
 80064e8:	2180      	movs	r1, #128	; 0x80
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f7ff ff07 	bl	80062fe <SPI_WaitFlagStateUntilTimeout>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d007      	beq.n	8006506 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064fa:	f043 0220 	orr.w	r2, r3, #32
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e014      	b.n	8006530 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2200      	movs	r2, #0
 800650e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f7ff ff5d 	bl	80063d2 <SPI_WaitFifoStateUntilTimeout>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d007      	beq.n	800652e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006522:	f043 0220 	orr.w	r2, r3, #32
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e000      	b.n	8006530 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e01d      	b.n	8006586 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d106      	bne.n	8006564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7fc fd2a 	bl	8002fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	3304      	adds	r3, #4
 8006574:	4619      	mov	r1, r3
 8006576:	4610      	mov	r0, r2
 8006578:	f000 fc7e 	bl	8006e78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b082      	sub	sp, #8
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e01d      	b.n	80065dc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d106      	bne.n	80065ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f815 	bl	80065e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2202      	movs	r2, #2
 80065be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3304      	adds	r3, #4
 80065ca:	4619      	mov	r1, r3
 80065cc:	4610      	mov	r0, r2
 80065ce:	f000 fc53 	bl	8006e78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2201      	movs	r2, #1
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f000 ffcc 	bl	80075a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a17      	ldr	r2, [pc, #92]	; (8006674 <HAL_TIM_PWM_Start+0x7c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d004      	beq.n	8006624 <HAL_TIM_PWM_Start+0x2c>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a16      	ldr	r2, [pc, #88]	; (8006678 <HAL_TIM_PWM_Start+0x80>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d101      	bne.n	8006628 <HAL_TIM_PWM_Start+0x30>
 8006624:	2301      	movs	r3, #1
 8006626:	e000      	b.n	800662a <HAL_TIM_PWM_Start+0x32>
 8006628:	2300      	movs	r3, #0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d007      	beq.n	800663e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800663c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	4b0d      	ldr	r3, [pc, #52]	; (800667c <HAL_TIM_PWM_Start+0x84>)
 8006646:	4013      	ands	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b06      	cmp	r3, #6
 800664e:	d00b      	beq.n	8006668 <HAL_TIM_PWM_Start+0x70>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006656:	d007      	beq.n	8006668 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 0201 	orr.w	r2, r2, #1
 8006666:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	40010000 	.word	0x40010000
 8006678:	40010400 	.word	0x40010400
 800667c:	00010007 	.word	0x00010007

08006680 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e02d      	b.n	80066f0 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d106      	bne.n	80066ae <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f825 	bl	80066f8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2202      	movs	r2, #2
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3304      	adds	r3, #4
 80066be:	4619      	mov	r1, r3
 80066c0:	4610      	mov	r0, r2
 80066c2:	f000 fbd9 	bl	8006e78 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0208 	bic.w	r2, r2, #8
 80066d4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6819      	ldr	r1, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e07b      	b.n	8006818 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d106      	bne.n	800673a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7fc fcaf 	bl	8003098 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2202      	movs	r2, #2
 800673e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6899      	ldr	r1, [r3, #8]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	4b34      	ldr	r3, [pc, #208]	; (8006820 <HAL_TIM_Encoder_Init+0x114>)
 800674e:	400b      	ands	r3, r1
 8006750:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	3304      	adds	r3, #4
 800675a:	4619      	mov	r1, r3
 800675c:	4610      	mov	r0, r2
 800675e:	f000 fb8b 	bl	8006e78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4b27      	ldr	r3, [pc, #156]	; (8006824 <HAL_TIM_Encoder_Init+0x118>)
 8006788:	4013      	ands	r3, r2
 800678a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	021b      	lsls	r3, r3, #8
 8006796:	4313      	orrs	r3, r2
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	4313      	orrs	r3, r2
 800679c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	4b21      	ldr	r3, [pc, #132]	; (8006828 <HAL_TIM_Encoder_Init+0x11c>)
 80067a2:	4013      	ands	r3, r2
 80067a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4b20      	ldr	r3, [pc, #128]	; (800682c <HAL_TIM_Encoder_Init+0x120>)
 80067aa:	4013      	ands	r3, r2
 80067ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	4313      	orrs	r3, r2
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	011a      	lsls	r2, r3, #4
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	031b      	lsls	r3, r3, #12
 80067cc:	4313      	orrs	r3, r2
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80067da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80067e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	011b      	lsls	r3, r3, #4
 80067ee:	4313      	orrs	r3, r2
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	fffebff8 	.word	0xfffebff8
 8006824:	fffffcfc 	.word	0xfffffcfc
 8006828:	fffff3f3 	.word	0xfffff3f3
 800682c:	ffff0f0f 	.word	0xffff0f0f

08006830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b02      	cmp	r3, #2
 8006844:	d122      	bne.n	800688c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b02      	cmp	r3, #2
 8006852:	d11b      	bne.n	800688c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f06f 0202 	mvn.w	r2, #2
 800685c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fae2 	bl	8006e3c <HAL_TIM_IC_CaptureCallback>
 8006878:	e005      	b.n	8006886 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fad4 	bl	8006e28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fae5 	bl	8006e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	2b04      	cmp	r3, #4
 8006898:	d122      	bne.n	80068e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d11b      	bne.n	80068e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f06f 0204 	mvn.w	r2, #4
 80068b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2202      	movs	r2, #2
 80068b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fab8 	bl	8006e3c <HAL_TIM_IC_CaptureCallback>
 80068cc:	e005      	b.n	80068da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 faaa 	bl	8006e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fabb 	bl	8006e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d122      	bne.n	8006934 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f003 0308 	and.w	r3, r3, #8
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d11b      	bne.n	8006934 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f06f 0208 	mvn.w	r2, #8
 8006904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2204      	movs	r2, #4
 800690a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	f003 0303 	and.w	r3, r3, #3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fa8e 	bl	8006e3c <HAL_TIM_IC_CaptureCallback>
 8006920:	e005      	b.n	800692e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fa80 	bl	8006e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fa91 	bl	8006e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	f003 0310 	and.w	r3, r3, #16
 800693e:	2b10      	cmp	r3, #16
 8006940:	d122      	bne.n	8006988 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f003 0310 	and.w	r3, r3, #16
 800694c:	2b10      	cmp	r3, #16
 800694e:	d11b      	bne.n	8006988 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f06f 0210 	mvn.w	r2, #16
 8006958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2208      	movs	r2, #8
 800695e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fa64 	bl	8006e3c <HAL_TIM_IC_CaptureCallback>
 8006974:	e005      	b.n	8006982 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fa56 	bl	8006e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fa67 	bl	8006e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b01      	cmp	r3, #1
 8006994:	d10e      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d107      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f06f 0201 	mvn.w	r2, #1
 80069ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fa30 	bl	8006e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069be:	2b80      	cmp	r3, #128	; 0x80
 80069c0:	d10e      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069cc:	2b80      	cmp	r3, #128	; 0x80
 80069ce:	d107      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fea2 	bl	8007724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ee:	d10e      	bne.n	8006a0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069fa:	2b80      	cmp	r3, #128	; 0x80
 80069fc:	d107      	bne.n	8006a0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fe95 	bl	8007738 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a18:	2b40      	cmp	r3, #64	; 0x40
 8006a1a:	d10e      	bne.n	8006a3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a26:	2b40      	cmp	r3, #64	; 0x40
 8006a28:	d107      	bne.n	8006a3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fa15 	bl	8006e64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	f003 0320 	and.w	r3, r3, #32
 8006a44:	2b20      	cmp	r3, #32
 8006a46:	d10e      	bne.n	8006a66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b20      	cmp	r3, #32
 8006a54:	d107      	bne.n	8006a66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f06f 0220 	mvn.w	r2, #32
 8006a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fe55 	bl	8007710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a66:	bf00      	nop
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d101      	bne.n	8006a8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006a86:	2302      	movs	r3, #2
 8006a88:	e105      	b.n	8006c96 <HAL_TIM_PWM_ConfigChannel+0x226>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2202      	movs	r2, #2
 8006a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b14      	cmp	r3, #20
 8006a9e:	f200 80f0 	bhi.w	8006c82 <HAL_TIM_PWM_ConfigChannel+0x212>
 8006aa2:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa8:	08006afd 	.word	0x08006afd
 8006aac:	08006c83 	.word	0x08006c83
 8006ab0:	08006c83 	.word	0x08006c83
 8006ab4:	08006c83 	.word	0x08006c83
 8006ab8:	08006b3d 	.word	0x08006b3d
 8006abc:	08006c83 	.word	0x08006c83
 8006ac0:	08006c83 	.word	0x08006c83
 8006ac4:	08006c83 	.word	0x08006c83
 8006ac8:	08006b7f 	.word	0x08006b7f
 8006acc:	08006c83 	.word	0x08006c83
 8006ad0:	08006c83 	.word	0x08006c83
 8006ad4:	08006c83 	.word	0x08006c83
 8006ad8:	08006bbf 	.word	0x08006bbf
 8006adc:	08006c83 	.word	0x08006c83
 8006ae0:	08006c83 	.word	0x08006c83
 8006ae4:	08006c83 	.word	0x08006c83
 8006ae8:	08006c01 	.word	0x08006c01
 8006aec:	08006c83 	.word	0x08006c83
 8006af0:	08006c83 	.word	0x08006c83
 8006af4:	08006c83 	.word	0x08006c83
 8006af8:	08006c41 	.word	0x08006c41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68b9      	ldr	r1, [r7, #8]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 fa58 	bl	8006fb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699a      	ldr	r2, [r3, #24]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0208 	orr.w	r2, r2, #8
 8006b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f022 0204 	bic.w	r2, r2, #4
 8006b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6999      	ldr	r1, [r3, #24]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	691a      	ldr	r2, [r3, #16]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	619a      	str	r2, [r3, #24]
      break;
 8006b3a:	e0a3      	b.n	8006c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68b9      	ldr	r1, [r7, #8]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 faaa 	bl	800709c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699a      	ldr	r2, [r3, #24]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699a      	ldr	r2, [r3, #24]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6999      	ldr	r1, [r3, #24]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	021a      	lsls	r2, r3, #8
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	619a      	str	r2, [r3, #24]
      break;
 8006b7c:	e082      	b.n	8006c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 fb01 	bl	800718c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69da      	ldr	r2, [r3, #28]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0208 	orr.w	r2, r2, #8
 8006b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69da      	ldr	r2, [r3, #28]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0204 	bic.w	r2, r2, #4
 8006ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69d9      	ldr	r1, [r3, #28]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	691a      	ldr	r2, [r3, #16]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	61da      	str	r2, [r3, #28]
      break;
 8006bbc:	e062      	b.n	8006c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68b9      	ldr	r1, [r7, #8]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 fb57 	bl	8007278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69da      	ldr	r2, [r3, #28]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69d9      	ldr	r1, [r3, #28]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	021a      	lsls	r2, r3, #8
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	61da      	str	r2, [r3, #28]
      break;
 8006bfe:	e041      	b.n	8006c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68b9      	ldr	r1, [r7, #8]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 fb8e 	bl	8007328 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0208 	orr.w	r2, r2, #8
 8006c1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0204 	bic.w	r2, r2, #4
 8006c2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	691a      	ldr	r2, [r3, #16]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c3e:	e021      	b.n	8006c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68b9      	ldr	r1, [r7, #8]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 fbc0 	bl	80073cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	021a      	lsls	r2, r3, #8
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c80:	e000      	b.n	8006c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006c82:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop

08006ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <HAL_TIM_ConfigClockSource+0x18>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e0a6      	b.n	8006e06 <HAL_TIM_ConfigClockSource+0x166>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4b4f      	ldr	r3, [pc, #316]	; (8006e10 <HAL_TIM_ConfigClockSource+0x170>)
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b40      	cmp	r3, #64	; 0x40
 8006cee:	d067      	beq.n	8006dc0 <HAL_TIM_ConfigClockSource+0x120>
 8006cf0:	2b40      	cmp	r3, #64	; 0x40
 8006cf2:	d80b      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x6c>
 8006cf4:	2b10      	cmp	r3, #16
 8006cf6:	d073      	beq.n	8006de0 <HAL_TIM_ConfigClockSource+0x140>
 8006cf8:	2b10      	cmp	r3, #16
 8006cfa:	d802      	bhi.n	8006d02 <HAL_TIM_ConfigClockSource+0x62>
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d06f      	beq.n	8006de0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d00:	e078      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d02:	2b20      	cmp	r3, #32
 8006d04:	d06c      	beq.n	8006de0 <HAL_TIM_ConfigClockSource+0x140>
 8006d06:	2b30      	cmp	r3, #48	; 0x30
 8006d08:	d06a      	beq.n	8006de0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006d0a:	e073      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d0c:	2b70      	cmp	r3, #112	; 0x70
 8006d0e:	d00d      	beq.n	8006d2c <HAL_TIM_ConfigClockSource+0x8c>
 8006d10:	2b70      	cmp	r3, #112	; 0x70
 8006d12:	d804      	bhi.n	8006d1e <HAL_TIM_ConfigClockSource+0x7e>
 8006d14:	2b50      	cmp	r3, #80	; 0x50
 8006d16:	d033      	beq.n	8006d80 <HAL_TIM_ConfigClockSource+0xe0>
 8006d18:	2b60      	cmp	r3, #96	; 0x60
 8006d1a:	d041      	beq.n	8006da0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006d1c:	e06a      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d22:	d066      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x152>
 8006d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d28:	d017      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006d2a:	e063      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	6899      	ldr	r1, [r3, #8]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f000 fc14 	bl	8007568 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	609a      	str	r2, [r3, #8]
      break;
 8006d58:	e04c      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	6899      	ldr	r1, [r3, #8]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f000 fbfd 	bl	8007568 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d7c:	609a      	str	r2, [r3, #8]
      break;
 8006d7e:	e039      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6818      	ldr	r0, [r3, #0]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	6859      	ldr	r1, [r3, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	f000 fb71 	bl	8007474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2150      	movs	r1, #80	; 0x50
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fbca 	bl	8007532 <TIM_ITRx_SetConfig>
      break;
 8006d9e:	e029      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6818      	ldr	r0, [r3, #0]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	6859      	ldr	r1, [r3, #4]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	461a      	mov	r2, r3
 8006dae:	f000 fb90 	bl	80074d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2160      	movs	r1, #96	; 0x60
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 fbba 	bl	8007532 <TIM_ITRx_SetConfig>
      break;
 8006dbe:	e019      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6818      	ldr	r0, [r3, #0]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	6859      	ldr	r1, [r3, #4]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	f000 fb51 	bl	8007474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2140      	movs	r1, #64	; 0x40
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fbaa 	bl	8007532 <TIM_ITRx_SetConfig>
      break;
 8006dde:	e009      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4619      	mov	r1, r3
 8006dea:	4610      	mov	r0, r2
 8006dec:	f000 fba1 	bl	8007532 <TIM_ITRx_SetConfig>
      break;
 8006df0:	e000      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006df2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	fffeff88 	.word	0xfffeff88

08006e14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a40      	ldr	r2, [pc, #256]	; (8006f8c <TIM_Base_SetConfig+0x114>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d013      	beq.n	8006eb8 <TIM_Base_SetConfig+0x40>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e96:	d00f      	beq.n	8006eb8 <TIM_Base_SetConfig+0x40>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a3d      	ldr	r2, [pc, #244]	; (8006f90 <TIM_Base_SetConfig+0x118>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d00b      	beq.n	8006eb8 <TIM_Base_SetConfig+0x40>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a3c      	ldr	r2, [pc, #240]	; (8006f94 <TIM_Base_SetConfig+0x11c>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d007      	beq.n	8006eb8 <TIM_Base_SetConfig+0x40>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a3b      	ldr	r2, [pc, #236]	; (8006f98 <TIM_Base_SetConfig+0x120>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d003      	beq.n	8006eb8 <TIM_Base_SetConfig+0x40>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a3a      	ldr	r2, [pc, #232]	; (8006f9c <TIM_Base_SetConfig+0x124>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d108      	bne.n	8006eca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a2f      	ldr	r2, [pc, #188]	; (8006f8c <TIM_Base_SetConfig+0x114>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d02b      	beq.n	8006f2a <TIM_Base_SetConfig+0xb2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed8:	d027      	beq.n	8006f2a <TIM_Base_SetConfig+0xb2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a2c      	ldr	r2, [pc, #176]	; (8006f90 <TIM_Base_SetConfig+0x118>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d023      	beq.n	8006f2a <TIM_Base_SetConfig+0xb2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a2b      	ldr	r2, [pc, #172]	; (8006f94 <TIM_Base_SetConfig+0x11c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d01f      	beq.n	8006f2a <TIM_Base_SetConfig+0xb2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a2a      	ldr	r2, [pc, #168]	; (8006f98 <TIM_Base_SetConfig+0x120>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d01b      	beq.n	8006f2a <TIM_Base_SetConfig+0xb2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a29      	ldr	r2, [pc, #164]	; (8006f9c <TIM_Base_SetConfig+0x124>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d017      	beq.n	8006f2a <TIM_Base_SetConfig+0xb2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a28      	ldr	r2, [pc, #160]	; (8006fa0 <TIM_Base_SetConfig+0x128>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d013      	beq.n	8006f2a <TIM_Base_SetConfig+0xb2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a27      	ldr	r2, [pc, #156]	; (8006fa4 <TIM_Base_SetConfig+0x12c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d00f      	beq.n	8006f2a <TIM_Base_SetConfig+0xb2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a26      	ldr	r2, [pc, #152]	; (8006fa8 <TIM_Base_SetConfig+0x130>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00b      	beq.n	8006f2a <TIM_Base_SetConfig+0xb2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a25      	ldr	r2, [pc, #148]	; (8006fac <TIM_Base_SetConfig+0x134>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d007      	beq.n	8006f2a <TIM_Base_SetConfig+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a24      	ldr	r2, [pc, #144]	; (8006fb0 <TIM_Base_SetConfig+0x138>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d003      	beq.n	8006f2a <TIM_Base_SetConfig+0xb2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a23      	ldr	r2, [pc, #140]	; (8006fb4 <TIM_Base_SetConfig+0x13c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d108      	bne.n	8006f3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a0a      	ldr	r2, [pc, #40]	; (8006f8c <TIM_Base_SetConfig+0x114>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_Base_SetConfig+0xf8>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a0c      	ldr	r2, [pc, #48]	; (8006f9c <TIM_Base_SetConfig+0x124>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d103      	bne.n	8006f78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	615a      	str	r2, [r3, #20]
}
 8006f7e:	bf00      	nop
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40010000 	.word	0x40010000
 8006f90:	40000400 	.word	0x40000400
 8006f94:	40000800 	.word	0x40000800
 8006f98:	40000c00 	.word	0x40000c00
 8006f9c:	40010400 	.word	0x40010400
 8006fa0:	40014000 	.word	0x40014000
 8006fa4:	40014400 	.word	0x40014400
 8006fa8:	40014800 	.word	0x40014800
 8006fac:	40001800 	.word	0x40001800
 8006fb0:	40001c00 	.word	0x40001c00
 8006fb4:	40002000 	.word	0x40002000

08006fb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	f023 0201 	bic.w	r2, r3, #1
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4b2b      	ldr	r3, [pc, #172]	; (8007090 <TIM_OC1_SetConfig+0xd8>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0303 	bic.w	r3, r3, #3
 8006fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f023 0302 	bic.w	r3, r3, #2
 8007000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	4313      	orrs	r3, r2
 800700a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a21      	ldr	r2, [pc, #132]	; (8007094 <TIM_OC1_SetConfig+0xdc>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d003      	beq.n	800701c <TIM_OC1_SetConfig+0x64>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a20      	ldr	r2, [pc, #128]	; (8007098 <TIM_OC1_SetConfig+0xe0>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d10c      	bne.n	8007036 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f023 0308 	bic.w	r3, r3, #8
 8007022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	4313      	orrs	r3, r2
 800702c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f023 0304 	bic.w	r3, r3, #4
 8007034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a16      	ldr	r2, [pc, #88]	; (8007094 <TIM_OC1_SetConfig+0xdc>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d003      	beq.n	8007046 <TIM_OC1_SetConfig+0x8e>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a15      	ldr	r2, [pc, #84]	; (8007098 <TIM_OC1_SetConfig+0xe0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d111      	bne.n	800706a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800704c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	4313      	orrs	r3, r2
 800705e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	4313      	orrs	r3, r2
 8007068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	621a      	str	r2, [r3, #32]
}
 8007084:	bf00      	nop
 8007086:	371c      	adds	r7, #28
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	fffeff8f 	.word	0xfffeff8f
 8007094:	40010000 	.word	0x40010000
 8007098:	40010400 	.word	0x40010400

0800709c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800709c:	b480      	push	{r7}
 800709e:	b087      	sub	sp, #28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	f023 0210 	bic.w	r2, r3, #16
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4b2e      	ldr	r3, [pc, #184]	; (8007180 <TIM_OC2_SetConfig+0xe4>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	021b      	lsls	r3, r3, #8
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4313      	orrs	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f023 0320 	bic.w	r3, r3, #32
 80070e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	011b      	lsls	r3, r3, #4
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a23      	ldr	r2, [pc, #140]	; (8007184 <TIM_OC2_SetConfig+0xe8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d003      	beq.n	8007104 <TIM_OC2_SetConfig+0x68>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a22      	ldr	r2, [pc, #136]	; (8007188 <TIM_OC2_SetConfig+0xec>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d10d      	bne.n	8007120 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800710a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	011b      	lsls	r3, r3, #4
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	4313      	orrs	r3, r2
 8007116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800711e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a18      	ldr	r2, [pc, #96]	; (8007184 <TIM_OC2_SetConfig+0xe8>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d003      	beq.n	8007130 <TIM_OC2_SetConfig+0x94>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a17      	ldr	r2, [pc, #92]	; (8007188 <TIM_OC2_SetConfig+0xec>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d113      	bne.n	8007158 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800713e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	4313      	orrs	r3, r2
 800714a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	4313      	orrs	r3, r2
 8007156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	621a      	str	r2, [r3, #32]
}
 8007172:	bf00      	nop
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	feff8fff 	.word	0xfeff8fff
 8007184:	40010000 	.word	0x40010000
 8007188:	40010400 	.word	0x40010400

0800718c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4b2d      	ldr	r3, [pc, #180]	; (800726c <TIM_OC3_SetConfig+0xe0>)
 80071b8:	4013      	ands	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 0303 	bic.w	r3, r3, #3
 80071c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	021b      	lsls	r3, r3, #8
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a22      	ldr	r2, [pc, #136]	; (8007270 <TIM_OC3_SetConfig+0xe4>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d003      	beq.n	80071f2 <TIM_OC3_SetConfig+0x66>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a21      	ldr	r2, [pc, #132]	; (8007274 <TIM_OC3_SetConfig+0xe8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d10d      	bne.n	800720e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	021b      	lsls	r3, r3, #8
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	4313      	orrs	r3, r2
 8007204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800720c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a17      	ldr	r2, [pc, #92]	; (8007270 <TIM_OC3_SetConfig+0xe4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d003      	beq.n	800721e <TIM_OC3_SetConfig+0x92>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a16      	ldr	r2, [pc, #88]	; (8007274 <TIM_OC3_SetConfig+0xe8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d113      	bne.n	8007246 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800722c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	011b      	lsls	r3, r3, #4
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	4313      	orrs	r3, r2
 8007238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4313      	orrs	r3, r2
 8007244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	621a      	str	r2, [r3, #32]
}
 8007260:	bf00      	nop
 8007262:	371c      	adds	r7, #28
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	fffeff8f 	.word	0xfffeff8f
 8007270:	40010000 	.word	0x40010000
 8007274:	40010400 	.word	0x40010400

08007278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4b1e      	ldr	r3, [pc, #120]	; (800731c <TIM_OC4_SetConfig+0xa4>)
 80072a4:	4013      	ands	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	021b      	lsls	r3, r3, #8
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	031b      	lsls	r3, r3, #12
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a13      	ldr	r2, [pc, #76]	; (8007320 <TIM_OC4_SetConfig+0xa8>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_OC4_SetConfig+0x68>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a12      	ldr	r2, [pc, #72]	; (8007324 <TIM_OC4_SetConfig+0xac>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d109      	bne.n	80072f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	019b      	lsls	r3, r3, #6
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	621a      	str	r2, [r3, #32]
}
 800730e:	bf00      	nop
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	feff8fff 	.word	0xfeff8fff
 8007320:	40010000 	.word	0x40010000
 8007324:	40010400 	.word	0x40010400

08007328 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	4b1b      	ldr	r3, [pc, #108]	; (80073c0 <TIM_OC5_SetConfig+0x98>)
 8007354:	4013      	ands	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007368:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	041b      	lsls	r3, r3, #16
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	4313      	orrs	r3, r2
 8007374:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a12      	ldr	r2, [pc, #72]	; (80073c4 <TIM_OC5_SetConfig+0x9c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d003      	beq.n	8007386 <TIM_OC5_SetConfig+0x5e>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a11      	ldr	r2, [pc, #68]	; (80073c8 <TIM_OC5_SetConfig+0xa0>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d109      	bne.n	800739a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800738c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	021b      	lsls	r3, r3, #8
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	621a      	str	r2, [r3, #32]
}
 80073b4:	bf00      	nop
 80073b6:	371c      	adds	r7, #28
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	fffeff8f 	.word	0xfffeff8f
 80073c4:	40010000 	.word	0x40010000
 80073c8:	40010400 	.word	0x40010400

080073cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4b1c      	ldr	r3, [pc, #112]	; (8007468 <TIM_OC6_SetConfig+0x9c>)
 80073f8:	4013      	ands	r3, r2
 80073fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	021b      	lsls	r3, r3, #8
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	4313      	orrs	r3, r2
 8007406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800740e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	051b      	lsls	r3, r3, #20
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	4313      	orrs	r3, r2
 800741a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a13      	ldr	r2, [pc, #76]	; (800746c <TIM_OC6_SetConfig+0xa0>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d003      	beq.n	800742c <TIM_OC6_SetConfig+0x60>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a12      	ldr	r2, [pc, #72]	; (8007470 <TIM_OC6_SetConfig+0xa4>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d109      	bne.n	8007440 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007432:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	029b      	lsls	r3, r3, #10
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	4313      	orrs	r3, r2
 800743e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	621a      	str	r2, [r3, #32]
}
 800745a:	bf00      	nop
 800745c:	371c      	adds	r7, #28
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	feff8fff 	.word	0xfeff8fff
 800746c:	40010000 	.word	0x40010000
 8007470:	40010400 	.word	0x40010400

08007474 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a1b      	ldr	r3, [r3, #32]
 8007484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	f023 0201 	bic.w	r2, r3, #1
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800749e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f023 030a 	bic.w	r3, r3, #10
 80074b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	621a      	str	r2, [r3, #32]
}
 80074c6:	bf00      	nop
 80074c8:	371c      	adds	r7, #28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b087      	sub	sp, #28
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	f023 0210 	bic.w	r2, r3, #16
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6a1b      	ldr	r3, [r3, #32]
 80074f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	031b      	lsls	r3, r3, #12
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	4313      	orrs	r3, r2
 8007506:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800750e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	011b      	lsls	r3, r3, #4
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	4313      	orrs	r3, r2
 8007518:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	621a      	str	r2, [r3, #32]
}
 8007526:	bf00      	nop
 8007528:	371c      	adds	r7, #28
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007532:	b480      	push	{r7}
 8007534:	b085      	sub	sp, #20
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007548:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	4313      	orrs	r3, r2
 8007550:	f043 0307 	orr.w	r3, r3, #7
 8007554:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	609a      	str	r2, [r3, #8]
}
 800755c:	bf00      	nop
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007568:	b480      	push	{r7}
 800756a:	b087      	sub	sp, #28
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007582:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	021a      	lsls	r2, r3, #8
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	431a      	orrs	r2, r3
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	4313      	orrs	r3, r2
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	4313      	orrs	r3, r2
 8007594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	609a      	str	r2, [r3, #8]
}
 800759c:	bf00      	nop
 800759e:	371c      	adds	r7, #28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f003 031f 	and.w	r3, r3, #31
 80075ba:	2201      	movs	r2, #1
 80075bc:	fa02 f303 	lsl.w	r3, r2, r3
 80075c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6a1a      	ldr	r2, [r3, #32]
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	43db      	mvns	r3, r3
 80075ca:	401a      	ands	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6a1a      	ldr	r2, [r3, #32]
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f003 031f 	and.w	r3, r3, #31
 80075da:	6879      	ldr	r1, [r7, #4]
 80075dc:	fa01 f303 	lsl.w	r3, r1, r3
 80075e0:	431a      	orrs	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	621a      	str	r2, [r3, #32]
}
 80075e6:	bf00      	nop
 80075e8:	371c      	adds	r7, #28
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
	...

080075f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007604:	2b01      	cmp	r3, #1
 8007606:	d101      	bne.n	800760c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007608:	2302      	movs	r3, #2
 800760a:	e06d      	b.n	80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a30      	ldr	r2, [pc, #192]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d004      	beq.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a2f      	ldr	r2, [pc, #188]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d108      	bne.n	8007652 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007646:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007658:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	4313      	orrs	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a20      	ldr	r2, [pc, #128]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d022      	beq.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800767e:	d01d      	beq.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a1d      	ldr	r2, [pc, #116]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d018      	beq.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a1c      	ldr	r2, [pc, #112]	; (8007700 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d013      	beq.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a1a      	ldr	r2, [pc, #104]	; (8007704 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d00e      	beq.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a15      	ldr	r2, [pc, #84]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d009      	beq.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a16      	ldr	r2, [pc, #88]	; (8007708 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d004      	beq.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a15      	ldr	r2, [pc, #84]	; (800770c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d10c      	bne.n	80076d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	40010000 	.word	0x40010000
 80076f8:	40010400 	.word	0x40010400
 80076fc:	40000400 	.word	0x40000400
 8007700:	40000800 	.word	0x40000800
 8007704:	40000c00 	.word	0x40000c00
 8007708:	40014000 	.word	0x40014000
 800770c:	40001800 	.word	0x40001800

08007710 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e040      	b.n	80077e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007762:	2b00      	cmp	r3, #0
 8007764:	d106      	bne.n	8007774 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7fb fd5c 	bl	800322c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2224      	movs	r2, #36	; 0x24
 8007778:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0201 	bic.w	r2, r2, #1
 8007788:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 faa6 	bl	8007cdc <UART_SetConfig>
 8007790:	4603      	mov	r3, r0
 8007792:	2b01      	cmp	r3, #1
 8007794:	d101      	bne.n	800779a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e022      	b.n	80077e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fd44 	bl	8008230 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689a      	ldr	r2, [r3, #8]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0201 	orr.w	r2, r2, #1
 80077d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fdcb 	bl	8008374 <UART_CheckIdleState>
 80077de:	4603      	mov	r3, r0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08a      	sub	sp, #40	; 0x28
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	603b      	str	r3, [r7, #0]
 80077f4:	4613      	mov	r3, r2
 80077f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	d17f      	bne.n	8007900 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <HAL_UART_Transmit+0x24>
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e078      	b.n	8007902 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007816:	2b01      	cmp	r3, #1
 8007818:	d101      	bne.n	800781e <HAL_UART_Transmit+0x36>
 800781a:	2302      	movs	r3, #2
 800781c:	e071      	b.n	8007902 <HAL_UART_Transmit+0x11a>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2221      	movs	r2, #33	; 0x21
 8007830:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007832:	f7fb fdc1 	bl	80033b8 <HAL_GetTick>
 8007836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	88fa      	ldrh	r2, [r7, #6]
 800783c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	88fa      	ldrh	r2, [r7, #6]
 8007844:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007850:	d108      	bne.n	8007864 <HAL_UART_Transmit+0x7c>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d104      	bne.n	8007864 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800785a:	2300      	movs	r3, #0
 800785c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	61bb      	str	r3, [r7, #24]
 8007862:	e003      	b.n	800786c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007868:	2300      	movs	r3, #0
 800786a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8007874:	e02c      	b.n	80078d0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2200      	movs	r2, #0
 800787e:	2180      	movs	r1, #128	; 0x80
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 fda6 	bl	80083d2 <UART_WaitOnFlagUntilTimeout>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e038      	b.n	8007902 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10b      	bne.n	80078ae <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	3302      	adds	r3, #2
 80078aa:	61bb      	str	r3, [r7, #24]
 80078ac:	e007      	b.n	80078be <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	781a      	ldrb	r2, [r3, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	3301      	adds	r3, #1
 80078bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1cc      	bne.n	8007876 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	2200      	movs	r2, #0
 80078e4:	2140      	movs	r1, #64	; 0x40
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 fd73 	bl	80083d2 <UART_WaitOnFlagUntilTimeout>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e005      	b.n	8007902 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2220      	movs	r2, #32
 80078fa:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80078fc:	2300      	movs	r3, #0
 80078fe:	e000      	b.n	8007902 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8007900:	2302      	movs	r3, #2
  }
}
 8007902:	4618      	mov	r0, r3
 8007904:	3720      	adds	r7, #32
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
	...

0800790c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	4613      	mov	r3, r2
 8007918:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800791e:	2b20      	cmp	r3, #32
 8007920:	f040 808a 	bne.w	8007a38 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d002      	beq.n	8007930 <HAL_UART_Receive_IT+0x24>
 800792a:	88fb      	ldrh	r3, [r7, #6]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e082      	b.n	8007a3a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800793a:	2b01      	cmp	r3, #1
 800793c:	d101      	bne.n	8007942 <HAL_UART_Receive_IT+0x36>
 800793e:	2302      	movs	r3, #2
 8007940:	e07b      	b.n	8007a3a <HAL_UART_Receive_IT+0x12e>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	88fa      	ldrh	r2, [r7, #6]
 8007954:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	88fa      	ldrh	r2, [r7, #6]
 800795c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800796e:	d10e      	bne.n	800798e <HAL_UART_Receive_IT+0x82>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d105      	bne.n	8007984 <HAL_UART_Receive_IT+0x78>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800797e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007982:	e02d      	b.n	80079e0 <HAL_UART_Receive_IT+0xd4>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	22ff      	movs	r2, #255	; 0xff
 8007988:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800798c:	e028      	b.n	80079e0 <HAL_UART_Receive_IT+0xd4>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10d      	bne.n	80079b2 <HAL_UART_Receive_IT+0xa6>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d104      	bne.n	80079a8 <HAL_UART_Receive_IT+0x9c>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	22ff      	movs	r2, #255	; 0xff
 80079a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079a6:	e01b      	b.n	80079e0 <HAL_UART_Receive_IT+0xd4>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	227f      	movs	r2, #127	; 0x7f
 80079ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079b0:	e016      	b.n	80079e0 <HAL_UART_Receive_IT+0xd4>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079ba:	d10d      	bne.n	80079d8 <HAL_UART_Receive_IT+0xcc>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d104      	bne.n	80079ce <HAL_UART_Receive_IT+0xc2>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	227f      	movs	r2, #127	; 0x7f
 80079c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079cc:	e008      	b.n	80079e0 <HAL_UART_Receive_IT+0xd4>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	223f      	movs	r2, #63	; 0x3f
 80079d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079d6:	e003      	b.n	80079e0 <HAL_UART_Receive_IT+0xd4>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2222      	movs	r2, #34	; 0x22
 80079ea:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	689a      	ldr	r2, [r3, #8]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f042 0201 	orr.w	r2, r2, #1
 80079fa:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a04:	d107      	bne.n	8007a16 <HAL_UART_Receive_IT+0x10a>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d103      	bne.n	8007a16 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4a0d      	ldr	r2, [pc, #52]	; (8007a48 <HAL_UART_Receive_IT+0x13c>)
 8007a12:	661a      	str	r2, [r3, #96]	; 0x60
 8007a14:	e002      	b.n	8007a1c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	4a0c      	ldr	r2, [pc, #48]	; (8007a4c <HAL_UART_Receive_IT+0x140>)
 8007a1a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007a32:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	e000      	b.n	8007a3a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007a38:	2302      	movs	r3, #2
  }
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	0800860d 	.word	0x0800860d
 8007a4c:	08008567 	.word	0x08008567

08007a50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a70:	69fa      	ldr	r2, [r7, #28]
 8007a72:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a76:	4013      	ands	r3, r2
 8007a78:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d113      	bne.n	8007aa8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	f003 0320 	and.w	r3, r3, #32
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00e      	beq.n	8007aa8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	f003 0320 	and.w	r3, r3, #32
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d009      	beq.n	8007aa8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8100 	beq.w	8007c9e <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	4798      	blx	r3
      }
      return;
 8007aa6:	e0fa      	b.n	8007c9e <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 80d5 	beq.w	8007c5a <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d105      	bne.n	8007ac6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 80ca 	beq.w	8007c5a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00e      	beq.n	8007aee <HAL_UART_IRQHandler+0x9e>
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d009      	beq.n	8007aee <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ae6:	f043 0201 	orr.w	r2, r3, #1
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	f003 0302 	and.w	r3, r3, #2
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00e      	beq.n	8007b16 <HAL_UART_IRQHandler+0xc6>
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d009      	beq.n	8007b16 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2202      	movs	r2, #2
 8007b08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b0e:	f043 0204 	orr.w	r2, r3, #4
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	f003 0304 	and.w	r3, r3, #4
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00e      	beq.n	8007b3e <HAL_UART_IRQHandler+0xee>
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2204      	movs	r2, #4
 8007b30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b36:	f043 0202 	orr.w	r2, r3, #2
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	f003 0308 	and.w	r3, r3, #8
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d013      	beq.n	8007b70 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	f003 0320 	and.w	r3, r3, #32
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d104      	bne.n	8007b5c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d009      	beq.n	8007b70 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2208      	movs	r2, #8
 8007b62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b68:	f043 0208 	orr.w	r2, r3, #8
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00f      	beq.n	8007b9a <HAL_UART_IRQHandler+0x14a>
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00a      	beq.n	8007b9a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b92:	f043 0220 	orr.w	r2, r3, #32
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d07f      	beq.n	8007ca2 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	f003 0320 	and.w	r3, r3, #32
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00c      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	f003 0320 	and.w	r3, r3, #32
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d007      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bca:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd6:	2b40      	cmp	r3, #64	; 0x40
 8007bd8:	d004      	beq.n	8007be4 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d031      	beq.n	8007c48 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fc6f 	bl	80084c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf4:	2b40      	cmp	r3, #64	; 0x40
 8007bf6:	d123      	bne.n	8007c40 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689a      	ldr	r2, [r3, #8]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c06:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d013      	beq.n	8007c38 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c14:	4a26      	ldr	r2, [pc, #152]	; (8007cb0 <HAL_UART_IRQHandler+0x260>)
 8007c16:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fc f90d 	bl	8003e3c <HAL_DMA_Abort_IT>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d016      	beq.n	8007c56 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007c32:	4610      	mov	r0, r2
 8007c34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c36:	e00e      	b.n	8007c56 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f845 	bl	8007cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c3e:	e00a      	b.n	8007c56 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f841 	bl	8007cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c46:	e006      	b.n	8007c56 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f83d 	bl	8007cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007c54:	e025      	b.n	8007ca2 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c56:	bf00      	nop
    return;
 8007c58:	e023      	b.n	8007ca2 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00d      	beq.n	8007c80 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d008      	beq.n	8007c80 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d017      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	4798      	blx	r3
    }
    return;
 8007c7e:	e012      	b.n	8007ca6 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00e      	beq.n	8007ca8 <HAL_UART_IRQHandler+0x258>
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d009      	beq.n	8007ca8 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fc4d 	bl	8008534 <UART_EndTransmit_IT>
    return;
 8007c9a:	bf00      	nop
 8007c9c:	e004      	b.n	8007ca8 <HAL_UART_IRQHandler+0x258>
      return;
 8007c9e:	bf00      	nop
 8007ca0:	e002      	b.n	8007ca8 <HAL_UART_IRQHandler+0x258>
    return;
 8007ca2:	bf00      	nop
 8007ca4:	e000      	b.n	8007ca8 <HAL_UART_IRQHandler+0x258>
    return;
 8007ca6:	bf00      	nop
  }

}
 8007ca8:	3720      	adds	r7, #32
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	08008509 	.word	0x08008509

08007cb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b088      	sub	sp, #32
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689a      	ldr	r2, [r3, #8]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	4bb1      	ldr	r3, [pc, #708]	; (8007fd0 <UART_SetConfig+0x2f4>)
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	6812      	ldr	r2, [r2, #0]
 8007d12:	6939      	ldr	r1, [r7, #16]
 8007d14:	430b      	orrs	r3, r1
 8007d16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68da      	ldr	r2, [r3, #12]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a1b      	ldr	r3, [r3, #32]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a9f      	ldr	r2, [pc, #636]	; (8007fd4 <UART_SetConfig+0x2f8>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d121      	bne.n	8007da0 <UART_SetConfig+0xc4>
 8007d5c:	4b9e      	ldr	r3, [pc, #632]	; (8007fd8 <UART_SetConfig+0x2fc>)
 8007d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d816      	bhi.n	8007d98 <UART_SetConfig+0xbc>
 8007d6a:	a201      	add	r2, pc, #4	; (adr r2, 8007d70 <UART_SetConfig+0x94>)
 8007d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d70:	08007d81 	.word	0x08007d81
 8007d74:	08007d8d 	.word	0x08007d8d
 8007d78:	08007d87 	.word	0x08007d87
 8007d7c:	08007d93 	.word	0x08007d93
 8007d80:	2301      	movs	r3, #1
 8007d82:	77fb      	strb	r3, [r7, #31]
 8007d84:	e151      	b.n	800802a <UART_SetConfig+0x34e>
 8007d86:	2302      	movs	r3, #2
 8007d88:	77fb      	strb	r3, [r7, #31]
 8007d8a:	e14e      	b.n	800802a <UART_SetConfig+0x34e>
 8007d8c:	2304      	movs	r3, #4
 8007d8e:	77fb      	strb	r3, [r7, #31]
 8007d90:	e14b      	b.n	800802a <UART_SetConfig+0x34e>
 8007d92:	2308      	movs	r3, #8
 8007d94:	77fb      	strb	r3, [r7, #31]
 8007d96:	e148      	b.n	800802a <UART_SetConfig+0x34e>
 8007d98:	2310      	movs	r3, #16
 8007d9a:	77fb      	strb	r3, [r7, #31]
 8007d9c:	bf00      	nop
 8007d9e:	e144      	b.n	800802a <UART_SetConfig+0x34e>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a8d      	ldr	r2, [pc, #564]	; (8007fdc <UART_SetConfig+0x300>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d134      	bne.n	8007e14 <UART_SetConfig+0x138>
 8007daa:	4b8b      	ldr	r3, [pc, #556]	; (8007fd8 <UART_SetConfig+0x2fc>)
 8007dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db0:	f003 030c 	and.w	r3, r3, #12
 8007db4:	2b0c      	cmp	r3, #12
 8007db6:	d829      	bhi.n	8007e0c <UART_SetConfig+0x130>
 8007db8:	a201      	add	r2, pc, #4	; (adr r2, 8007dc0 <UART_SetConfig+0xe4>)
 8007dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbe:	bf00      	nop
 8007dc0:	08007df5 	.word	0x08007df5
 8007dc4:	08007e0d 	.word	0x08007e0d
 8007dc8:	08007e0d 	.word	0x08007e0d
 8007dcc:	08007e0d 	.word	0x08007e0d
 8007dd0:	08007e01 	.word	0x08007e01
 8007dd4:	08007e0d 	.word	0x08007e0d
 8007dd8:	08007e0d 	.word	0x08007e0d
 8007ddc:	08007e0d 	.word	0x08007e0d
 8007de0:	08007dfb 	.word	0x08007dfb
 8007de4:	08007e0d 	.word	0x08007e0d
 8007de8:	08007e0d 	.word	0x08007e0d
 8007dec:	08007e0d 	.word	0x08007e0d
 8007df0:	08007e07 	.word	0x08007e07
 8007df4:	2300      	movs	r3, #0
 8007df6:	77fb      	strb	r3, [r7, #31]
 8007df8:	e117      	b.n	800802a <UART_SetConfig+0x34e>
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	77fb      	strb	r3, [r7, #31]
 8007dfe:	e114      	b.n	800802a <UART_SetConfig+0x34e>
 8007e00:	2304      	movs	r3, #4
 8007e02:	77fb      	strb	r3, [r7, #31]
 8007e04:	e111      	b.n	800802a <UART_SetConfig+0x34e>
 8007e06:	2308      	movs	r3, #8
 8007e08:	77fb      	strb	r3, [r7, #31]
 8007e0a:	e10e      	b.n	800802a <UART_SetConfig+0x34e>
 8007e0c:	2310      	movs	r3, #16
 8007e0e:	77fb      	strb	r3, [r7, #31]
 8007e10:	bf00      	nop
 8007e12:	e10a      	b.n	800802a <UART_SetConfig+0x34e>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a71      	ldr	r2, [pc, #452]	; (8007fe0 <UART_SetConfig+0x304>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d120      	bne.n	8007e60 <UART_SetConfig+0x184>
 8007e1e:	4b6e      	ldr	r3, [pc, #440]	; (8007fd8 <UART_SetConfig+0x2fc>)
 8007e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e28:	2b10      	cmp	r3, #16
 8007e2a:	d00f      	beq.n	8007e4c <UART_SetConfig+0x170>
 8007e2c:	2b10      	cmp	r3, #16
 8007e2e:	d802      	bhi.n	8007e36 <UART_SetConfig+0x15a>
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d005      	beq.n	8007e40 <UART_SetConfig+0x164>
 8007e34:	e010      	b.n	8007e58 <UART_SetConfig+0x17c>
 8007e36:	2b20      	cmp	r3, #32
 8007e38:	d005      	beq.n	8007e46 <UART_SetConfig+0x16a>
 8007e3a:	2b30      	cmp	r3, #48	; 0x30
 8007e3c:	d009      	beq.n	8007e52 <UART_SetConfig+0x176>
 8007e3e:	e00b      	b.n	8007e58 <UART_SetConfig+0x17c>
 8007e40:	2300      	movs	r3, #0
 8007e42:	77fb      	strb	r3, [r7, #31]
 8007e44:	e0f1      	b.n	800802a <UART_SetConfig+0x34e>
 8007e46:	2302      	movs	r3, #2
 8007e48:	77fb      	strb	r3, [r7, #31]
 8007e4a:	e0ee      	b.n	800802a <UART_SetConfig+0x34e>
 8007e4c:	2304      	movs	r3, #4
 8007e4e:	77fb      	strb	r3, [r7, #31]
 8007e50:	e0eb      	b.n	800802a <UART_SetConfig+0x34e>
 8007e52:	2308      	movs	r3, #8
 8007e54:	77fb      	strb	r3, [r7, #31]
 8007e56:	e0e8      	b.n	800802a <UART_SetConfig+0x34e>
 8007e58:	2310      	movs	r3, #16
 8007e5a:	77fb      	strb	r3, [r7, #31]
 8007e5c:	bf00      	nop
 8007e5e:	e0e4      	b.n	800802a <UART_SetConfig+0x34e>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a5f      	ldr	r2, [pc, #380]	; (8007fe4 <UART_SetConfig+0x308>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d120      	bne.n	8007eac <UART_SetConfig+0x1d0>
 8007e6a:	4b5b      	ldr	r3, [pc, #364]	; (8007fd8 <UART_SetConfig+0x2fc>)
 8007e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e74:	2b40      	cmp	r3, #64	; 0x40
 8007e76:	d00f      	beq.n	8007e98 <UART_SetConfig+0x1bc>
 8007e78:	2b40      	cmp	r3, #64	; 0x40
 8007e7a:	d802      	bhi.n	8007e82 <UART_SetConfig+0x1a6>
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d005      	beq.n	8007e8c <UART_SetConfig+0x1b0>
 8007e80:	e010      	b.n	8007ea4 <UART_SetConfig+0x1c8>
 8007e82:	2b80      	cmp	r3, #128	; 0x80
 8007e84:	d005      	beq.n	8007e92 <UART_SetConfig+0x1b6>
 8007e86:	2bc0      	cmp	r3, #192	; 0xc0
 8007e88:	d009      	beq.n	8007e9e <UART_SetConfig+0x1c2>
 8007e8a:	e00b      	b.n	8007ea4 <UART_SetConfig+0x1c8>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	77fb      	strb	r3, [r7, #31]
 8007e90:	e0cb      	b.n	800802a <UART_SetConfig+0x34e>
 8007e92:	2302      	movs	r3, #2
 8007e94:	77fb      	strb	r3, [r7, #31]
 8007e96:	e0c8      	b.n	800802a <UART_SetConfig+0x34e>
 8007e98:	2304      	movs	r3, #4
 8007e9a:	77fb      	strb	r3, [r7, #31]
 8007e9c:	e0c5      	b.n	800802a <UART_SetConfig+0x34e>
 8007e9e:	2308      	movs	r3, #8
 8007ea0:	77fb      	strb	r3, [r7, #31]
 8007ea2:	e0c2      	b.n	800802a <UART_SetConfig+0x34e>
 8007ea4:	2310      	movs	r3, #16
 8007ea6:	77fb      	strb	r3, [r7, #31]
 8007ea8:	bf00      	nop
 8007eaa:	e0be      	b.n	800802a <UART_SetConfig+0x34e>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a4d      	ldr	r2, [pc, #308]	; (8007fe8 <UART_SetConfig+0x30c>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d124      	bne.n	8007f00 <UART_SetConfig+0x224>
 8007eb6:	4b48      	ldr	r3, [pc, #288]	; (8007fd8 <UART_SetConfig+0x2fc>)
 8007eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec4:	d012      	beq.n	8007eec <UART_SetConfig+0x210>
 8007ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eca:	d802      	bhi.n	8007ed2 <UART_SetConfig+0x1f6>
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d007      	beq.n	8007ee0 <UART_SetConfig+0x204>
 8007ed0:	e012      	b.n	8007ef8 <UART_SetConfig+0x21c>
 8007ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ed6:	d006      	beq.n	8007ee6 <UART_SetConfig+0x20a>
 8007ed8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007edc:	d009      	beq.n	8007ef2 <UART_SetConfig+0x216>
 8007ede:	e00b      	b.n	8007ef8 <UART_SetConfig+0x21c>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	77fb      	strb	r3, [r7, #31]
 8007ee4:	e0a1      	b.n	800802a <UART_SetConfig+0x34e>
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	77fb      	strb	r3, [r7, #31]
 8007eea:	e09e      	b.n	800802a <UART_SetConfig+0x34e>
 8007eec:	2304      	movs	r3, #4
 8007eee:	77fb      	strb	r3, [r7, #31]
 8007ef0:	e09b      	b.n	800802a <UART_SetConfig+0x34e>
 8007ef2:	2308      	movs	r3, #8
 8007ef4:	77fb      	strb	r3, [r7, #31]
 8007ef6:	e098      	b.n	800802a <UART_SetConfig+0x34e>
 8007ef8:	2310      	movs	r3, #16
 8007efa:	77fb      	strb	r3, [r7, #31]
 8007efc:	bf00      	nop
 8007efe:	e094      	b.n	800802a <UART_SetConfig+0x34e>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a39      	ldr	r2, [pc, #228]	; (8007fec <UART_SetConfig+0x310>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d124      	bne.n	8007f54 <UART_SetConfig+0x278>
 8007f0a:	4b33      	ldr	r3, [pc, #204]	; (8007fd8 <UART_SetConfig+0x2fc>)
 8007f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f18:	d012      	beq.n	8007f40 <UART_SetConfig+0x264>
 8007f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f1e:	d802      	bhi.n	8007f26 <UART_SetConfig+0x24a>
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d007      	beq.n	8007f34 <UART_SetConfig+0x258>
 8007f24:	e012      	b.n	8007f4c <UART_SetConfig+0x270>
 8007f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f2a:	d006      	beq.n	8007f3a <UART_SetConfig+0x25e>
 8007f2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f30:	d009      	beq.n	8007f46 <UART_SetConfig+0x26a>
 8007f32:	e00b      	b.n	8007f4c <UART_SetConfig+0x270>
 8007f34:	2301      	movs	r3, #1
 8007f36:	77fb      	strb	r3, [r7, #31]
 8007f38:	e077      	b.n	800802a <UART_SetConfig+0x34e>
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	77fb      	strb	r3, [r7, #31]
 8007f3e:	e074      	b.n	800802a <UART_SetConfig+0x34e>
 8007f40:	2304      	movs	r3, #4
 8007f42:	77fb      	strb	r3, [r7, #31]
 8007f44:	e071      	b.n	800802a <UART_SetConfig+0x34e>
 8007f46:	2308      	movs	r3, #8
 8007f48:	77fb      	strb	r3, [r7, #31]
 8007f4a:	e06e      	b.n	800802a <UART_SetConfig+0x34e>
 8007f4c:	2310      	movs	r3, #16
 8007f4e:	77fb      	strb	r3, [r7, #31]
 8007f50:	bf00      	nop
 8007f52:	e06a      	b.n	800802a <UART_SetConfig+0x34e>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a25      	ldr	r2, [pc, #148]	; (8007ff0 <UART_SetConfig+0x314>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d124      	bne.n	8007fa8 <UART_SetConfig+0x2cc>
 8007f5e:	4b1e      	ldr	r3, [pc, #120]	; (8007fd8 <UART_SetConfig+0x2fc>)
 8007f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f64:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f6c:	d012      	beq.n	8007f94 <UART_SetConfig+0x2b8>
 8007f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f72:	d802      	bhi.n	8007f7a <UART_SetConfig+0x29e>
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d007      	beq.n	8007f88 <UART_SetConfig+0x2ac>
 8007f78:	e012      	b.n	8007fa0 <UART_SetConfig+0x2c4>
 8007f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f7e:	d006      	beq.n	8007f8e <UART_SetConfig+0x2b2>
 8007f80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f84:	d009      	beq.n	8007f9a <UART_SetConfig+0x2be>
 8007f86:	e00b      	b.n	8007fa0 <UART_SetConfig+0x2c4>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	77fb      	strb	r3, [r7, #31]
 8007f8c:	e04d      	b.n	800802a <UART_SetConfig+0x34e>
 8007f8e:	2302      	movs	r3, #2
 8007f90:	77fb      	strb	r3, [r7, #31]
 8007f92:	e04a      	b.n	800802a <UART_SetConfig+0x34e>
 8007f94:	2304      	movs	r3, #4
 8007f96:	77fb      	strb	r3, [r7, #31]
 8007f98:	e047      	b.n	800802a <UART_SetConfig+0x34e>
 8007f9a:	2308      	movs	r3, #8
 8007f9c:	77fb      	strb	r3, [r7, #31]
 8007f9e:	e044      	b.n	800802a <UART_SetConfig+0x34e>
 8007fa0:	2310      	movs	r3, #16
 8007fa2:	77fb      	strb	r3, [r7, #31]
 8007fa4:	bf00      	nop
 8007fa6:	e040      	b.n	800802a <UART_SetConfig+0x34e>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a11      	ldr	r2, [pc, #68]	; (8007ff4 <UART_SetConfig+0x318>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d139      	bne.n	8008026 <UART_SetConfig+0x34a>
 8007fb2:	4b09      	ldr	r3, [pc, #36]	; (8007fd8 <UART_SetConfig+0x2fc>)
 8007fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007fbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fc0:	d027      	beq.n	8008012 <UART_SetConfig+0x336>
 8007fc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fc6:	d817      	bhi.n	8007ff8 <UART_SetConfig+0x31c>
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d01c      	beq.n	8008006 <UART_SetConfig+0x32a>
 8007fcc:	e027      	b.n	800801e <UART_SetConfig+0x342>
 8007fce:	bf00      	nop
 8007fd0:	efff69f3 	.word	0xefff69f3
 8007fd4:	40011000 	.word	0x40011000
 8007fd8:	40023800 	.word	0x40023800
 8007fdc:	40004400 	.word	0x40004400
 8007fe0:	40004800 	.word	0x40004800
 8007fe4:	40004c00 	.word	0x40004c00
 8007fe8:	40005000 	.word	0x40005000
 8007fec:	40011400 	.word	0x40011400
 8007ff0:	40007800 	.word	0x40007800
 8007ff4:	40007c00 	.word	0x40007c00
 8007ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ffc:	d006      	beq.n	800800c <UART_SetConfig+0x330>
 8007ffe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008002:	d009      	beq.n	8008018 <UART_SetConfig+0x33c>
 8008004:	e00b      	b.n	800801e <UART_SetConfig+0x342>
 8008006:	2300      	movs	r3, #0
 8008008:	77fb      	strb	r3, [r7, #31]
 800800a:	e00e      	b.n	800802a <UART_SetConfig+0x34e>
 800800c:	2302      	movs	r3, #2
 800800e:	77fb      	strb	r3, [r7, #31]
 8008010:	e00b      	b.n	800802a <UART_SetConfig+0x34e>
 8008012:	2304      	movs	r3, #4
 8008014:	77fb      	strb	r3, [r7, #31]
 8008016:	e008      	b.n	800802a <UART_SetConfig+0x34e>
 8008018:	2308      	movs	r3, #8
 800801a:	77fb      	strb	r3, [r7, #31]
 800801c:	e005      	b.n	800802a <UART_SetConfig+0x34e>
 800801e:	2310      	movs	r3, #16
 8008020:	77fb      	strb	r3, [r7, #31]
 8008022:	bf00      	nop
 8008024:	e001      	b.n	800802a <UART_SetConfig+0x34e>
 8008026:	2310      	movs	r3, #16
 8008028:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008032:	d17f      	bne.n	8008134 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008034:	7ffb      	ldrb	r3, [r7, #31]
 8008036:	2b08      	cmp	r3, #8
 8008038:	d85c      	bhi.n	80080f4 <UART_SetConfig+0x418>
 800803a:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <UART_SetConfig+0x364>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	08008065 	.word	0x08008065
 8008044:	08008085 	.word	0x08008085
 8008048:	080080a5 	.word	0x080080a5
 800804c:	080080f5 	.word	0x080080f5
 8008050:	080080bd 	.word	0x080080bd
 8008054:	080080f5 	.word	0x080080f5
 8008058:	080080f5 	.word	0x080080f5
 800805c:	080080f5 	.word	0x080080f5
 8008060:	080080dd 	.word	0x080080dd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008064:	f7fd f92a 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 8008068:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	005a      	lsls	r2, r3, #1
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	085b      	lsrs	r3, r3, #1
 8008074:	441a      	add	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	fbb2 f3f3 	udiv	r3, r2, r3
 800807e:	b29b      	uxth	r3, r3
 8008080:	61bb      	str	r3, [r7, #24]
        break;
 8008082:	e03a      	b.n	80080fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008084:	f7fd f92e 	bl	80052e4 <HAL_RCC_GetPCLK2Freq>
 8008088:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	005a      	lsls	r2, r3, #1
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	085b      	lsrs	r3, r3, #1
 8008094:	441a      	add	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	fbb2 f3f3 	udiv	r3, r2, r3
 800809e:	b29b      	uxth	r3, r3
 80080a0:	61bb      	str	r3, [r7, #24]
        break;
 80080a2:	e02a      	b.n	80080fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	085a      	lsrs	r2, r3, #1
 80080aa:	4b5f      	ldr	r3, [pc, #380]	; (8008228 <UART_SetConfig+0x54c>)
 80080ac:	4413      	add	r3, r2
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	6852      	ldr	r2, [r2, #4]
 80080b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	61bb      	str	r3, [r7, #24]
        break;
 80080ba:	e01e      	b.n	80080fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080bc:	f7fd f81a 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 80080c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	005a      	lsls	r2, r3, #1
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	085b      	lsrs	r3, r3, #1
 80080cc:	441a      	add	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	61bb      	str	r3, [r7, #24]
        break;
 80080da:	e00e      	b.n	80080fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	085b      	lsrs	r3, r3, #1
 80080e2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	61bb      	str	r3, [r7, #24]
        break;
 80080f2:	e002      	b.n	80080fa <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	75fb      	strb	r3, [r7, #23]
        break;
 80080f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	2b0f      	cmp	r3, #15
 80080fe:	d916      	bls.n	800812e <UART_SetConfig+0x452>
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008106:	d212      	bcs.n	800812e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	b29b      	uxth	r3, r3
 800810c:	f023 030f 	bic.w	r3, r3, #15
 8008110:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	085b      	lsrs	r3, r3, #1
 8008116:	b29b      	uxth	r3, r3
 8008118:	f003 0307 	and.w	r3, r3, #7
 800811c:	b29a      	uxth	r2, r3
 800811e:	897b      	ldrh	r3, [r7, #10]
 8008120:	4313      	orrs	r3, r2
 8008122:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	897a      	ldrh	r2, [r7, #10]
 800812a:	60da      	str	r2, [r3, #12]
 800812c:	e070      	b.n	8008210 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	75fb      	strb	r3, [r7, #23]
 8008132:	e06d      	b.n	8008210 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008134:	7ffb      	ldrb	r3, [r7, #31]
 8008136:	2b08      	cmp	r3, #8
 8008138:	d859      	bhi.n	80081ee <UART_SetConfig+0x512>
 800813a:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <UART_SetConfig+0x464>)
 800813c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008140:	08008165 	.word	0x08008165
 8008144:	08008183 	.word	0x08008183
 8008148:	080081a1 	.word	0x080081a1
 800814c:	080081ef 	.word	0x080081ef
 8008150:	080081b9 	.word	0x080081b9
 8008154:	080081ef 	.word	0x080081ef
 8008158:	080081ef 	.word	0x080081ef
 800815c:	080081ef 	.word	0x080081ef
 8008160:	080081d7 	.word	0x080081d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008164:	f7fd f8aa 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 8008168:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	085a      	lsrs	r2, r3, #1
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	441a      	add	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	fbb2 f3f3 	udiv	r3, r2, r3
 800817c:	b29b      	uxth	r3, r3
 800817e:	61bb      	str	r3, [r7, #24]
        break;
 8008180:	e038      	b.n	80081f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008182:	f7fd f8af 	bl	80052e4 <HAL_RCC_GetPCLK2Freq>
 8008186:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	085a      	lsrs	r2, r3, #1
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	441a      	add	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	fbb2 f3f3 	udiv	r3, r2, r3
 800819a:	b29b      	uxth	r3, r3
 800819c:	61bb      	str	r3, [r7, #24]
        break;
 800819e:	e029      	b.n	80081f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	085a      	lsrs	r2, r3, #1
 80081a6:	4b21      	ldr	r3, [pc, #132]	; (800822c <UART_SetConfig+0x550>)
 80081a8:	4413      	add	r3, r2
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	6852      	ldr	r2, [r2, #4]
 80081ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	61bb      	str	r3, [r7, #24]
        break;
 80081b6:	e01d      	b.n	80081f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081b8:	f7fc ff9c 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 80081bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	085a      	lsrs	r2, r3, #1
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	441a      	add	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	61bb      	str	r3, [r7, #24]
        break;
 80081d4:	e00e      	b.n	80081f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	085b      	lsrs	r3, r3, #1
 80081dc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	61bb      	str	r3, [r7, #24]
        break;
 80081ec:	e002      	b.n	80081f4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	75fb      	strb	r3, [r7, #23]
        break;
 80081f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	2b0f      	cmp	r3, #15
 80081f8:	d908      	bls.n	800820c <UART_SetConfig+0x530>
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008200:	d204      	bcs.n	800820c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	69ba      	ldr	r2, [r7, #24]
 8008208:	60da      	str	r2, [r3, #12]
 800820a:	e001      	b.n	8008210 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800821c:	7dfb      	ldrb	r3, [r7, #23]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3720      	adds	r7, #32
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	01e84800 	.word	0x01e84800
 800822c:	00f42400 	.word	0x00f42400

08008230 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00a      	beq.n	800825a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	430a      	orrs	r2, r1
 8008258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00a      	beq.n	800827c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	430a      	orrs	r2, r1
 800827a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	f003 0304 	and.w	r3, r3, #4
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00a      	beq.n	800829e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	430a      	orrs	r2, r1
 800829c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	f003 0308 	and.w	r3, r3, #8
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00a      	beq.n	80082c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	430a      	orrs	r2, r1
 80082be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c4:	f003 0310 	and.w	r3, r3, #16
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00a      	beq.n	80082e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	430a      	orrs	r2, r1
 80082e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e6:	f003 0320 	and.w	r3, r3, #32
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00a      	beq.n	8008304 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	430a      	orrs	r2, r1
 8008302:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800830c:	2b00      	cmp	r3, #0
 800830e:	d01a      	beq.n	8008346 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	430a      	orrs	r2, r1
 8008324:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800832e:	d10a      	bne.n	8008346 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	430a      	orrs	r2, r1
 8008344:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00a      	beq.n	8008368 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	430a      	orrs	r2, r1
 8008366:	605a      	str	r2, [r3, #4]
  }
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af02      	add	r7, sp, #8
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008382:	f7fb f819 	bl	80033b8 <HAL_GetTick>
 8008386:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0308 	and.w	r3, r3, #8
 8008392:	2b08      	cmp	r3, #8
 8008394:	d10e      	bne.n	80083b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008396:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f814 	bl	80083d2 <UART_WaitOnFlagUntilTimeout>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e00a      	b.n	80083ca <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2220      	movs	r2, #32
 80083b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b084      	sub	sp, #16
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	60f8      	str	r0, [r7, #12]
 80083da:	60b9      	str	r1, [r7, #8]
 80083dc:	603b      	str	r3, [r7, #0]
 80083de:	4613      	mov	r3, r2
 80083e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083e2:	e05d      	b.n	80084a0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ea:	d059      	beq.n	80084a0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ec:	f7fa ffe4 	bl	80033b8 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d302      	bcc.n	8008402 <UART_WaitOnFlagUntilTimeout+0x30>
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d11b      	bne.n	800843a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008410:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f022 0201 	bic.w	r2, r2, #1
 8008420:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2220      	movs	r2, #32
 8008426:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2220      	movs	r2, #32
 800842c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e042      	b.n	80084c0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	d02b      	beq.n	80084a0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008456:	d123      	bne.n	80084a0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008460:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008470:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	689a      	ldr	r2, [r3, #8]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 0201 	bic.w	r2, r2, #1
 8008480:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2220      	movs	r2, #32
 8008486:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2220      	movs	r2, #32
 800848c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2220      	movs	r2, #32
 8008492:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800849c:	2303      	movs	r3, #3
 800849e:	e00f      	b.n	80084c0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	69da      	ldr	r2, [r3, #28]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	4013      	ands	r3, r2
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	bf0c      	ite	eq
 80084b0:	2301      	moveq	r3, #1
 80084b2:	2300      	movne	r3, #0
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	461a      	mov	r2, r3
 80084b8:	79fb      	ldrb	r3, [r7, #7]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d092      	beq.n	80083e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80084de:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689a      	ldr	r2, [r3, #8]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 0201 	bic.w	r2, r2, #1
 80084ee:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2220      	movs	r2, #32
 80084f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	661a      	str	r2, [r3, #96]	; 0x60
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008514:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f7ff fbce 	bl	8007cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800852c:	bf00      	nop
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800854a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2220      	movs	r2, #32
 8008550:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7ff fbab 	bl	8007cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800855e:	bf00      	nop
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008574:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800857a:	2b22      	cmp	r3, #34	; 0x22
 800857c:	d13a      	bne.n	80085f4 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008584:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008586:	89bb      	ldrh	r3, [r7, #12]
 8008588:	b2d9      	uxtb	r1, r3
 800858a:	89fb      	ldrh	r3, [r7, #14]
 800858c:	b2da      	uxtb	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008592:	400a      	ands	r2, r1
 8008594:	b2d2      	uxtb	r2, r2
 8008596:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800859c:	1c5a      	adds	r2, r3, #1
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	3b01      	subs	r3, #1
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d121      	bne.n	8008604 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80085ce:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	689a      	ldr	r2, [r3, #8]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 0201 	bic.w	r2, r2, #1
 80085de:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2220      	movs	r2, #32
 80085e4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7f9 fe95 	bl	800231c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085f2:	e007      	b.n	8008604 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	699a      	ldr	r2, [r3, #24]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f042 0208 	orr.w	r2, r2, #8
 8008602:	619a      	str	r2, [r3, #24]
}
 8008604:	bf00      	nop
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800861a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008620:	2b22      	cmp	r3, #34	; 0x22
 8008622:	d13a      	bne.n	800869a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008630:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008632:	89ba      	ldrh	r2, [r7, #12]
 8008634:	89fb      	ldrh	r3, [r7, #14]
 8008636:	4013      	ands	r3, r2
 8008638:	b29a      	uxth	r2, r3
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008642:	1c9a      	adds	r2, r3, #2
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800864e:	b29b      	uxth	r3, r3
 8008650:	3b01      	subs	r3, #1
 8008652:	b29a      	uxth	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008660:	b29b      	uxth	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d121      	bne.n	80086aa <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008674:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	689a      	ldr	r2, [r3, #8]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f022 0201 	bic.w	r2, r2, #1
 8008684:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2220      	movs	r2, #32
 800868a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7f9 fe42 	bl	800231c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008698:	e007      	b.n	80086aa <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	699a      	ldr	r2, [r3, #24]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f042 0208 	orr.w	r2, r2, #8
 80086a8:	619a      	str	r2, [r3, #24]
}
 80086aa:	bf00      	nop
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
	...

080086b4 <arm_pid_init_f32>:
 80086b4:	ed90 7a08 	vldr	s14, [r0, #32]
 80086b8:	edd0 7a06 	vldr	s15, [r0, #24]
 80086bc:	ed90 6a07 	vldr	s12, [r0, #28]
 80086c0:	eef1 6a67 	vneg.f32	s13, s15
 80086c4:	ed80 7a02 	vstr	s14, [r0, #8]
 80086c8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80086cc:	ee37 6a07 	vadd.f32	s12, s14, s14
 80086d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086d4:	ee36 7ac6 	vsub.f32	s14, s13, s12
 80086d8:	edc0 7a00 	vstr	s15, [r0]
 80086dc:	ed80 7a01 	vstr	s14, [r0, #4]
 80086e0:	b901      	cbnz	r1, 80086e4 <arm_pid_init_f32+0x30>
 80086e2:	4770      	bx	lr
 80086e4:	2300      	movs	r3, #0
 80086e6:	60c3      	str	r3, [r0, #12]
 80086e8:	6103      	str	r3, [r0, #16]
 80086ea:	6143      	str	r3, [r0, #20]
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop

080086f0 <__errno>:
 80086f0:	4b01      	ldr	r3, [pc, #4]	; (80086f8 <__errno+0x8>)
 80086f2:	6818      	ldr	r0, [r3, #0]
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	2000001c 	.word	0x2000001c

080086fc <__libc_init_array>:
 80086fc:	b570      	push	{r4, r5, r6, lr}
 80086fe:	4e0d      	ldr	r6, [pc, #52]	; (8008734 <__libc_init_array+0x38>)
 8008700:	4c0d      	ldr	r4, [pc, #52]	; (8008738 <__libc_init_array+0x3c>)
 8008702:	1ba4      	subs	r4, r4, r6
 8008704:	10a4      	asrs	r4, r4, #2
 8008706:	2500      	movs	r5, #0
 8008708:	42a5      	cmp	r5, r4
 800870a:	d109      	bne.n	8008720 <__libc_init_array+0x24>
 800870c:	4e0b      	ldr	r6, [pc, #44]	; (800873c <__libc_init_array+0x40>)
 800870e:	4c0c      	ldr	r4, [pc, #48]	; (8008740 <__libc_init_array+0x44>)
 8008710:	f003 fd58 	bl	800c1c4 <_init>
 8008714:	1ba4      	subs	r4, r4, r6
 8008716:	10a4      	asrs	r4, r4, #2
 8008718:	2500      	movs	r5, #0
 800871a:	42a5      	cmp	r5, r4
 800871c:	d105      	bne.n	800872a <__libc_init_array+0x2e>
 800871e:	bd70      	pop	{r4, r5, r6, pc}
 8008720:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008724:	4798      	blx	r3
 8008726:	3501      	adds	r5, #1
 8008728:	e7ee      	b.n	8008708 <__libc_init_array+0xc>
 800872a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800872e:	4798      	blx	r3
 8008730:	3501      	adds	r5, #1
 8008732:	e7f2      	b.n	800871a <__libc_init_array+0x1e>
 8008734:	0800c4c8 	.word	0x0800c4c8
 8008738:	0800c4c8 	.word	0x0800c4c8
 800873c:	0800c4c8 	.word	0x0800c4c8
 8008740:	0800c4cc 	.word	0x0800c4cc

08008744 <memset>:
 8008744:	4402      	add	r2, r0
 8008746:	4603      	mov	r3, r0
 8008748:	4293      	cmp	r3, r2
 800874a:	d100      	bne.n	800874e <memset+0xa>
 800874c:	4770      	bx	lr
 800874e:	f803 1b01 	strb.w	r1, [r3], #1
 8008752:	e7f9      	b.n	8008748 <memset+0x4>

08008754 <__cvt>:
 8008754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008758:	ec55 4b10 	vmov	r4, r5, d0
 800875c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800875e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008762:	2d00      	cmp	r5, #0
 8008764:	460e      	mov	r6, r1
 8008766:	4691      	mov	r9, r2
 8008768:	4619      	mov	r1, r3
 800876a:	bfb8      	it	lt
 800876c:	4622      	movlt	r2, r4
 800876e:	462b      	mov	r3, r5
 8008770:	f027 0720 	bic.w	r7, r7, #32
 8008774:	bfbb      	ittet	lt
 8008776:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800877a:	461d      	movlt	r5, r3
 800877c:	2300      	movge	r3, #0
 800877e:	232d      	movlt	r3, #45	; 0x2d
 8008780:	bfb8      	it	lt
 8008782:	4614      	movlt	r4, r2
 8008784:	2f46      	cmp	r7, #70	; 0x46
 8008786:	700b      	strb	r3, [r1, #0]
 8008788:	d004      	beq.n	8008794 <__cvt+0x40>
 800878a:	2f45      	cmp	r7, #69	; 0x45
 800878c:	d100      	bne.n	8008790 <__cvt+0x3c>
 800878e:	3601      	adds	r6, #1
 8008790:	2102      	movs	r1, #2
 8008792:	e000      	b.n	8008796 <__cvt+0x42>
 8008794:	2103      	movs	r1, #3
 8008796:	ab03      	add	r3, sp, #12
 8008798:	9301      	str	r3, [sp, #4]
 800879a:	ab02      	add	r3, sp, #8
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	4632      	mov	r2, r6
 80087a0:	4653      	mov	r3, sl
 80087a2:	ec45 4b10 	vmov	d0, r4, r5
 80087a6:	f001 fd77 	bl	800a298 <_dtoa_r>
 80087aa:	2f47      	cmp	r7, #71	; 0x47
 80087ac:	4680      	mov	r8, r0
 80087ae:	d102      	bne.n	80087b6 <__cvt+0x62>
 80087b0:	f019 0f01 	tst.w	r9, #1
 80087b4:	d026      	beq.n	8008804 <__cvt+0xb0>
 80087b6:	2f46      	cmp	r7, #70	; 0x46
 80087b8:	eb08 0906 	add.w	r9, r8, r6
 80087bc:	d111      	bne.n	80087e2 <__cvt+0x8e>
 80087be:	f898 3000 	ldrb.w	r3, [r8]
 80087c2:	2b30      	cmp	r3, #48	; 0x30
 80087c4:	d10a      	bne.n	80087dc <__cvt+0x88>
 80087c6:	2200      	movs	r2, #0
 80087c8:	2300      	movs	r3, #0
 80087ca:	4620      	mov	r0, r4
 80087cc:	4629      	mov	r1, r5
 80087ce:	f7f8 f99b 	bl	8000b08 <__aeabi_dcmpeq>
 80087d2:	b918      	cbnz	r0, 80087dc <__cvt+0x88>
 80087d4:	f1c6 0601 	rsb	r6, r6, #1
 80087d8:	f8ca 6000 	str.w	r6, [sl]
 80087dc:	f8da 3000 	ldr.w	r3, [sl]
 80087e0:	4499      	add	r9, r3
 80087e2:	2200      	movs	r2, #0
 80087e4:	2300      	movs	r3, #0
 80087e6:	4620      	mov	r0, r4
 80087e8:	4629      	mov	r1, r5
 80087ea:	f7f8 f98d 	bl	8000b08 <__aeabi_dcmpeq>
 80087ee:	b938      	cbnz	r0, 8008800 <__cvt+0xac>
 80087f0:	2230      	movs	r2, #48	; 0x30
 80087f2:	9b03      	ldr	r3, [sp, #12]
 80087f4:	454b      	cmp	r3, r9
 80087f6:	d205      	bcs.n	8008804 <__cvt+0xb0>
 80087f8:	1c59      	adds	r1, r3, #1
 80087fa:	9103      	str	r1, [sp, #12]
 80087fc:	701a      	strb	r2, [r3, #0]
 80087fe:	e7f8      	b.n	80087f2 <__cvt+0x9e>
 8008800:	f8cd 900c 	str.w	r9, [sp, #12]
 8008804:	9b03      	ldr	r3, [sp, #12]
 8008806:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008808:	eba3 0308 	sub.w	r3, r3, r8
 800880c:	4640      	mov	r0, r8
 800880e:	6013      	str	r3, [r2, #0]
 8008810:	b004      	add	sp, #16
 8008812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008816 <__exponent>:
 8008816:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008818:	2900      	cmp	r1, #0
 800881a:	4604      	mov	r4, r0
 800881c:	bfba      	itte	lt
 800881e:	4249      	neglt	r1, r1
 8008820:	232d      	movlt	r3, #45	; 0x2d
 8008822:	232b      	movge	r3, #43	; 0x2b
 8008824:	2909      	cmp	r1, #9
 8008826:	f804 2b02 	strb.w	r2, [r4], #2
 800882a:	7043      	strb	r3, [r0, #1]
 800882c:	dd20      	ble.n	8008870 <__exponent+0x5a>
 800882e:	f10d 0307 	add.w	r3, sp, #7
 8008832:	461f      	mov	r7, r3
 8008834:	260a      	movs	r6, #10
 8008836:	fb91 f5f6 	sdiv	r5, r1, r6
 800883a:	fb06 1115 	mls	r1, r6, r5, r1
 800883e:	3130      	adds	r1, #48	; 0x30
 8008840:	2d09      	cmp	r5, #9
 8008842:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008846:	f103 32ff 	add.w	r2, r3, #4294967295
 800884a:	4629      	mov	r1, r5
 800884c:	dc09      	bgt.n	8008862 <__exponent+0x4c>
 800884e:	3130      	adds	r1, #48	; 0x30
 8008850:	3b02      	subs	r3, #2
 8008852:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008856:	42bb      	cmp	r3, r7
 8008858:	4622      	mov	r2, r4
 800885a:	d304      	bcc.n	8008866 <__exponent+0x50>
 800885c:	1a10      	subs	r0, r2, r0
 800885e:	b003      	add	sp, #12
 8008860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008862:	4613      	mov	r3, r2
 8008864:	e7e7      	b.n	8008836 <__exponent+0x20>
 8008866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800886a:	f804 2b01 	strb.w	r2, [r4], #1
 800886e:	e7f2      	b.n	8008856 <__exponent+0x40>
 8008870:	2330      	movs	r3, #48	; 0x30
 8008872:	4419      	add	r1, r3
 8008874:	7083      	strb	r3, [r0, #2]
 8008876:	1d02      	adds	r2, r0, #4
 8008878:	70c1      	strb	r1, [r0, #3]
 800887a:	e7ef      	b.n	800885c <__exponent+0x46>

0800887c <_printf_float>:
 800887c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008880:	b08d      	sub	sp, #52	; 0x34
 8008882:	460c      	mov	r4, r1
 8008884:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008888:	4616      	mov	r6, r2
 800888a:	461f      	mov	r7, r3
 800888c:	4605      	mov	r5, r0
 800888e:	f002 fde7 	bl	800b460 <_localeconv_r>
 8008892:	6803      	ldr	r3, [r0, #0]
 8008894:	9304      	str	r3, [sp, #16]
 8008896:	4618      	mov	r0, r3
 8008898:	f7f7 fcba 	bl	8000210 <strlen>
 800889c:	2300      	movs	r3, #0
 800889e:	930a      	str	r3, [sp, #40]	; 0x28
 80088a0:	f8d8 3000 	ldr.w	r3, [r8]
 80088a4:	9005      	str	r0, [sp, #20]
 80088a6:	3307      	adds	r3, #7
 80088a8:	f023 0307 	bic.w	r3, r3, #7
 80088ac:	f103 0208 	add.w	r2, r3, #8
 80088b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80088b4:	f8d4 b000 	ldr.w	fp, [r4]
 80088b8:	f8c8 2000 	str.w	r2, [r8]
 80088bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80088c4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80088c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80088cc:	9307      	str	r3, [sp, #28]
 80088ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80088d2:	f04f 32ff 	mov.w	r2, #4294967295
 80088d6:	4ba7      	ldr	r3, [pc, #668]	; (8008b74 <_printf_float+0x2f8>)
 80088d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088dc:	f7f8 f946 	bl	8000b6c <__aeabi_dcmpun>
 80088e0:	bb70      	cbnz	r0, 8008940 <_printf_float+0xc4>
 80088e2:	f04f 32ff 	mov.w	r2, #4294967295
 80088e6:	4ba3      	ldr	r3, [pc, #652]	; (8008b74 <_printf_float+0x2f8>)
 80088e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088ec:	f7f8 f920 	bl	8000b30 <__aeabi_dcmple>
 80088f0:	bb30      	cbnz	r0, 8008940 <_printf_float+0xc4>
 80088f2:	2200      	movs	r2, #0
 80088f4:	2300      	movs	r3, #0
 80088f6:	4640      	mov	r0, r8
 80088f8:	4649      	mov	r1, r9
 80088fa:	f7f8 f90f 	bl	8000b1c <__aeabi_dcmplt>
 80088fe:	b110      	cbz	r0, 8008906 <_printf_float+0x8a>
 8008900:	232d      	movs	r3, #45	; 0x2d
 8008902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008906:	4a9c      	ldr	r2, [pc, #624]	; (8008b78 <_printf_float+0x2fc>)
 8008908:	4b9c      	ldr	r3, [pc, #624]	; (8008b7c <_printf_float+0x300>)
 800890a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800890e:	bf8c      	ite	hi
 8008910:	4690      	movhi	r8, r2
 8008912:	4698      	movls	r8, r3
 8008914:	2303      	movs	r3, #3
 8008916:	f02b 0204 	bic.w	r2, fp, #4
 800891a:	6123      	str	r3, [r4, #16]
 800891c:	6022      	str	r2, [r4, #0]
 800891e:	f04f 0900 	mov.w	r9, #0
 8008922:	9700      	str	r7, [sp, #0]
 8008924:	4633      	mov	r3, r6
 8008926:	aa0b      	add	r2, sp, #44	; 0x2c
 8008928:	4621      	mov	r1, r4
 800892a:	4628      	mov	r0, r5
 800892c:	f000 f9e6 	bl	8008cfc <_printf_common>
 8008930:	3001      	adds	r0, #1
 8008932:	f040 808d 	bne.w	8008a50 <_printf_float+0x1d4>
 8008936:	f04f 30ff 	mov.w	r0, #4294967295
 800893a:	b00d      	add	sp, #52	; 0x34
 800893c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008940:	4642      	mov	r2, r8
 8008942:	464b      	mov	r3, r9
 8008944:	4640      	mov	r0, r8
 8008946:	4649      	mov	r1, r9
 8008948:	f7f8 f910 	bl	8000b6c <__aeabi_dcmpun>
 800894c:	b110      	cbz	r0, 8008954 <_printf_float+0xd8>
 800894e:	4a8c      	ldr	r2, [pc, #560]	; (8008b80 <_printf_float+0x304>)
 8008950:	4b8c      	ldr	r3, [pc, #560]	; (8008b84 <_printf_float+0x308>)
 8008952:	e7da      	b.n	800890a <_printf_float+0x8e>
 8008954:	6861      	ldr	r1, [r4, #4]
 8008956:	1c4b      	adds	r3, r1, #1
 8008958:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800895c:	a80a      	add	r0, sp, #40	; 0x28
 800895e:	d13e      	bne.n	80089de <_printf_float+0x162>
 8008960:	2306      	movs	r3, #6
 8008962:	6063      	str	r3, [r4, #4]
 8008964:	2300      	movs	r3, #0
 8008966:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800896a:	ab09      	add	r3, sp, #36	; 0x24
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	ec49 8b10 	vmov	d0, r8, r9
 8008972:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008976:	6022      	str	r2, [r4, #0]
 8008978:	f8cd a004 	str.w	sl, [sp, #4]
 800897c:	6861      	ldr	r1, [r4, #4]
 800897e:	4628      	mov	r0, r5
 8008980:	f7ff fee8 	bl	8008754 <__cvt>
 8008984:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008988:	2b47      	cmp	r3, #71	; 0x47
 800898a:	4680      	mov	r8, r0
 800898c:	d109      	bne.n	80089a2 <_printf_float+0x126>
 800898e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008990:	1cd8      	adds	r0, r3, #3
 8008992:	db02      	blt.n	800899a <_printf_float+0x11e>
 8008994:	6862      	ldr	r2, [r4, #4]
 8008996:	4293      	cmp	r3, r2
 8008998:	dd47      	ble.n	8008a2a <_printf_float+0x1ae>
 800899a:	f1aa 0a02 	sub.w	sl, sl, #2
 800899e:	fa5f fa8a 	uxtb.w	sl, sl
 80089a2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80089a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089a8:	d824      	bhi.n	80089f4 <_printf_float+0x178>
 80089aa:	3901      	subs	r1, #1
 80089ac:	4652      	mov	r2, sl
 80089ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80089b2:	9109      	str	r1, [sp, #36]	; 0x24
 80089b4:	f7ff ff2f 	bl	8008816 <__exponent>
 80089b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089ba:	1813      	adds	r3, r2, r0
 80089bc:	2a01      	cmp	r2, #1
 80089be:	4681      	mov	r9, r0
 80089c0:	6123      	str	r3, [r4, #16]
 80089c2:	dc02      	bgt.n	80089ca <_printf_float+0x14e>
 80089c4:	6822      	ldr	r2, [r4, #0]
 80089c6:	07d1      	lsls	r1, r2, #31
 80089c8:	d501      	bpl.n	80089ce <_printf_float+0x152>
 80089ca:	3301      	adds	r3, #1
 80089cc:	6123      	str	r3, [r4, #16]
 80089ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d0a5      	beq.n	8008922 <_printf_float+0xa6>
 80089d6:	232d      	movs	r3, #45	; 0x2d
 80089d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089dc:	e7a1      	b.n	8008922 <_printf_float+0xa6>
 80089de:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80089e2:	f000 8177 	beq.w	8008cd4 <_printf_float+0x458>
 80089e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80089ea:	d1bb      	bne.n	8008964 <_printf_float+0xe8>
 80089ec:	2900      	cmp	r1, #0
 80089ee:	d1b9      	bne.n	8008964 <_printf_float+0xe8>
 80089f0:	2301      	movs	r3, #1
 80089f2:	e7b6      	b.n	8008962 <_printf_float+0xe6>
 80089f4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80089f8:	d119      	bne.n	8008a2e <_printf_float+0x1b2>
 80089fa:	2900      	cmp	r1, #0
 80089fc:	6863      	ldr	r3, [r4, #4]
 80089fe:	dd0c      	ble.n	8008a1a <_printf_float+0x19e>
 8008a00:	6121      	str	r1, [r4, #16]
 8008a02:	b913      	cbnz	r3, 8008a0a <_printf_float+0x18e>
 8008a04:	6822      	ldr	r2, [r4, #0]
 8008a06:	07d2      	lsls	r2, r2, #31
 8008a08:	d502      	bpl.n	8008a10 <_printf_float+0x194>
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	440b      	add	r3, r1
 8008a0e:	6123      	str	r3, [r4, #16]
 8008a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a12:	65a3      	str	r3, [r4, #88]	; 0x58
 8008a14:	f04f 0900 	mov.w	r9, #0
 8008a18:	e7d9      	b.n	80089ce <_printf_float+0x152>
 8008a1a:	b913      	cbnz	r3, 8008a22 <_printf_float+0x1a6>
 8008a1c:	6822      	ldr	r2, [r4, #0]
 8008a1e:	07d0      	lsls	r0, r2, #31
 8008a20:	d501      	bpl.n	8008a26 <_printf_float+0x1aa>
 8008a22:	3302      	adds	r3, #2
 8008a24:	e7f3      	b.n	8008a0e <_printf_float+0x192>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e7f1      	b.n	8008a0e <_printf_float+0x192>
 8008a2a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008a2e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008a32:	4293      	cmp	r3, r2
 8008a34:	db05      	blt.n	8008a42 <_printf_float+0x1c6>
 8008a36:	6822      	ldr	r2, [r4, #0]
 8008a38:	6123      	str	r3, [r4, #16]
 8008a3a:	07d1      	lsls	r1, r2, #31
 8008a3c:	d5e8      	bpl.n	8008a10 <_printf_float+0x194>
 8008a3e:	3301      	adds	r3, #1
 8008a40:	e7e5      	b.n	8008a0e <_printf_float+0x192>
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	bfd4      	ite	le
 8008a46:	f1c3 0302 	rsble	r3, r3, #2
 8008a4a:	2301      	movgt	r3, #1
 8008a4c:	4413      	add	r3, r2
 8008a4e:	e7de      	b.n	8008a0e <_printf_float+0x192>
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	055a      	lsls	r2, r3, #21
 8008a54:	d407      	bmi.n	8008a66 <_printf_float+0x1ea>
 8008a56:	6923      	ldr	r3, [r4, #16]
 8008a58:	4642      	mov	r2, r8
 8008a5a:	4631      	mov	r1, r6
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	47b8      	blx	r7
 8008a60:	3001      	adds	r0, #1
 8008a62:	d12b      	bne.n	8008abc <_printf_float+0x240>
 8008a64:	e767      	b.n	8008936 <_printf_float+0xba>
 8008a66:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008a6a:	f240 80dc 	bls.w	8008c26 <_printf_float+0x3aa>
 8008a6e:	2200      	movs	r2, #0
 8008a70:	2300      	movs	r3, #0
 8008a72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a76:	f7f8 f847 	bl	8000b08 <__aeabi_dcmpeq>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d033      	beq.n	8008ae6 <_printf_float+0x26a>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	4a41      	ldr	r2, [pc, #260]	; (8008b88 <_printf_float+0x30c>)
 8008a82:	4631      	mov	r1, r6
 8008a84:	4628      	mov	r0, r5
 8008a86:	47b8      	blx	r7
 8008a88:	3001      	adds	r0, #1
 8008a8a:	f43f af54 	beq.w	8008936 <_printf_float+0xba>
 8008a8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a92:	429a      	cmp	r2, r3
 8008a94:	db02      	blt.n	8008a9c <_printf_float+0x220>
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	07d8      	lsls	r0, r3, #31
 8008a9a:	d50f      	bpl.n	8008abc <_printf_float+0x240>
 8008a9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008aa0:	4631      	mov	r1, r6
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	47b8      	blx	r7
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	f43f af45 	beq.w	8008936 <_printf_float+0xba>
 8008aac:	f04f 0800 	mov.w	r8, #0
 8008ab0:	f104 091a 	add.w	r9, r4, #26
 8008ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	4543      	cmp	r3, r8
 8008aba:	dc09      	bgt.n	8008ad0 <_printf_float+0x254>
 8008abc:	6823      	ldr	r3, [r4, #0]
 8008abe:	079b      	lsls	r3, r3, #30
 8008ac0:	f100 8103 	bmi.w	8008cca <_printf_float+0x44e>
 8008ac4:	68e0      	ldr	r0, [r4, #12]
 8008ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ac8:	4298      	cmp	r0, r3
 8008aca:	bfb8      	it	lt
 8008acc:	4618      	movlt	r0, r3
 8008ace:	e734      	b.n	800893a <_printf_float+0xbe>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	464a      	mov	r2, r9
 8008ad4:	4631      	mov	r1, r6
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	47b8      	blx	r7
 8008ada:	3001      	adds	r0, #1
 8008adc:	f43f af2b 	beq.w	8008936 <_printf_float+0xba>
 8008ae0:	f108 0801 	add.w	r8, r8, #1
 8008ae4:	e7e6      	b.n	8008ab4 <_printf_float+0x238>
 8008ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	dc2b      	bgt.n	8008b44 <_printf_float+0x2c8>
 8008aec:	2301      	movs	r3, #1
 8008aee:	4a26      	ldr	r2, [pc, #152]	; (8008b88 <_printf_float+0x30c>)
 8008af0:	4631      	mov	r1, r6
 8008af2:	4628      	mov	r0, r5
 8008af4:	47b8      	blx	r7
 8008af6:	3001      	adds	r0, #1
 8008af8:	f43f af1d 	beq.w	8008936 <_printf_float+0xba>
 8008afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008afe:	b923      	cbnz	r3, 8008b0a <_printf_float+0x28e>
 8008b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b02:	b913      	cbnz	r3, 8008b0a <_printf_float+0x28e>
 8008b04:	6823      	ldr	r3, [r4, #0]
 8008b06:	07d9      	lsls	r1, r3, #31
 8008b08:	d5d8      	bpl.n	8008abc <_printf_float+0x240>
 8008b0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b0e:	4631      	mov	r1, r6
 8008b10:	4628      	mov	r0, r5
 8008b12:	47b8      	blx	r7
 8008b14:	3001      	adds	r0, #1
 8008b16:	f43f af0e 	beq.w	8008936 <_printf_float+0xba>
 8008b1a:	f04f 0900 	mov.w	r9, #0
 8008b1e:	f104 0a1a 	add.w	sl, r4, #26
 8008b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b24:	425b      	negs	r3, r3
 8008b26:	454b      	cmp	r3, r9
 8008b28:	dc01      	bgt.n	8008b2e <_printf_float+0x2b2>
 8008b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b2c:	e794      	b.n	8008a58 <_printf_float+0x1dc>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	4652      	mov	r2, sl
 8008b32:	4631      	mov	r1, r6
 8008b34:	4628      	mov	r0, r5
 8008b36:	47b8      	blx	r7
 8008b38:	3001      	adds	r0, #1
 8008b3a:	f43f aefc 	beq.w	8008936 <_printf_float+0xba>
 8008b3e:	f109 0901 	add.w	r9, r9, #1
 8008b42:	e7ee      	b.n	8008b22 <_printf_float+0x2a6>
 8008b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	bfa8      	it	ge
 8008b4c:	461a      	movge	r2, r3
 8008b4e:	2a00      	cmp	r2, #0
 8008b50:	4691      	mov	r9, r2
 8008b52:	dd07      	ble.n	8008b64 <_printf_float+0x2e8>
 8008b54:	4613      	mov	r3, r2
 8008b56:	4631      	mov	r1, r6
 8008b58:	4642      	mov	r2, r8
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	47b8      	blx	r7
 8008b5e:	3001      	adds	r0, #1
 8008b60:	f43f aee9 	beq.w	8008936 <_printf_float+0xba>
 8008b64:	f104 031a 	add.w	r3, r4, #26
 8008b68:	f04f 0b00 	mov.w	fp, #0
 8008b6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b70:	9306      	str	r3, [sp, #24]
 8008b72:	e015      	b.n	8008ba0 <_printf_float+0x324>
 8008b74:	7fefffff 	.word	0x7fefffff
 8008b78:	0800c20c 	.word	0x0800c20c
 8008b7c:	0800c208 	.word	0x0800c208
 8008b80:	0800c214 	.word	0x0800c214
 8008b84:	0800c210 	.word	0x0800c210
 8008b88:	0800c218 	.word	0x0800c218
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	9a06      	ldr	r2, [sp, #24]
 8008b90:	4631      	mov	r1, r6
 8008b92:	4628      	mov	r0, r5
 8008b94:	47b8      	blx	r7
 8008b96:	3001      	adds	r0, #1
 8008b98:	f43f aecd 	beq.w	8008936 <_printf_float+0xba>
 8008b9c:	f10b 0b01 	add.w	fp, fp, #1
 8008ba0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008ba4:	ebaa 0309 	sub.w	r3, sl, r9
 8008ba8:	455b      	cmp	r3, fp
 8008baa:	dcef      	bgt.n	8008b8c <_printf_float+0x310>
 8008bac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	44d0      	add	r8, sl
 8008bb4:	db15      	blt.n	8008be2 <_printf_float+0x366>
 8008bb6:	6823      	ldr	r3, [r4, #0]
 8008bb8:	07da      	lsls	r2, r3, #31
 8008bba:	d412      	bmi.n	8008be2 <_printf_float+0x366>
 8008bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bc0:	eba3 020a 	sub.w	r2, r3, sl
 8008bc4:	eba3 0a01 	sub.w	sl, r3, r1
 8008bc8:	4592      	cmp	sl, r2
 8008bca:	bfa8      	it	ge
 8008bcc:	4692      	movge	sl, r2
 8008bce:	f1ba 0f00 	cmp.w	sl, #0
 8008bd2:	dc0e      	bgt.n	8008bf2 <_printf_float+0x376>
 8008bd4:	f04f 0800 	mov.w	r8, #0
 8008bd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bdc:	f104 091a 	add.w	r9, r4, #26
 8008be0:	e019      	b.n	8008c16 <_printf_float+0x39a>
 8008be2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008be6:	4631      	mov	r1, r6
 8008be8:	4628      	mov	r0, r5
 8008bea:	47b8      	blx	r7
 8008bec:	3001      	adds	r0, #1
 8008bee:	d1e5      	bne.n	8008bbc <_printf_float+0x340>
 8008bf0:	e6a1      	b.n	8008936 <_printf_float+0xba>
 8008bf2:	4653      	mov	r3, sl
 8008bf4:	4642      	mov	r2, r8
 8008bf6:	4631      	mov	r1, r6
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	47b8      	blx	r7
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	d1e9      	bne.n	8008bd4 <_printf_float+0x358>
 8008c00:	e699      	b.n	8008936 <_printf_float+0xba>
 8008c02:	2301      	movs	r3, #1
 8008c04:	464a      	mov	r2, r9
 8008c06:	4631      	mov	r1, r6
 8008c08:	4628      	mov	r0, r5
 8008c0a:	47b8      	blx	r7
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	f43f ae92 	beq.w	8008936 <_printf_float+0xba>
 8008c12:	f108 0801 	add.w	r8, r8, #1
 8008c16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c1a:	1a9b      	subs	r3, r3, r2
 8008c1c:	eba3 030a 	sub.w	r3, r3, sl
 8008c20:	4543      	cmp	r3, r8
 8008c22:	dcee      	bgt.n	8008c02 <_printf_float+0x386>
 8008c24:	e74a      	b.n	8008abc <_printf_float+0x240>
 8008c26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c28:	2a01      	cmp	r2, #1
 8008c2a:	dc01      	bgt.n	8008c30 <_printf_float+0x3b4>
 8008c2c:	07db      	lsls	r3, r3, #31
 8008c2e:	d53a      	bpl.n	8008ca6 <_printf_float+0x42a>
 8008c30:	2301      	movs	r3, #1
 8008c32:	4642      	mov	r2, r8
 8008c34:	4631      	mov	r1, r6
 8008c36:	4628      	mov	r0, r5
 8008c38:	47b8      	blx	r7
 8008c3a:	3001      	adds	r0, #1
 8008c3c:	f43f ae7b 	beq.w	8008936 <_printf_float+0xba>
 8008c40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c44:	4631      	mov	r1, r6
 8008c46:	4628      	mov	r0, r5
 8008c48:	47b8      	blx	r7
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	f108 0801 	add.w	r8, r8, #1
 8008c50:	f43f ae71 	beq.w	8008936 <_printf_float+0xba>
 8008c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c56:	2200      	movs	r2, #0
 8008c58:	f103 3aff 	add.w	sl, r3, #4294967295
 8008c5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c60:	2300      	movs	r3, #0
 8008c62:	f7f7 ff51 	bl	8000b08 <__aeabi_dcmpeq>
 8008c66:	b9c8      	cbnz	r0, 8008c9c <_printf_float+0x420>
 8008c68:	4653      	mov	r3, sl
 8008c6a:	4642      	mov	r2, r8
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	4628      	mov	r0, r5
 8008c70:	47b8      	blx	r7
 8008c72:	3001      	adds	r0, #1
 8008c74:	d10e      	bne.n	8008c94 <_printf_float+0x418>
 8008c76:	e65e      	b.n	8008936 <_printf_float+0xba>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	4652      	mov	r2, sl
 8008c7c:	4631      	mov	r1, r6
 8008c7e:	4628      	mov	r0, r5
 8008c80:	47b8      	blx	r7
 8008c82:	3001      	adds	r0, #1
 8008c84:	f43f ae57 	beq.w	8008936 <_printf_float+0xba>
 8008c88:	f108 0801 	add.w	r8, r8, #1
 8008c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	4543      	cmp	r3, r8
 8008c92:	dcf1      	bgt.n	8008c78 <_printf_float+0x3fc>
 8008c94:	464b      	mov	r3, r9
 8008c96:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008c9a:	e6de      	b.n	8008a5a <_printf_float+0x1de>
 8008c9c:	f04f 0800 	mov.w	r8, #0
 8008ca0:	f104 0a1a 	add.w	sl, r4, #26
 8008ca4:	e7f2      	b.n	8008c8c <_printf_float+0x410>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e7df      	b.n	8008c6a <_printf_float+0x3ee>
 8008caa:	2301      	movs	r3, #1
 8008cac:	464a      	mov	r2, r9
 8008cae:	4631      	mov	r1, r6
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	47b8      	blx	r7
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	f43f ae3e 	beq.w	8008936 <_printf_float+0xba>
 8008cba:	f108 0801 	add.w	r8, r8, #1
 8008cbe:	68e3      	ldr	r3, [r4, #12]
 8008cc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cc2:	1a9b      	subs	r3, r3, r2
 8008cc4:	4543      	cmp	r3, r8
 8008cc6:	dcf0      	bgt.n	8008caa <_printf_float+0x42e>
 8008cc8:	e6fc      	b.n	8008ac4 <_printf_float+0x248>
 8008cca:	f04f 0800 	mov.w	r8, #0
 8008cce:	f104 0919 	add.w	r9, r4, #25
 8008cd2:	e7f4      	b.n	8008cbe <_printf_float+0x442>
 8008cd4:	2900      	cmp	r1, #0
 8008cd6:	f43f ae8b 	beq.w	80089f0 <_printf_float+0x174>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008ce0:	ab09      	add	r3, sp, #36	; 0x24
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	ec49 8b10 	vmov	d0, r8, r9
 8008ce8:	6022      	str	r2, [r4, #0]
 8008cea:	f8cd a004 	str.w	sl, [sp, #4]
 8008cee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	f7ff fd2e 	bl	8008754 <__cvt>
 8008cf8:	4680      	mov	r8, r0
 8008cfa:	e648      	b.n	800898e <_printf_float+0x112>

08008cfc <_printf_common>:
 8008cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d00:	4691      	mov	r9, r2
 8008d02:	461f      	mov	r7, r3
 8008d04:	688a      	ldr	r2, [r1, #8]
 8008d06:	690b      	ldr	r3, [r1, #16]
 8008d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	bfb8      	it	lt
 8008d10:	4613      	movlt	r3, r2
 8008d12:	f8c9 3000 	str.w	r3, [r9]
 8008d16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d1a:	4606      	mov	r6, r0
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	b112      	cbz	r2, 8008d26 <_printf_common+0x2a>
 8008d20:	3301      	adds	r3, #1
 8008d22:	f8c9 3000 	str.w	r3, [r9]
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	0699      	lsls	r1, r3, #26
 8008d2a:	bf42      	ittt	mi
 8008d2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008d30:	3302      	addmi	r3, #2
 8008d32:	f8c9 3000 	strmi.w	r3, [r9]
 8008d36:	6825      	ldr	r5, [r4, #0]
 8008d38:	f015 0506 	ands.w	r5, r5, #6
 8008d3c:	d107      	bne.n	8008d4e <_printf_common+0x52>
 8008d3e:	f104 0a19 	add.w	sl, r4, #25
 8008d42:	68e3      	ldr	r3, [r4, #12]
 8008d44:	f8d9 2000 	ldr.w	r2, [r9]
 8008d48:	1a9b      	subs	r3, r3, r2
 8008d4a:	42ab      	cmp	r3, r5
 8008d4c:	dc28      	bgt.n	8008da0 <_printf_common+0xa4>
 8008d4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008d52:	6822      	ldr	r2, [r4, #0]
 8008d54:	3300      	adds	r3, #0
 8008d56:	bf18      	it	ne
 8008d58:	2301      	movne	r3, #1
 8008d5a:	0692      	lsls	r2, r2, #26
 8008d5c:	d42d      	bmi.n	8008dba <_printf_common+0xbe>
 8008d5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d62:	4639      	mov	r1, r7
 8008d64:	4630      	mov	r0, r6
 8008d66:	47c0      	blx	r8
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d020      	beq.n	8008dae <_printf_common+0xb2>
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	68e5      	ldr	r5, [r4, #12]
 8008d70:	f8d9 2000 	ldr.w	r2, [r9]
 8008d74:	f003 0306 	and.w	r3, r3, #6
 8008d78:	2b04      	cmp	r3, #4
 8008d7a:	bf08      	it	eq
 8008d7c:	1aad      	subeq	r5, r5, r2
 8008d7e:	68a3      	ldr	r3, [r4, #8]
 8008d80:	6922      	ldr	r2, [r4, #16]
 8008d82:	bf0c      	ite	eq
 8008d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d88:	2500      	movne	r5, #0
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	bfc4      	itt	gt
 8008d8e:	1a9b      	subgt	r3, r3, r2
 8008d90:	18ed      	addgt	r5, r5, r3
 8008d92:	f04f 0900 	mov.w	r9, #0
 8008d96:	341a      	adds	r4, #26
 8008d98:	454d      	cmp	r5, r9
 8008d9a:	d11a      	bne.n	8008dd2 <_printf_common+0xd6>
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	e008      	b.n	8008db2 <_printf_common+0xb6>
 8008da0:	2301      	movs	r3, #1
 8008da2:	4652      	mov	r2, sl
 8008da4:	4639      	mov	r1, r7
 8008da6:	4630      	mov	r0, r6
 8008da8:	47c0      	blx	r8
 8008daa:	3001      	adds	r0, #1
 8008dac:	d103      	bne.n	8008db6 <_printf_common+0xba>
 8008dae:	f04f 30ff 	mov.w	r0, #4294967295
 8008db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db6:	3501      	adds	r5, #1
 8008db8:	e7c3      	b.n	8008d42 <_printf_common+0x46>
 8008dba:	18e1      	adds	r1, r4, r3
 8008dbc:	1c5a      	adds	r2, r3, #1
 8008dbe:	2030      	movs	r0, #48	; 0x30
 8008dc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008dc4:	4422      	add	r2, r4
 8008dc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008dca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008dce:	3302      	adds	r3, #2
 8008dd0:	e7c5      	b.n	8008d5e <_printf_common+0x62>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	4622      	mov	r2, r4
 8008dd6:	4639      	mov	r1, r7
 8008dd8:	4630      	mov	r0, r6
 8008dda:	47c0      	blx	r8
 8008ddc:	3001      	adds	r0, #1
 8008dde:	d0e6      	beq.n	8008dae <_printf_common+0xb2>
 8008de0:	f109 0901 	add.w	r9, r9, #1
 8008de4:	e7d8      	b.n	8008d98 <_printf_common+0x9c>
	...

08008de8 <_printf_i>:
 8008de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008df0:	460c      	mov	r4, r1
 8008df2:	7e09      	ldrb	r1, [r1, #24]
 8008df4:	b085      	sub	sp, #20
 8008df6:	296e      	cmp	r1, #110	; 0x6e
 8008df8:	4617      	mov	r7, r2
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	4698      	mov	r8, r3
 8008dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e00:	f000 80b3 	beq.w	8008f6a <_printf_i+0x182>
 8008e04:	d822      	bhi.n	8008e4c <_printf_i+0x64>
 8008e06:	2963      	cmp	r1, #99	; 0x63
 8008e08:	d036      	beq.n	8008e78 <_printf_i+0x90>
 8008e0a:	d80a      	bhi.n	8008e22 <_printf_i+0x3a>
 8008e0c:	2900      	cmp	r1, #0
 8008e0e:	f000 80b9 	beq.w	8008f84 <_printf_i+0x19c>
 8008e12:	2958      	cmp	r1, #88	; 0x58
 8008e14:	f000 8083 	beq.w	8008f1e <_printf_i+0x136>
 8008e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008e20:	e032      	b.n	8008e88 <_printf_i+0xa0>
 8008e22:	2964      	cmp	r1, #100	; 0x64
 8008e24:	d001      	beq.n	8008e2a <_printf_i+0x42>
 8008e26:	2969      	cmp	r1, #105	; 0x69
 8008e28:	d1f6      	bne.n	8008e18 <_printf_i+0x30>
 8008e2a:	6820      	ldr	r0, [r4, #0]
 8008e2c:	6813      	ldr	r3, [r2, #0]
 8008e2e:	0605      	lsls	r5, r0, #24
 8008e30:	f103 0104 	add.w	r1, r3, #4
 8008e34:	d52a      	bpl.n	8008e8c <_printf_i+0xa4>
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6011      	str	r1, [r2, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	da03      	bge.n	8008e46 <_printf_i+0x5e>
 8008e3e:	222d      	movs	r2, #45	; 0x2d
 8008e40:	425b      	negs	r3, r3
 8008e42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008e46:	486f      	ldr	r0, [pc, #444]	; (8009004 <_printf_i+0x21c>)
 8008e48:	220a      	movs	r2, #10
 8008e4a:	e039      	b.n	8008ec0 <_printf_i+0xd8>
 8008e4c:	2973      	cmp	r1, #115	; 0x73
 8008e4e:	f000 809d 	beq.w	8008f8c <_printf_i+0x1a4>
 8008e52:	d808      	bhi.n	8008e66 <_printf_i+0x7e>
 8008e54:	296f      	cmp	r1, #111	; 0x6f
 8008e56:	d020      	beq.n	8008e9a <_printf_i+0xb2>
 8008e58:	2970      	cmp	r1, #112	; 0x70
 8008e5a:	d1dd      	bne.n	8008e18 <_printf_i+0x30>
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	f043 0320 	orr.w	r3, r3, #32
 8008e62:	6023      	str	r3, [r4, #0]
 8008e64:	e003      	b.n	8008e6e <_printf_i+0x86>
 8008e66:	2975      	cmp	r1, #117	; 0x75
 8008e68:	d017      	beq.n	8008e9a <_printf_i+0xb2>
 8008e6a:	2978      	cmp	r1, #120	; 0x78
 8008e6c:	d1d4      	bne.n	8008e18 <_printf_i+0x30>
 8008e6e:	2378      	movs	r3, #120	; 0x78
 8008e70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e74:	4864      	ldr	r0, [pc, #400]	; (8009008 <_printf_i+0x220>)
 8008e76:	e055      	b.n	8008f24 <_printf_i+0x13c>
 8008e78:	6813      	ldr	r3, [r2, #0]
 8008e7a:	1d19      	adds	r1, r3, #4
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6011      	str	r1, [r2, #0]
 8008e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e08c      	b.n	8008fa6 <_printf_i+0x1be>
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	6011      	str	r1, [r2, #0]
 8008e90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e94:	bf18      	it	ne
 8008e96:	b21b      	sxthne	r3, r3
 8008e98:	e7cf      	b.n	8008e3a <_printf_i+0x52>
 8008e9a:	6813      	ldr	r3, [r2, #0]
 8008e9c:	6825      	ldr	r5, [r4, #0]
 8008e9e:	1d18      	adds	r0, r3, #4
 8008ea0:	6010      	str	r0, [r2, #0]
 8008ea2:	0628      	lsls	r0, r5, #24
 8008ea4:	d501      	bpl.n	8008eaa <_printf_i+0xc2>
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	e002      	b.n	8008eb0 <_printf_i+0xc8>
 8008eaa:	0668      	lsls	r0, r5, #25
 8008eac:	d5fb      	bpl.n	8008ea6 <_printf_i+0xbe>
 8008eae:	881b      	ldrh	r3, [r3, #0]
 8008eb0:	4854      	ldr	r0, [pc, #336]	; (8009004 <_printf_i+0x21c>)
 8008eb2:	296f      	cmp	r1, #111	; 0x6f
 8008eb4:	bf14      	ite	ne
 8008eb6:	220a      	movne	r2, #10
 8008eb8:	2208      	moveq	r2, #8
 8008eba:	2100      	movs	r1, #0
 8008ebc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ec0:	6865      	ldr	r5, [r4, #4]
 8008ec2:	60a5      	str	r5, [r4, #8]
 8008ec4:	2d00      	cmp	r5, #0
 8008ec6:	f2c0 8095 	blt.w	8008ff4 <_printf_i+0x20c>
 8008eca:	6821      	ldr	r1, [r4, #0]
 8008ecc:	f021 0104 	bic.w	r1, r1, #4
 8008ed0:	6021      	str	r1, [r4, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d13d      	bne.n	8008f52 <_printf_i+0x16a>
 8008ed6:	2d00      	cmp	r5, #0
 8008ed8:	f040 808e 	bne.w	8008ff8 <_printf_i+0x210>
 8008edc:	4665      	mov	r5, ip
 8008ede:	2a08      	cmp	r2, #8
 8008ee0:	d10b      	bne.n	8008efa <_printf_i+0x112>
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	07db      	lsls	r3, r3, #31
 8008ee6:	d508      	bpl.n	8008efa <_printf_i+0x112>
 8008ee8:	6923      	ldr	r3, [r4, #16]
 8008eea:	6862      	ldr	r2, [r4, #4]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	bfde      	ittt	le
 8008ef0:	2330      	movle	r3, #48	; 0x30
 8008ef2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ef6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008efa:	ebac 0305 	sub.w	r3, ip, r5
 8008efe:	6123      	str	r3, [r4, #16]
 8008f00:	f8cd 8000 	str.w	r8, [sp]
 8008f04:	463b      	mov	r3, r7
 8008f06:	aa03      	add	r2, sp, #12
 8008f08:	4621      	mov	r1, r4
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f7ff fef6 	bl	8008cfc <_printf_common>
 8008f10:	3001      	adds	r0, #1
 8008f12:	d14d      	bne.n	8008fb0 <_printf_i+0x1c8>
 8008f14:	f04f 30ff 	mov.w	r0, #4294967295
 8008f18:	b005      	add	sp, #20
 8008f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f1e:	4839      	ldr	r0, [pc, #228]	; (8009004 <_printf_i+0x21c>)
 8008f20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008f24:	6813      	ldr	r3, [r2, #0]
 8008f26:	6821      	ldr	r1, [r4, #0]
 8008f28:	1d1d      	adds	r5, r3, #4
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	6015      	str	r5, [r2, #0]
 8008f2e:	060a      	lsls	r2, r1, #24
 8008f30:	d50b      	bpl.n	8008f4a <_printf_i+0x162>
 8008f32:	07ca      	lsls	r2, r1, #31
 8008f34:	bf44      	itt	mi
 8008f36:	f041 0120 	orrmi.w	r1, r1, #32
 8008f3a:	6021      	strmi	r1, [r4, #0]
 8008f3c:	b91b      	cbnz	r3, 8008f46 <_printf_i+0x15e>
 8008f3e:	6822      	ldr	r2, [r4, #0]
 8008f40:	f022 0220 	bic.w	r2, r2, #32
 8008f44:	6022      	str	r2, [r4, #0]
 8008f46:	2210      	movs	r2, #16
 8008f48:	e7b7      	b.n	8008eba <_printf_i+0xd2>
 8008f4a:	064d      	lsls	r5, r1, #25
 8008f4c:	bf48      	it	mi
 8008f4e:	b29b      	uxthmi	r3, r3
 8008f50:	e7ef      	b.n	8008f32 <_printf_i+0x14a>
 8008f52:	4665      	mov	r5, ip
 8008f54:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f58:	fb02 3311 	mls	r3, r2, r1, r3
 8008f5c:	5cc3      	ldrb	r3, [r0, r3]
 8008f5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008f62:	460b      	mov	r3, r1
 8008f64:	2900      	cmp	r1, #0
 8008f66:	d1f5      	bne.n	8008f54 <_printf_i+0x16c>
 8008f68:	e7b9      	b.n	8008ede <_printf_i+0xf6>
 8008f6a:	6813      	ldr	r3, [r2, #0]
 8008f6c:	6825      	ldr	r5, [r4, #0]
 8008f6e:	6961      	ldr	r1, [r4, #20]
 8008f70:	1d18      	adds	r0, r3, #4
 8008f72:	6010      	str	r0, [r2, #0]
 8008f74:	0628      	lsls	r0, r5, #24
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	d501      	bpl.n	8008f7e <_printf_i+0x196>
 8008f7a:	6019      	str	r1, [r3, #0]
 8008f7c:	e002      	b.n	8008f84 <_printf_i+0x19c>
 8008f7e:	066a      	lsls	r2, r5, #25
 8008f80:	d5fb      	bpl.n	8008f7a <_printf_i+0x192>
 8008f82:	8019      	strh	r1, [r3, #0]
 8008f84:	2300      	movs	r3, #0
 8008f86:	6123      	str	r3, [r4, #16]
 8008f88:	4665      	mov	r5, ip
 8008f8a:	e7b9      	b.n	8008f00 <_printf_i+0x118>
 8008f8c:	6813      	ldr	r3, [r2, #0]
 8008f8e:	1d19      	adds	r1, r3, #4
 8008f90:	6011      	str	r1, [r2, #0]
 8008f92:	681d      	ldr	r5, [r3, #0]
 8008f94:	6862      	ldr	r2, [r4, #4]
 8008f96:	2100      	movs	r1, #0
 8008f98:	4628      	mov	r0, r5
 8008f9a:	f7f7 f941 	bl	8000220 <memchr>
 8008f9e:	b108      	cbz	r0, 8008fa4 <_printf_i+0x1bc>
 8008fa0:	1b40      	subs	r0, r0, r5
 8008fa2:	6060      	str	r0, [r4, #4]
 8008fa4:	6863      	ldr	r3, [r4, #4]
 8008fa6:	6123      	str	r3, [r4, #16]
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fae:	e7a7      	b.n	8008f00 <_printf_i+0x118>
 8008fb0:	6923      	ldr	r3, [r4, #16]
 8008fb2:	462a      	mov	r2, r5
 8008fb4:	4639      	mov	r1, r7
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	47c0      	blx	r8
 8008fba:	3001      	adds	r0, #1
 8008fbc:	d0aa      	beq.n	8008f14 <_printf_i+0x12c>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	079b      	lsls	r3, r3, #30
 8008fc2:	d413      	bmi.n	8008fec <_printf_i+0x204>
 8008fc4:	68e0      	ldr	r0, [r4, #12]
 8008fc6:	9b03      	ldr	r3, [sp, #12]
 8008fc8:	4298      	cmp	r0, r3
 8008fca:	bfb8      	it	lt
 8008fcc:	4618      	movlt	r0, r3
 8008fce:	e7a3      	b.n	8008f18 <_printf_i+0x130>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	464a      	mov	r2, r9
 8008fd4:	4639      	mov	r1, r7
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	47c0      	blx	r8
 8008fda:	3001      	adds	r0, #1
 8008fdc:	d09a      	beq.n	8008f14 <_printf_i+0x12c>
 8008fde:	3501      	adds	r5, #1
 8008fe0:	68e3      	ldr	r3, [r4, #12]
 8008fe2:	9a03      	ldr	r2, [sp, #12]
 8008fe4:	1a9b      	subs	r3, r3, r2
 8008fe6:	42ab      	cmp	r3, r5
 8008fe8:	dcf2      	bgt.n	8008fd0 <_printf_i+0x1e8>
 8008fea:	e7eb      	b.n	8008fc4 <_printf_i+0x1dc>
 8008fec:	2500      	movs	r5, #0
 8008fee:	f104 0919 	add.w	r9, r4, #25
 8008ff2:	e7f5      	b.n	8008fe0 <_printf_i+0x1f8>
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1ac      	bne.n	8008f52 <_printf_i+0x16a>
 8008ff8:	7803      	ldrb	r3, [r0, #0]
 8008ffa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ffe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009002:	e76c      	b.n	8008ede <_printf_i+0xf6>
 8009004:	0800c21a 	.word	0x0800c21a
 8009008:	0800c22b 	.word	0x0800c22b

0800900c <_scanf_float>:
 800900c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009010:	469a      	mov	sl, r3
 8009012:	688b      	ldr	r3, [r1, #8]
 8009014:	4616      	mov	r6, r2
 8009016:	1e5a      	subs	r2, r3, #1
 8009018:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800901c:	b087      	sub	sp, #28
 800901e:	bf83      	ittte	hi
 8009020:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8009024:	189b      	addhi	r3, r3, r2
 8009026:	9301      	strhi	r3, [sp, #4]
 8009028:	2300      	movls	r3, #0
 800902a:	bf86      	itte	hi
 800902c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009030:	608b      	strhi	r3, [r1, #8]
 8009032:	9301      	strls	r3, [sp, #4]
 8009034:	680b      	ldr	r3, [r1, #0]
 8009036:	4688      	mov	r8, r1
 8009038:	f04f 0b00 	mov.w	fp, #0
 800903c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009040:	f848 3b1c 	str.w	r3, [r8], #28
 8009044:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8009048:	4607      	mov	r7, r0
 800904a:	460c      	mov	r4, r1
 800904c:	4645      	mov	r5, r8
 800904e:	465a      	mov	r2, fp
 8009050:	46d9      	mov	r9, fp
 8009052:	f8cd b008 	str.w	fp, [sp, #8]
 8009056:	68a1      	ldr	r1, [r4, #8]
 8009058:	b181      	cbz	r1, 800907c <_scanf_float+0x70>
 800905a:	6833      	ldr	r3, [r6, #0]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	2b49      	cmp	r3, #73	; 0x49
 8009060:	d071      	beq.n	8009146 <_scanf_float+0x13a>
 8009062:	d84d      	bhi.n	8009100 <_scanf_float+0xf4>
 8009064:	2b39      	cmp	r3, #57	; 0x39
 8009066:	d840      	bhi.n	80090ea <_scanf_float+0xde>
 8009068:	2b31      	cmp	r3, #49	; 0x31
 800906a:	f080 8088 	bcs.w	800917e <_scanf_float+0x172>
 800906e:	2b2d      	cmp	r3, #45	; 0x2d
 8009070:	f000 8090 	beq.w	8009194 <_scanf_float+0x188>
 8009074:	d815      	bhi.n	80090a2 <_scanf_float+0x96>
 8009076:	2b2b      	cmp	r3, #43	; 0x2b
 8009078:	f000 808c 	beq.w	8009194 <_scanf_float+0x188>
 800907c:	f1b9 0f00 	cmp.w	r9, #0
 8009080:	d003      	beq.n	800908a <_scanf_float+0x7e>
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	3a01      	subs	r2, #1
 800908c:	2a01      	cmp	r2, #1
 800908e:	f200 80ea 	bhi.w	8009266 <_scanf_float+0x25a>
 8009092:	4545      	cmp	r5, r8
 8009094:	f200 80dc 	bhi.w	8009250 <_scanf_float+0x244>
 8009098:	2601      	movs	r6, #1
 800909a:	4630      	mov	r0, r6
 800909c:	b007      	add	sp, #28
 800909e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a2:	2b2e      	cmp	r3, #46	; 0x2e
 80090a4:	f000 809f 	beq.w	80091e6 <_scanf_float+0x1da>
 80090a8:	2b30      	cmp	r3, #48	; 0x30
 80090aa:	d1e7      	bne.n	800907c <_scanf_float+0x70>
 80090ac:	6820      	ldr	r0, [r4, #0]
 80090ae:	f410 7f80 	tst.w	r0, #256	; 0x100
 80090b2:	d064      	beq.n	800917e <_scanf_float+0x172>
 80090b4:	9b01      	ldr	r3, [sp, #4]
 80090b6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80090ba:	6020      	str	r0, [r4, #0]
 80090bc:	f109 0901 	add.w	r9, r9, #1
 80090c0:	b11b      	cbz	r3, 80090ca <_scanf_float+0xbe>
 80090c2:	3b01      	subs	r3, #1
 80090c4:	3101      	adds	r1, #1
 80090c6:	9301      	str	r3, [sp, #4]
 80090c8:	60a1      	str	r1, [r4, #8]
 80090ca:	68a3      	ldr	r3, [r4, #8]
 80090cc:	3b01      	subs	r3, #1
 80090ce:	60a3      	str	r3, [r4, #8]
 80090d0:	6923      	ldr	r3, [r4, #16]
 80090d2:	3301      	adds	r3, #1
 80090d4:	6123      	str	r3, [r4, #16]
 80090d6:	6873      	ldr	r3, [r6, #4]
 80090d8:	3b01      	subs	r3, #1
 80090da:	2b00      	cmp	r3, #0
 80090dc:	6073      	str	r3, [r6, #4]
 80090de:	f340 80ac 	ble.w	800923a <_scanf_float+0x22e>
 80090e2:	6833      	ldr	r3, [r6, #0]
 80090e4:	3301      	adds	r3, #1
 80090e6:	6033      	str	r3, [r6, #0]
 80090e8:	e7b5      	b.n	8009056 <_scanf_float+0x4a>
 80090ea:	2b45      	cmp	r3, #69	; 0x45
 80090ec:	f000 8085 	beq.w	80091fa <_scanf_float+0x1ee>
 80090f0:	2b46      	cmp	r3, #70	; 0x46
 80090f2:	d06a      	beq.n	80091ca <_scanf_float+0x1be>
 80090f4:	2b41      	cmp	r3, #65	; 0x41
 80090f6:	d1c1      	bne.n	800907c <_scanf_float+0x70>
 80090f8:	2a01      	cmp	r2, #1
 80090fa:	d1bf      	bne.n	800907c <_scanf_float+0x70>
 80090fc:	2202      	movs	r2, #2
 80090fe:	e046      	b.n	800918e <_scanf_float+0x182>
 8009100:	2b65      	cmp	r3, #101	; 0x65
 8009102:	d07a      	beq.n	80091fa <_scanf_float+0x1ee>
 8009104:	d818      	bhi.n	8009138 <_scanf_float+0x12c>
 8009106:	2b54      	cmp	r3, #84	; 0x54
 8009108:	d066      	beq.n	80091d8 <_scanf_float+0x1cc>
 800910a:	d811      	bhi.n	8009130 <_scanf_float+0x124>
 800910c:	2b4e      	cmp	r3, #78	; 0x4e
 800910e:	d1b5      	bne.n	800907c <_scanf_float+0x70>
 8009110:	2a00      	cmp	r2, #0
 8009112:	d146      	bne.n	80091a2 <_scanf_float+0x196>
 8009114:	f1b9 0f00 	cmp.w	r9, #0
 8009118:	d145      	bne.n	80091a6 <_scanf_float+0x19a>
 800911a:	6821      	ldr	r1, [r4, #0]
 800911c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009120:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009124:	d13f      	bne.n	80091a6 <_scanf_float+0x19a>
 8009126:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800912a:	6021      	str	r1, [r4, #0]
 800912c:	2201      	movs	r2, #1
 800912e:	e02e      	b.n	800918e <_scanf_float+0x182>
 8009130:	2b59      	cmp	r3, #89	; 0x59
 8009132:	d01e      	beq.n	8009172 <_scanf_float+0x166>
 8009134:	2b61      	cmp	r3, #97	; 0x61
 8009136:	e7de      	b.n	80090f6 <_scanf_float+0xea>
 8009138:	2b6e      	cmp	r3, #110	; 0x6e
 800913a:	d0e9      	beq.n	8009110 <_scanf_float+0x104>
 800913c:	d815      	bhi.n	800916a <_scanf_float+0x15e>
 800913e:	2b66      	cmp	r3, #102	; 0x66
 8009140:	d043      	beq.n	80091ca <_scanf_float+0x1be>
 8009142:	2b69      	cmp	r3, #105	; 0x69
 8009144:	d19a      	bne.n	800907c <_scanf_float+0x70>
 8009146:	f1bb 0f00 	cmp.w	fp, #0
 800914a:	d138      	bne.n	80091be <_scanf_float+0x1b2>
 800914c:	f1b9 0f00 	cmp.w	r9, #0
 8009150:	d197      	bne.n	8009082 <_scanf_float+0x76>
 8009152:	6821      	ldr	r1, [r4, #0]
 8009154:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009158:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800915c:	d195      	bne.n	800908a <_scanf_float+0x7e>
 800915e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009162:	6021      	str	r1, [r4, #0]
 8009164:	f04f 0b01 	mov.w	fp, #1
 8009168:	e011      	b.n	800918e <_scanf_float+0x182>
 800916a:	2b74      	cmp	r3, #116	; 0x74
 800916c:	d034      	beq.n	80091d8 <_scanf_float+0x1cc>
 800916e:	2b79      	cmp	r3, #121	; 0x79
 8009170:	d184      	bne.n	800907c <_scanf_float+0x70>
 8009172:	f1bb 0f07 	cmp.w	fp, #7
 8009176:	d181      	bne.n	800907c <_scanf_float+0x70>
 8009178:	f04f 0b08 	mov.w	fp, #8
 800917c:	e007      	b.n	800918e <_scanf_float+0x182>
 800917e:	eb12 0f0b 	cmn.w	r2, fp
 8009182:	f47f af7b 	bne.w	800907c <_scanf_float+0x70>
 8009186:	6821      	ldr	r1, [r4, #0]
 8009188:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800918c:	6021      	str	r1, [r4, #0]
 800918e:	702b      	strb	r3, [r5, #0]
 8009190:	3501      	adds	r5, #1
 8009192:	e79a      	b.n	80090ca <_scanf_float+0xbe>
 8009194:	6821      	ldr	r1, [r4, #0]
 8009196:	0608      	lsls	r0, r1, #24
 8009198:	f57f af70 	bpl.w	800907c <_scanf_float+0x70>
 800919c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80091a0:	e7f4      	b.n	800918c <_scanf_float+0x180>
 80091a2:	2a02      	cmp	r2, #2
 80091a4:	d047      	beq.n	8009236 <_scanf_float+0x22a>
 80091a6:	f1bb 0f01 	cmp.w	fp, #1
 80091aa:	d003      	beq.n	80091b4 <_scanf_float+0x1a8>
 80091ac:	f1bb 0f04 	cmp.w	fp, #4
 80091b0:	f47f af64 	bne.w	800907c <_scanf_float+0x70>
 80091b4:	f10b 0b01 	add.w	fp, fp, #1
 80091b8:	fa5f fb8b 	uxtb.w	fp, fp
 80091bc:	e7e7      	b.n	800918e <_scanf_float+0x182>
 80091be:	f1bb 0f03 	cmp.w	fp, #3
 80091c2:	d0f7      	beq.n	80091b4 <_scanf_float+0x1a8>
 80091c4:	f1bb 0f05 	cmp.w	fp, #5
 80091c8:	e7f2      	b.n	80091b0 <_scanf_float+0x1a4>
 80091ca:	f1bb 0f02 	cmp.w	fp, #2
 80091ce:	f47f af55 	bne.w	800907c <_scanf_float+0x70>
 80091d2:	f04f 0b03 	mov.w	fp, #3
 80091d6:	e7da      	b.n	800918e <_scanf_float+0x182>
 80091d8:	f1bb 0f06 	cmp.w	fp, #6
 80091dc:	f47f af4e 	bne.w	800907c <_scanf_float+0x70>
 80091e0:	f04f 0b07 	mov.w	fp, #7
 80091e4:	e7d3      	b.n	800918e <_scanf_float+0x182>
 80091e6:	6821      	ldr	r1, [r4, #0]
 80091e8:	0588      	lsls	r0, r1, #22
 80091ea:	f57f af47 	bpl.w	800907c <_scanf_float+0x70>
 80091ee:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80091f2:	6021      	str	r1, [r4, #0]
 80091f4:	f8cd 9008 	str.w	r9, [sp, #8]
 80091f8:	e7c9      	b.n	800918e <_scanf_float+0x182>
 80091fa:	6821      	ldr	r1, [r4, #0]
 80091fc:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8009200:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009204:	d006      	beq.n	8009214 <_scanf_float+0x208>
 8009206:	0548      	lsls	r0, r1, #21
 8009208:	f57f af38 	bpl.w	800907c <_scanf_float+0x70>
 800920c:	f1b9 0f00 	cmp.w	r9, #0
 8009210:	f43f af3b 	beq.w	800908a <_scanf_float+0x7e>
 8009214:	0588      	lsls	r0, r1, #22
 8009216:	bf58      	it	pl
 8009218:	9802      	ldrpl	r0, [sp, #8]
 800921a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800921e:	bf58      	it	pl
 8009220:	eba9 0000 	subpl.w	r0, r9, r0
 8009224:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8009228:	bf58      	it	pl
 800922a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800922e:	6021      	str	r1, [r4, #0]
 8009230:	f04f 0900 	mov.w	r9, #0
 8009234:	e7ab      	b.n	800918e <_scanf_float+0x182>
 8009236:	2203      	movs	r2, #3
 8009238:	e7a9      	b.n	800918e <_scanf_float+0x182>
 800923a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800923e:	9205      	str	r2, [sp, #20]
 8009240:	4631      	mov	r1, r6
 8009242:	4638      	mov	r0, r7
 8009244:	4798      	blx	r3
 8009246:	9a05      	ldr	r2, [sp, #20]
 8009248:	2800      	cmp	r0, #0
 800924a:	f43f af04 	beq.w	8009056 <_scanf_float+0x4a>
 800924e:	e715      	b.n	800907c <_scanf_float+0x70>
 8009250:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009254:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009258:	4632      	mov	r2, r6
 800925a:	4638      	mov	r0, r7
 800925c:	4798      	blx	r3
 800925e:	6923      	ldr	r3, [r4, #16]
 8009260:	3b01      	subs	r3, #1
 8009262:	6123      	str	r3, [r4, #16]
 8009264:	e715      	b.n	8009092 <_scanf_float+0x86>
 8009266:	f10b 33ff 	add.w	r3, fp, #4294967295
 800926a:	2b06      	cmp	r3, #6
 800926c:	d80a      	bhi.n	8009284 <_scanf_float+0x278>
 800926e:	f1bb 0f02 	cmp.w	fp, #2
 8009272:	d968      	bls.n	8009346 <_scanf_float+0x33a>
 8009274:	f1ab 0b03 	sub.w	fp, fp, #3
 8009278:	fa5f fb8b 	uxtb.w	fp, fp
 800927c:	eba5 0b0b 	sub.w	fp, r5, fp
 8009280:	455d      	cmp	r5, fp
 8009282:	d14b      	bne.n	800931c <_scanf_float+0x310>
 8009284:	6823      	ldr	r3, [r4, #0]
 8009286:	05da      	lsls	r2, r3, #23
 8009288:	d51f      	bpl.n	80092ca <_scanf_float+0x2be>
 800928a:	055b      	lsls	r3, r3, #21
 800928c:	d468      	bmi.n	8009360 <_scanf_float+0x354>
 800928e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009292:	6923      	ldr	r3, [r4, #16]
 8009294:	2965      	cmp	r1, #101	; 0x65
 8009296:	f103 33ff 	add.w	r3, r3, #4294967295
 800929a:	f105 3bff 	add.w	fp, r5, #4294967295
 800929e:	6123      	str	r3, [r4, #16]
 80092a0:	d00d      	beq.n	80092be <_scanf_float+0x2b2>
 80092a2:	2945      	cmp	r1, #69	; 0x45
 80092a4:	d00b      	beq.n	80092be <_scanf_float+0x2b2>
 80092a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092aa:	4632      	mov	r2, r6
 80092ac:	4638      	mov	r0, r7
 80092ae:	4798      	blx	r3
 80092b0:	6923      	ldr	r3, [r4, #16]
 80092b2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80092b6:	3b01      	subs	r3, #1
 80092b8:	f1a5 0b02 	sub.w	fp, r5, #2
 80092bc:	6123      	str	r3, [r4, #16]
 80092be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092c2:	4632      	mov	r2, r6
 80092c4:	4638      	mov	r0, r7
 80092c6:	4798      	blx	r3
 80092c8:	465d      	mov	r5, fp
 80092ca:	6826      	ldr	r6, [r4, #0]
 80092cc:	f016 0610 	ands.w	r6, r6, #16
 80092d0:	d17a      	bne.n	80093c8 <_scanf_float+0x3bc>
 80092d2:	702e      	strb	r6, [r5, #0]
 80092d4:	6823      	ldr	r3, [r4, #0]
 80092d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80092da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092de:	d142      	bne.n	8009366 <_scanf_float+0x35a>
 80092e0:	9b02      	ldr	r3, [sp, #8]
 80092e2:	eba9 0303 	sub.w	r3, r9, r3
 80092e6:	425a      	negs	r2, r3
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d149      	bne.n	8009380 <_scanf_float+0x374>
 80092ec:	2200      	movs	r2, #0
 80092ee:	4641      	mov	r1, r8
 80092f0:	4638      	mov	r0, r7
 80092f2:	f000 fea5 	bl	800a040 <_strtod_r>
 80092f6:	6825      	ldr	r5, [r4, #0]
 80092f8:	f8da 3000 	ldr.w	r3, [sl]
 80092fc:	f015 0f02 	tst.w	r5, #2
 8009300:	f103 0204 	add.w	r2, r3, #4
 8009304:	ec59 8b10 	vmov	r8, r9, d0
 8009308:	f8ca 2000 	str.w	r2, [sl]
 800930c:	d043      	beq.n	8009396 <_scanf_float+0x38a>
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	e9c3 8900 	strd	r8, r9, [r3]
 8009314:	68e3      	ldr	r3, [r4, #12]
 8009316:	3301      	adds	r3, #1
 8009318:	60e3      	str	r3, [r4, #12]
 800931a:	e6be      	b.n	800909a <_scanf_float+0x8e>
 800931c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009320:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009324:	4632      	mov	r2, r6
 8009326:	4638      	mov	r0, r7
 8009328:	4798      	blx	r3
 800932a:	6923      	ldr	r3, [r4, #16]
 800932c:	3b01      	subs	r3, #1
 800932e:	6123      	str	r3, [r4, #16]
 8009330:	e7a6      	b.n	8009280 <_scanf_float+0x274>
 8009332:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009336:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800933a:	4632      	mov	r2, r6
 800933c:	4638      	mov	r0, r7
 800933e:	4798      	blx	r3
 8009340:	6923      	ldr	r3, [r4, #16]
 8009342:	3b01      	subs	r3, #1
 8009344:	6123      	str	r3, [r4, #16]
 8009346:	4545      	cmp	r5, r8
 8009348:	d8f3      	bhi.n	8009332 <_scanf_float+0x326>
 800934a:	e6a5      	b.n	8009098 <_scanf_float+0x8c>
 800934c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009350:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009354:	4632      	mov	r2, r6
 8009356:	4638      	mov	r0, r7
 8009358:	4798      	blx	r3
 800935a:	6923      	ldr	r3, [r4, #16]
 800935c:	3b01      	subs	r3, #1
 800935e:	6123      	str	r3, [r4, #16]
 8009360:	4545      	cmp	r5, r8
 8009362:	d8f3      	bhi.n	800934c <_scanf_float+0x340>
 8009364:	e698      	b.n	8009098 <_scanf_float+0x8c>
 8009366:	9b03      	ldr	r3, [sp, #12]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d0bf      	beq.n	80092ec <_scanf_float+0x2e0>
 800936c:	9904      	ldr	r1, [sp, #16]
 800936e:	230a      	movs	r3, #10
 8009370:	4632      	mov	r2, r6
 8009372:	3101      	adds	r1, #1
 8009374:	4638      	mov	r0, r7
 8009376:	f000 feef 	bl	800a158 <_strtol_r>
 800937a:	9b03      	ldr	r3, [sp, #12]
 800937c:	9d04      	ldr	r5, [sp, #16]
 800937e:	1ac2      	subs	r2, r0, r3
 8009380:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009384:	429d      	cmp	r5, r3
 8009386:	bf28      	it	cs
 8009388:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800938c:	490f      	ldr	r1, [pc, #60]	; (80093cc <_scanf_float+0x3c0>)
 800938e:	4628      	mov	r0, r5
 8009390:	f000 f824 	bl	80093dc <siprintf>
 8009394:	e7aa      	b.n	80092ec <_scanf_float+0x2e0>
 8009396:	f015 0504 	ands.w	r5, r5, #4
 800939a:	d1b8      	bne.n	800930e <_scanf_float+0x302>
 800939c:	681f      	ldr	r7, [r3, #0]
 800939e:	ee10 2a10 	vmov	r2, s0
 80093a2:	464b      	mov	r3, r9
 80093a4:	ee10 0a10 	vmov	r0, s0
 80093a8:	4649      	mov	r1, r9
 80093aa:	f7f7 fbdf 	bl	8000b6c <__aeabi_dcmpun>
 80093ae:	b128      	cbz	r0, 80093bc <_scanf_float+0x3b0>
 80093b0:	4628      	mov	r0, r5
 80093b2:	f000 f80d 	bl	80093d0 <nanf>
 80093b6:	ed87 0a00 	vstr	s0, [r7]
 80093ba:	e7ab      	b.n	8009314 <_scanf_float+0x308>
 80093bc:	4640      	mov	r0, r8
 80093be:	4649      	mov	r1, r9
 80093c0:	f7f7 fc32 	bl	8000c28 <__aeabi_d2f>
 80093c4:	6038      	str	r0, [r7, #0]
 80093c6:	e7a5      	b.n	8009314 <_scanf_float+0x308>
 80093c8:	2600      	movs	r6, #0
 80093ca:	e666      	b.n	800909a <_scanf_float+0x8e>
 80093cc:	0800c23c 	.word	0x0800c23c

080093d0 <nanf>:
 80093d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80093d8 <nanf+0x8>
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	7fc00000 	.word	0x7fc00000

080093dc <siprintf>:
 80093dc:	b40e      	push	{r1, r2, r3}
 80093de:	b500      	push	{lr}
 80093e0:	b09c      	sub	sp, #112	; 0x70
 80093e2:	ab1d      	add	r3, sp, #116	; 0x74
 80093e4:	9002      	str	r0, [sp, #8]
 80093e6:	9006      	str	r0, [sp, #24]
 80093e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093ec:	4809      	ldr	r0, [pc, #36]	; (8009414 <siprintf+0x38>)
 80093ee:	9107      	str	r1, [sp, #28]
 80093f0:	9104      	str	r1, [sp, #16]
 80093f2:	4909      	ldr	r1, [pc, #36]	; (8009418 <siprintf+0x3c>)
 80093f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f8:	9105      	str	r1, [sp, #20]
 80093fa:	6800      	ldr	r0, [r0, #0]
 80093fc:	9301      	str	r3, [sp, #4]
 80093fe:	a902      	add	r1, sp, #8
 8009400:	f002 fd70 	bl	800bee4 <_svfiprintf_r>
 8009404:	9b02      	ldr	r3, [sp, #8]
 8009406:	2200      	movs	r2, #0
 8009408:	701a      	strb	r2, [r3, #0]
 800940a:	b01c      	add	sp, #112	; 0x70
 800940c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009410:	b003      	add	sp, #12
 8009412:	4770      	bx	lr
 8009414:	2000001c 	.word	0x2000001c
 8009418:	ffff0208 	.word	0xffff0208

0800941c <sulp>:
 800941c:	b570      	push	{r4, r5, r6, lr}
 800941e:	4604      	mov	r4, r0
 8009420:	460d      	mov	r5, r1
 8009422:	ec45 4b10 	vmov	d0, r4, r5
 8009426:	4616      	mov	r6, r2
 8009428:	f002 fb18 	bl	800ba5c <__ulp>
 800942c:	ec51 0b10 	vmov	r0, r1, d0
 8009430:	b17e      	cbz	r6, 8009452 <sulp+0x36>
 8009432:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009436:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800943a:	2b00      	cmp	r3, #0
 800943c:	dd09      	ble.n	8009452 <sulp+0x36>
 800943e:	051b      	lsls	r3, r3, #20
 8009440:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009444:	2400      	movs	r4, #0
 8009446:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800944a:	4622      	mov	r2, r4
 800944c:	462b      	mov	r3, r5
 800944e:	f7f7 f8f3 	bl	8000638 <__aeabi_dmul>
 8009452:	bd70      	pop	{r4, r5, r6, pc}
 8009454:	0000      	movs	r0, r0
	...

08009458 <_strtod_l>:
 8009458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945c:	461f      	mov	r7, r3
 800945e:	b0a1      	sub	sp, #132	; 0x84
 8009460:	2300      	movs	r3, #0
 8009462:	4681      	mov	r9, r0
 8009464:	4638      	mov	r0, r7
 8009466:	460e      	mov	r6, r1
 8009468:	9217      	str	r2, [sp, #92]	; 0x5c
 800946a:	931c      	str	r3, [sp, #112]	; 0x70
 800946c:	f001 fff5 	bl	800b45a <__localeconv_l>
 8009470:	4680      	mov	r8, r0
 8009472:	6800      	ldr	r0, [r0, #0]
 8009474:	f7f6 fecc 	bl	8000210 <strlen>
 8009478:	f04f 0a00 	mov.w	sl, #0
 800947c:	4604      	mov	r4, r0
 800947e:	f04f 0b00 	mov.w	fp, #0
 8009482:	961b      	str	r6, [sp, #108]	; 0x6c
 8009484:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009486:	781a      	ldrb	r2, [r3, #0]
 8009488:	2a0d      	cmp	r2, #13
 800948a:	d832      	bhi.n	80094f2 <_strtod_l+0x9a>
 800948c:	2a09      	cmp	r2, #9
 800948e:	d236      	bcs.n	80094fe <_strtod_l+0xa6>
 8009490:	2a00      	cmp	r2, #0
 8009492:	d03e      	beq.n	8009512 <_strtod_l+0xba>
 8009494:	2300      	movs	r3, #0
 8009496:	930d      	str	r3, [sp, #52]	; 0x34
 8009498:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800949a:	782b      	ldrb	r3, [r5, #0]
 800949c:	2b30      	cmp	r3, #48	; 0x30
 800949e:	f040 80ac 	bne.w	80095fa <_strtod_l+0x1a2>
 80094a2:	786b      	ldrb	r3, [r5, #1]
 80094a4:	2b58      	cmp	r3, #88	; 0x58
 80094a6:	d001      	beq.n	80094ac <_strtod_l+0x54>
 80094a8:	2b78      	cmp	r3, #120	; 0x78
 80094aa:	d167      	bne.n	800957c <_strtod_l+0x124>
 80094ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094ae:	9301      	str	r3, [sp, #4]
 80094b0:	ab1c      	add	r3, sp, #112	; 0x70
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	9702      	str	r7, [sp, #8]
 80094b6:	ab1d      	add	r3, sp, #116	; 0x74
 80094b8:	4a88      	ldr	r2, [pc, #544]	; (80096dc <_strtod_l+0x284>)
 80094ba:	a91b      	add	r1, sp, #108	; 0x6c
 80094bc:	4648      	mov	r0, r9
 80094be:	f001 fcf2 	bl	800aea6 <__gethex>
 80094c2:	f010 0407 	ands.w	r4, r0, #7
 80094c6:	4606      	mov	r6, r0
 80094c8:	d005      	beq.n	80094d6 <_strtod_l+0x7e>
 80094ca:	2c06      	cmp	r4, #6
 80094cc:	d12b      	bne.n	8009526 <_strtod_l+0xce>
 80094ce:	3501      	adds	r5, #1
 80094d0:	2300      	movs	r3, #0
 80094d2:	951b      	str	r5, [sp, #108]	; 0x6c
 80094d4:	930d      	str	r3, [sp, #52]	; 0x34
 80094d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f040 859a 	bne.w	800a012 <_strtod_l+0xbba>
 80094de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094e0:	b1e3      	cbz	r3, 800951c <_strtod_l+0xc4>
 80094e2:	4652      	mov	r2, sl
 80094e4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80094e8:	ec43 2b10 	vmov	d0, r2, r3
 80094ec:	b021      	add	sp, #132	; 0x84
 80094ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f2:	2a2b      	cmp	r2, #43	; 0x2b
 80094f4:	d015      	beq.n	8009522 <_strtod_l+0xca>
 80094f6:	2a2d      	cmp	r2, #45	; 0x2d
 80094f8:	d004      	beq.n	8009504 <_strtod_l+0xac>
 80094fa:	2a20      	cmp	r2, #32
 80094fc:	d1ca      	bne.n	8009494 <_strtod_l+0x3c>
 80094fe:	3301      	adds	r3, #1
 8009500:	931b      	str	r3, [sp, #108]	; 0x6c
 8009502:	e7bf      	b.n	8009484 <_strtod_l+0x2c>
 8009504:	2201      	movs	r2, #1
 8009506:	920d      	str	r2, [sp, #52]	; 0x34
 8009508:	1c5a      	adds	r2, r3, #1
 800950a:	921b      	str	r2, [sp, #108]	; 0x6c
 800950c:	785b      	ldrb	r3, [r3, #1]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1c2      	bne.n	8009498 <_strtod_l+0x40>
 8009512:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009514:	961b      	str	r6, [sp, #108]	; 0x6c
 8009516:	2b00      	cmp	r3, #0
 8009518:	f040 8579 	bne.w	800a00e <_strtod_l+0xbb6>
 800951c:	4652      	mov	r2, sl
 800951e:	465b      	mov	r3, fp
 8009520:	e7e2      	b.n	80094e8 <_strtod_l+0x90>
 8009522:	2200      	movs	r2, #0
 8009524:	e7ef      	b.n	8009506 <_strtod_l+0xae>
 8009526:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009528:	b13a      	cbz	r2, 800953a <_strtod_l+0xe2>
 800952a:	2135      	movs	r1, #53	; 0x35
 800952c:	a81e      	add	r0, sp, #120	; 0x78
 800952e:	f002 fb8d 	bl	800bc4c <__copybits>
 8009532:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009534:	4648      	mov	r0, r9
 8009536:	f001 fffa 	bl	800b52e <_Bfree>
 800953a:	3c01      	subs	r4, #1
 800953c:	2c04      	cmp	r4, #4
 800953e:	d806      	bhi.n	800954e <_strtod_l+0xf6>
 8009540:	e8df f004 	tbb	[pc, r4]
 8009544:	1714030a 	.word	0x1714030a
 8009548:	0a          	.byte	0x0a
 8009549:	00          	.byte	0x00
 800954a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800954e:	0730      	lsls	r0, r6, #28
 8009550:	d5c1      	bpl.n	80094d6 <_strtod_l+0x7e>
 8009552:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009556:	e7be      	b.n	80094d6 <_strtod_l+0x7e>
 8009558:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800955c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800955e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009562:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009566:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800956a:	e7f0      	b.n	800954e <_strtod_l+0xf6>
 800956c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80096e0 <_strtod_l+0x288>
 8009570:	e7ed      	b.n	800954e <_strtod_l+0xf6>
 8009572:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009576:	f04f 3aff 	mov.w	sl, #4294967295
 800957a:	e7e8      	b.n	800954e <_strtod_l+0xf6>
 800957c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800957e:	1c5a      	adds	r2, r3, #1
 8009580:	921b      	str	r2, [sp, #108]	; 0x6c
 8009582:	785b      	ldrb	r3, [r3, #1]
 8009584:	2b30      	cmp	r3, #48	; 0x30
 8009586:	d0f9      	beq.n	800957c <_strtod_l+0x124>
 8009588:	2b00      	cmp	r3, #0
 800958a:	d0a4      	beq.n	80094d6 <_strtod_l+0x7e>
 800958c:	2301      	movs	r3, #1
 800958e:	2500      	movs	r5, #0
 8009590:	9306      	str	r3, [sp, #24]
 8009592:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009594:	9308      	str	r3, [sp, #32]
 8009596:	9507      	str	r5, [sp, #28]
 8009598:	9505      	str	r5, [sp, #20]
 800959a:	220a      	movs	r2, #10
 800959c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800959e:	7807      	ldrb	r7, [r0, #0]
 80095a0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80095a4:	b2d9      	uxtb	r1, r3
 80095a6:	2909      	cmp	r1, #9
 80095a8:	d929      	bls.n	80095fe <_strtod_l+0x1a6>
 80095aa:	4622      	mov	r2, r4
 80095ac:	f8d8 1000 	ldr.w	r1, [r8]
 80095b0:	f002 fda0 	bl	800c0f4 <strncmp>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d031      	beq.n	800961c <_strtod_l+0x1c4>
 80095b8:	2000      	movs	r0, #0
 80095ba:	9c05      	ldr	r4, [sp, #20]
 80095bc:	9004      	str	r0, [sp, #16]
 80095be:	463b      	mov	r3, r7
 80095c0:	4602      	mov	r2, r0
 80095c2:	2b65      	cmp	r3, #101	; 0x65
 80095c4:	d001      	beq.n	80095ca <_strtod_l+0x172>
 80095c6:	2b45      	cmp	r3, #69	; 0x45
 80095c8:	d114      	bne.n	80095f4 <_strtod_l+0x19c>
 80095ca:	b924      	cbnz	r4, 80095d6 <_strtod_l+0x17e>
 80095cc:	b910      	cbnz	r0, 80095d4 <_strtod_l+0x17c>
 80095ce:	9b06      	ldr	r3, [sp, #24]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d09e      	beq.n	8009512 <_strtod_l+0xba>
 80095d4:	2400      	movs	r4, #0
 80095d6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80095d8:	1c73      	adds	r3, r6, #1
 80095da:	931b      	str	r3, [sp, #108]	; 0x6c
 80095dc:	7873      	ldrb	r3, [r6, #1]
 80095de:	2b2b      	cmp	r3, #43	; 0x2b
 80095e0:	d078      	beq.n	80096d4 <_strtod_l+0x27c>
 80095e2:	2b2d      	cmp	r3, #45	; 0x2d
 80095e4:	d070      	beq.n	80096c8 <_strtod_l+0x270>
 80095e6:	f04f 0c00 	mov.w	ip, #0
 80095ea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80095ee:	2f09      	cmp	r7, #9
 80095f0:	d97c      	bls.n	80096ec <_strtod_l+0x294>
 80095f2:	961b      	str	r6, [sp, #108]	; 0x6c
 80095f4:	f04f 0e00 	mov.w	lr, #0
 80095f8:	e09a      	b.n	8009730 <_strtod_l+0x2d8>
 80095fa:	2300      	movs	r3, #0
 80095fc:	e7c7      	b.n	800958e <_strtod_l+0x136>
 80095fe:	9905      	ldr	r1, [sp, #20]
 8009600:	2908      	cmp	r1, #8
 8009602:	bfdd      	ittte	le
 8009604:	9907      	ldrle	r1, [sp, #28]
 8009606:	fb02 3301 	mlale	r3, r2, r1, r3
 800960a:	9307      	strle	r3, [sp, #28]
 800960c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009610:	9b05      	ldr	r3, [sp, #20]
 8009612:	3001      	adds	r0, #1
 8009614:	3301      	adds	r3, #1
 8009616:	9305      	str	r3, [sp, #20]
 8009618:	901b      	str	r0, [sp, #108]	; 0x6c
 800961a:	e7bf      	b.n	800959c <_strtod_l+0x144>
 800961c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800961e:	191a      	adds	r2, r3, r4
 8009620:	921b      	str	r2, [sp, #108]	; 0x6c
 8009622:	9a05      	ldr	r2, [sp, #20]
 8009624:	5d1b      	ldrb	r3, [r3, r4]
 8009626:	2a00      	cmp	r2, #0
 8009628:	d037      	beq.n	800969a <_strtod_l+0x242>
 800962a:	9c05      	ldr	r4, [sp, #20]
 800962c:	4602      	mov	r2, r0
 800962e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009632:	2909      	cmp	r1, #9
 8009634:	d913      	bls.n	800965e <_strtod_l+0x206>
 8009636:	2101      	movs	r1, #1
 8009638:	9104      	str	r1, [sp, #16]
 800963a:	e7c2      	b.n	80095c2 <_strtod_l+0x16a>
 800963c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800963e:	1c5a      	adds	r2, r3, #1
 8009640:	921b      	str	r2, [sp, #108]	; 0x6c
 8009642:	785b      	ldrb	r3, [r3, #1]
 8009644:	3001      	adds	r0, #1
 8009646:	2b30      	cmp	r3, #48	; 0x30
 8009648:	d0f8      	beq.n	800963c <_strtod_l+0x1e4>
 800964a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800964e:	2a08      	cmp	r2, #8
 8009650:	f200 84e4 	bhi.w	800a01c <_strtod_l+0xbc4>
 8009654:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009656:	9208      	str	r2, [sp, #32]
 8009658:	4602      	mov	r2, r0
 800965a:	2000      	movs	r0, #0
 800965c:	4604      	mov	r4, r0
 800965e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009662:	f100 0101 	add.w	r1, r0, #1
 8009666:	d012      	beq.n	800968e <_strtod_l+0x236>
 8009668:	440a      	add	r2, r1
 800966a:	eb00 0c04 	add.w	ip, r0, r4
 800966e:	4621      	mov	r1, r4
 8009670:	270a      	movs	r7, #10
 8009672:	458c      	cmp	ip, r1
 8009674:	d113      	bne.n	800969e <_strtod_l+0x246>
 8009676:	1821      	adds	r1, r4, r0
 8009678:	2908      	cmp	r1, #8
 800967a:	f104 0401 	add.w	r4, r4, #1
 800967e:	4404      	add	r4, r0
 8009680:	dc19      	bgt.n	80096b6 <_strtod_l+0x25e>
 8009682:	9b07      	ldr	r3, [sp, #28]
 8009684:	210a      	movs	r1, #10
 8009686:	fb01 e303 	mla	r3, r1, r3, lr
 800968a:	9307      	str	r3, [sp, #28]
 800968c:	2100      	movs	r1, #0
 800968e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009690:	1c58      	adds	r0, r3, #1
 8009692:	901b      	str	r0, [sp, #108]	; 0x6c
 8009694:	785b      	ldrb	r3, [r3, #1]
 8009696:	4608      	mov	r0, r1
 8009698:	e7c9      	b.n	800962e <_strtod_l+0x1d6>
 800969a:	9805      	ldr	r0, [sp, #20]
 800969c:	e7d3      	b.n	8009646 <_strtod_l+0x1ee>
 800969e:	2908      	cmp	r1, #8
 80096a0:	f101 0101 	add.w	r1, r1, #1
 80096a4:	dc03      	bgt.n	80096ae <_strtod_l+0x256>
 80096a6:	9b07      	ldr	r3, [sp, #28]
 80096a8:	437b      	muls	r3, r7
 80096aa:	9307      	str	r3, [sp, #28]
 80096ac:	e7e1      	b.n	8009672 <_strtod_l+0x21a>
 80096ae:	2910      	cmp	r1, #16
 80096b0:	bfd8      	it	le
 80096b2:	437d      	mulle	r5, r7
 80096b4:	e7dd      	b.n	8009672 <_strtod_l+0x21a>
 80096b6:	2c10      	cmp	r4, #16
 80096b8:	bfdc      	itt	le
 80096ba:	210a      	movle	r1, #10
 80096bc:	fb01 e505 	mlale	r5, r1, r5, lr
 80096c0:	e7e4      	b.n	800968c <_strtod_l+0x234>
 80096c2:	2301      	movs	r3, #1
 80096c4:	9304      	str	r3, [sp, #16]
 80096c6:	e781      	b.n	80095cc <_strtod_l+0x174>
 80096c8:	f04f 0c01 	mov.w	ip, #1
 80096cc:	1cb3      	adds	r3, r6, #2
 80096ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80096d0:	78b3      	ldrb	r3, [r6, #2]
 80096d2:	e78a      	b.n	80095ea <_strtod_l+0x192>
 80096d4:	f04f 0c00 	mov.w	ip, #0
 80096d8:	e7f8      	b.n	80096cc <_strtod_l+0x274>
 80096da:	bf00      	nop
 80096dc:	0800c244 	.word	0x0800c244
 80096e0:	7ff00000 	.word	0x7ff00000
 80096e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096e6:	1c5f      	adds	r7, r3, #1
 80096e8:	971b      	str	r7, [sp, #108]	; 0x6c
 80096ea:	785b      	ldrb	r3, [r3, #1]
 80096ec:	2b30      	cmp	r3, #48	; 0x30
 80096ee:	d0f9      	beq.n	80096e4 <_strtod_l+0x28c>
 80096f0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80096f4:	2f08      	cmp	r7, #8
 80096f6:	f63f af7d 	bhi.w	80095f4 <_strtod_l+0x19c>
 80096fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80096fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009700:	930a      	str	r3, [sp, #40]	; 0x28
 8009702:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009704:	1c5f      	adds	r7, r3, #1
 8009706:	971b      	str	r7, [sp, #108]	; 0x6c
 8009708:	785b      	ldrb	r3, [r3, #1]
 800970a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800970e:	f1b8 0f09 	cmp.w	r8, #9
 8009712:	d937      	bls.n	8009784 <_strtod_l+0x32c>
 8009714:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009716:	1a7f      	subs	r7, r7, r1
 8009718:	2f08      	cmp	r7, #8
 800971a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800971e:	dc37      	bgt.n	8009790 <_strtod_l+0x338>
 8009720:	45be      	cmp	lr, r7
 8009722:	bfa8      	it	ge
 8009724:	46be      	movge	lr, r7
 8009726:	f1bc 0f00 	cmp.w	ip, #0
 800972a:	d001      	beq.n	8009730 <_strtod_l+0x2d8>
 800972c:	f1ce 0e00 	rsb	lr, lr, #0
 8009730:	2c00      	cmp	r4, #0
 8009732:	d151      	bne.n	80097d8 <_strtod_l+0x380>
 8009734:	2800      	cmp	r0, #0
 8009736:	f47f aece 	bne.w	80094d6 <_strtod_l+0x7e>
 800973a:	9a06      	ldr	r2, [sp, #24]
 800973c:	2a00      	cmp	r2, #0
 800973e:	f47f aeca 	bne.w	80094d6 <_strtod_l+0x7e>
 8009742:	9a04      	ldr	r2, [sp, #16]
 8009744:	2a00      	cmp	r2, #0
 8009746:	f47f aee4 	bne.w	8009512 <_strtod_l+0xba>
 800974a:	2b4e      	cmp	r3, #78	; 0x4e
 800974c:	d027      	beq.n	800979e <_strtod_l+0x346>
 800974e:	dc21      	bgt.n	8009794 <_strtod_l+0x33c>
 8009750:	2b49      	cmp	r3, #73	; 0x49
 8009752:	f47f aede 	bne.w	8009512 <_strtod_l+0xba>
 8009756:	49a0      	ldr	r1, [pc, #640]	; (80099d8 <_strtod_l+0x580>)
 8009758:	a81b      	add	r0, sp, #108	; 0x6c
 800975a:	f001 fdd7 	bl	800b30c <__match>
 800975e:	2800      	cmp	r0, #0
 8009760:	f43f aed7 	beq.w	8009512 <_strtod_l+0xba>
 8009764:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009766:	499d      	ldr	r1, [pc, #628]	; (80099dc <_strtod_l+0x584>)
 8009768:	3b01      	subs	r3, #1
 800976a:	a81b      	add	r0, sp, #108	; 0x6c
 800976c:	931b      	str	r3, [sp, #108]	; 0x6c
 800976e:	f001 fdcd 	bl	800b30c <__match>
 8009772:	b910      	cbnz	r0, 800977a <_strtod_l+0x322>
 8009774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009776:	3301      	adds	r3, #1
 8009778:	931b      	str	r3, [sp, #108]	; 0x6c
 800977a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80099f0 <_strtod_l+0x598>
 800977e:	f04f 0a00 	mov.w	sl, #0
 8009782:	e6a8      	b.n	80094d6 <_strtod_l+0x7e>
 8009784:	210a      	movs	r1, #10
 8009786:	fb01 3e0e 	mla	lr, r1, lr, r3
 800978a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800978e:	e7b8      	b.n	8009702 <_strtod_l+0x2aa>
 8009790:	46be      	mov	lr, r7
 8009792:	e7c8      	b.n	8009726 <_strtod_l+0x2ce>
 8009794:	2b69      	cmp	r3, #105	; 0x69
 8009796:	d0de      	beq.n	8009756 <_strtod_l+0x2fe>
 8009798:	2b6e      	cmp	r3, #110	; 0x6e
 800979a:	f47f aeba 	bne.w	8009512 <_strtod_l+0xba>
 800979e:	4990      	ldr	r1, [pc, #576]	; (80099e0 <_strtod_l+0x588>)
 80097a0:	a81b      	add	r0, sp, #108	; 0x6c
 80097a2:	f001 fdb3 	bl	800b30c <__match>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	f43f aeb3 	beq.w	8009512 <_strtod_l+0xba>
 80097ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	2b28      	cmp	r3, #40	; 0x28
 80097b2:	d10e      	bne.n	80097d2 <_strtod_l+0x37a>
 80097b4:	aa1e      	add	r2, sp, #120	; 0x78
 80097b6:	498b      	ldr	r1, [pc, #556]	; (80099e4 <_strtod_l+0x58c>)
 80097b8:	a81b      	add	r0, sp, #108	; 0x6c
 80097ba:	f001 fdbb 	bl	800b334 <__hexnan>
 80097be:	2805      	cmp	r0, #5
 80097c0:	d107      	bne.n	80097d2 <_strtod_l+0x37a>
 80097c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80097c4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80097c8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80097cc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80097d0:	e681      	b.n	80094d6 <_strtod_l+0x7e>
 80097d2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80099f8 <_strtod_l+0x5a0>
 80097d6:	e7d2      	b.n	800977e <_strtod_l+0x326>
 80097d8:	ebae 0302 	sub.w	r3, lr, r2
 80097dc:	9306      	str	r3, [sp, #24]
 80097de:	9b05      	ldr	r3, [sp, #20]
 80097e0:	9807      	ldr	r0, [sp, #28]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	bf08      	it	eq
 80097e6:	4623      	moveq	r3, r4
 80097e8:	2c10      	cmp	r4, #16
 80097ea:	9305      	str	r3, [sp, #20]
 80097ec:	46a0      	mov	r8, r4
 80097ee:	bfa8      	it	ge
 80097f0:	f04f 0810 	movge.w	r8, #16
 80097f4:	f7f6 fea6 	bl	8000544 <__aeabi_ui2d>
 80097f8:	2c09      	cmp	r4, #9
 80097fa:	4682      	mov	sl, r0
 80097fc:	468b      	mov	fp, r1
 80097fe:	dc13      	bgt.n	8009828 <_strtod_l+0x3d0>
 8009800:	9b06      	ldr	r3, [sp, #24]
 8009802:	2b00      	cmp	r3, #0
 8009804:	f43f ae67 	beq.w	80094d6 <_strtod_l+0x7e>
 8009808:	9b06      	ldr	r3, [sp, #24]
 800980a:	dd7a      	ble.n	8009902 <_strtod_l+0x4aa>
 800980c:	2b16      	cmp	r3, #22
 800980e:	dc61      	bgt.n	80098d4 <_strtod_l+0x47c>
 8009810:	4a75      	ldr	r2, [pc, #468]	; (80099e8 <_strtod_l+0x590>)
 8009812:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009816:	e9de 0100 	ldrd	r0, r1, [lr]
 800981a:	4652      	mov	r2, sl
 800981c:	465b      	mov	r3, fp
 800981e:	f7f6 ff0b 	bl	8000638 <__aeabi_dmul>
 8009822:	4682      	mov	sl, r0
 8009824:	468b      	mov	fp, r1
 8009826:	e656      	b.n	80094d6 <_strtod_l+0x7e>
 8009828:	4b6f      	ldr	r3, [pc, #444]	; (80099e8 <_strtod_l+0x590>)
 800982a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800982e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009832:	f7f6 ff01 	bl	8000638 <__aeabi_dmul>
 8009836:	4606      	mov	r6, r0
 8009838:	4628      	mov	r0, r5
 800983a:	460f      	mov	r7, r1
 800983c:	f7f6 fe82 	bl	8000544 <__aeabi_ui2d>
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	4630      	mov	r0, r6
 8009846:	4639      	mov	r1, r7
 8009848:	f7f6 fd40 	bl	80002cc <__adddf3>
 800984c:	2c0f      	cmp	r4, #15
 800984e:	4682      	mov	sl, r0
 8009850:	468b      	mov	fp, r1
 8009852:	ddd5      	ble.n	8009800 <_strtod_l+0x3a8>
 8009854:	9b06      	ldr	r3, [sp, #24]
 8009856:	eba4 0808 	sub.w	r8, r4, r8
 800985a:	4498      	add	r8, r3
 800985c:	f1b8 0f00 	cmp.w	r8, #0
 8009860:	f340 8096 	ble.w	8009990 <_strtod_l+0x538>
 8009864:	f018 030f 	ands.w	r3, r8, #15
 8009868:	d00a      	beq.n	8009880 <_strtod_l+0x428>
 800986a:	495f      	ldr	r1, [pc, #380]	; (80099e8 <_strtod_l+0x590>)
 800986c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009870:	4652      	mov	r2, sl
 8009872:	465b      	mov	r3, fp
 8009874:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009878:	f7f6 fede 	bl	8000638 <__aeabi_dmul>
 800987c:	4682      	mov	sl, r0
 800987e:	468b      	mov	fp, r1
 8009880:	f038 080f 	bics.w	r8, r8, #15
 8009884:	d073      	beq.n	800996e <_strtod_l+0x516>
 8009886:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800988a:	dd47      	ble.n	800991c <_strtod_l+0x4c4>
 800988c:	2400      	movs	r4, #0
 800988e:	46a0      	mov	r8, r4
 8009890:	9407      	str	r4, [sp, #28]
 8009892:	9405      	str	r4, [sp, #20]
 8009894:	2322      	movs	r3, #34	; 0x22
 8009896:	f8df b158 	ldr.w	fp, [pc, #344]	; 80099f0 <_strtod_l+0x598>
 800989a:	f8c9 3000 	str.w	r3, [r9]
 800989e:	f04f 0a00 	mov.w	sl, #0
 80098a2:	9b07      	ldr	r3, [sp, #28]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f43f ae16 	beq.w	80094d6 <_strtod_l+0x7e>
 80098aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80098ac:	4648      	mov	r0, r9
 80098ae:	f001 fe3e 	bl	800b52e <_Bfree>
 80098b2:	9905      	ldr	r1, [sp, #20]
 80098b4:	4648      	mov	r0, r9
 80098b6:	f001 fe3a 	bl	800b52e <_Bfree>
 80098ba:	4641      	mov	r1, r8
 80098bc:	4648      	mov	r0, r9
 80098be:	f001 fe36 	bl	800b52e <_Bfree>
 80098c2:	9907      	ldr	r1, [sp, #28]
 80098c4:	4648      	mov	r0, r9
 80098c6:	f001 fe32 	bl	800b52e <_Bfree>
 80098ca:	4621      	mov	r1, r4
 80098cc:	4648      	mov	r0, r9
 80098ce:	f001 fe2e 	bl	800b52e <_Bfree>
 80098d2:	e600      	b.n	80094d6 <_strtod_l+0x7e>
 80098d4:	9a06      	ldr	r2, [sp, #24]
 80098d6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80098da:	4293      	cmp	r3, r2
 80098dc:	dbba      	blt.n	8009854 <_strtod_l+0x3fc>
 80098de:	4d42      	ldr	r5, [pc, #264]	; (80099e8 <_strtod_l+0x590>)
 80098e0:	f1c4 040f 	rsb	r4, r4, #15
 80098e4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80098e8:	4652      	mov	r2, sl
 80098ea:	465b      	mov	r3, fp
 80098ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098f0:	f7f6 fea2 	bl	8000638 <__aeabi_dmul>
 80098f4:	9b06      	ldr	r3, [sp, #24]
 80098f6:	1b1c      	subs	r4, r3, r4
 80098f8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80098fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009900:	e78d      	b.n	800981e <_strtod_l+0x3c6>
 8009902:	f113 0f16 	cmn.w	r3, #22
 8009906:	dba5      	blt.n	8009854 <_strtod_l+0x3fc>
 8009908:	4a37      	ldr	r2, [pc, #220]	; (80099e8 <_strtod_l+0x590>)
 800990a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800990e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009912:	4650      	mov	r0, sl
 8009914:	4659      	mov	r1, fp
 8009916:	f7f6 ffb9 	bl	800088c <__aeabi_ddiv>
 800991a:	e782      	b.n	8009822 <_strtod_l+0x3ca>
 800991c:	2300      	movs	r3, #0
 800991e:	4e33      	ldr	r6, [pc, #204]	; (80099ec <_strtod_l+0x594>)
 8009920:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009924:	4650      	mov	r0, sl
 8009926:	4659      	mov	r1, fp
 8009928:	461d      	mov	r5, r3
 800992a:	f1b8 0f01 	cmp.w	r8, #1
 800992e:	dc21      	bgt.n	8009974 <_strtod_l+0x51c>
 8009930:	b10b      	cbz	r3, 8009936 <_strtod_l+0x4de>
 8009932:	4682      	mov	sl, r0
 8009934:	468b      	mov	fp, r1
 8009936:	4b2d      	ldr	r3, [pc, #180]	; (80099ec <_strtod_l+0x594>)
 8009938:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800993c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009940:	4652      	mov	r2, sl
 8009942:	465b      	mov	r3, fp
 8009944:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009948:	f7f6 fe76 	bl	8000638 <__aeabi_dmul>
 800994c:	4b28      	ldr	r3, [pc, #160]	; (80099f0 <_strtod_l+0x598>)
 800994e:	460a      	mov	r2, r1
 8009950:	400b      	ands	r3, r1
 8009952:	4928      	ldr	r1, [pc, #160]	; (80099f4 <_strtod_l+0x59c>)
 8009954:	428b      	cmp	r3, r1
 8009956:	4682      	mov	sl, r0
 8009958:	d898      	bhi.n	800988c <_strtod_l+0x434>
 800995a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800995e:	428b      	cmp	r3, r1
 8009960:	bf86      	itte	hi
 8009962:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80099fc <_strtod_l+0x5a4>
 8009966:	f04f 3aff 	movhi.w	sl, #4294967295
 800996a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800996e:	2300      	movs	r3, #0
 8009970:	9304      	str	r3, [sp, #16]
 8009972:	e077      	b.n	8009a64 <_strtod_l+0x60c>
 8009974:	f018 0f01 	tst.w	r8, #1
 8009978:	d006      	beq.n	8009988 <_strtod_l+0x530>
 800997a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	f7f6 fe59 	bl	8000638 <__aeabi_dmul>
 8009986:	2301      	movs	r3, #1
 8009988:	3501      	adds	r5, #1
 800998a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800998e:	e7cc      	b.n	800992a <_strtod_l+0x4d2>
 8009990:	d0ed      	beq.n	800996e <_strtod_l+0x516>
 8009992:	f1c8 0800 	rsb	r8, r8, #0
 8009996:	f018 020f 	ands.w	r2, r8, #15
 800999a:	d00a      	beq.n	80099b2 <_strtod_l+0x55a>
 800999c:	4b12      	ldr	r3, [pc, #72]	; (80099e8 <_strtod_l+0x590>)
 800999e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099a2:	4650      	mov	r0, sl
 80099a4:	4659      	mov	r1, fp
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	f7f6 ff6f 	bl	800088c <__aeabi_ddiv>
 80099ae:	4682      	mov	sl, r0
 80099b0:	468b      	mov	fp, r1
 80099b2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80099b6:	d0da      	beq.n	800996e <_strtod_l+0x516>
 80099b8:	f1b8 0f1f 	cmp.w	r8, #31
 80099bc:	dd20      	ble.n	8009a00 <_strtod_l+0x5a8>
 80099be:	2400      	movs	r4, #0
 80099c0:	46a0      	mov	r8, r4
 80099c2:	9407      	str	r4, [sp, #28]
 80099c4:	9405      	str	r4, [sp, #20]
 80099c6:	2322      	movs	r3, #34	; 0x22
 80099c8:	f04f 0a00 	mov.w	sl, #0
 80099cc:	f04f 0b00 	mov.w	fp, #0
 80099d0:	f8c9 3000 	str.w	r3, [r9]
 80099d4:	e765      	b.n	80098a2 <_strtod_l+0x44a>
 80099d6:	bf00      	nop
 80099d8:	0800c20d 	.word	0x0800c20d
 80099dc:	0800c29b 	.word	0x0800c29b
 80099e0:	0800c215 	.word	0x0800c215
 80099e4:	0800c258 	.word	0x0800c258
 80099e8:	0800c2d8 	.word	0x0800c2d8
 80099ec:	0800c2b0 	.word	0x0800c2b0
 80099f0:	7ff00000 	.word	0x7ff00000
 80099f4:	7ca00000 	.word	0x7ca00000
 80099f8:	fff80000 	.word	0xfff80000
 80099fc:	7fefffff 	.word	0x7fefffff
 8009a00:	f018 0310 	ands.w	r3, r8, #16
 8009a04:	bf18      	it	ne
 8009a06:	236a      	movne	r3, #106	; 0x6a
 8009a08:	4da0      	ldr	r5, [pc, #640]	; (8009c8c <_strtod_l+0x834>)
 8009a0a:	9304      	str	r3, [sp, #16]
 8009a0c:	4650      	mov	r0, sl
 8009a0e:	4659      	mov	r1, fp
 8009a10:	2300      	movs	r3, #0
 8009a12:	f1b8 0f00 	cmp.w	r8, #0
 8009a16:	f300 810a 	bgt.w	8009c2e <_strtod_l+0x7d6>
 8009a1a:	b10b      	cbz	r3, 8009a20 <_strtod_l+0x5c8>
 8009a1c:	4682      	mov	sl, r0
 8009a1e:	468b      	mov	fp, r1
 8009a20:	9b04      	ldr	r3, [sp, #16]
 8009a22:	b1bb      	cbz	r3, 8009a54 <_strtod_l+0x5fc>
 8009a24:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009a28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	4659      	mov	r1, fp
 8009a30:	dd10      	ble.n	8009a54 <_strtod_l+0x5fc>
 8009a32:	2b1f      	cmp	r3, #31
 8009a34:	f340 8107 	ble.w	8009c46 <_strtod_l+0x7ee>
 8009a38:	2b34      	cmp	r3, #52	; 0x34
 8009a3a:	bfde      	ittt	le
 8009a3c:	3b20      	suble	r3, #32
 8009a3e:	f04f 32ff 	movle.w	r2, #4294967295
 8009a42:	fa02 f303 	lslle.w	r3, r2, r3
 8009a46:	f04f 0a00 	mov.w	sl, #0
 8009a4a:	bfcc      	ite	gt
 8009a4c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009a50:	ea03 0b01 	andle.w	fp, r3, r1
 8009a54:	2200      	movs	r2, #0
 8009a56:	2300      	movs	r3, #0
 8009a58:	4650      	mov	r0, sl
 8009a5a:	4659      	mov	r1, fp
 8009a5c:	f7f7 f854 	bl	8000b08 <__aeabi_dcmpeq>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d1ac      	bne.n	80099be <_strtod_l+0x566>
 8009a64:	9b07      	ldr	r3, [sp, #28]
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	9a05      	ldr	r2, [sp, #20]
 8009a6a:	9908      	ldr	r1, [sp, #32]
 8009a6c:	4623      	mov	r3, r4
 8009a6e:	4648      	mov	r0, r9
 8009a70:	f001 fdaf 	bl	800b5d2 <__s2b>
 8009a74:	9007      	str	r0, [sp, #28]
 8009a76:	2800      	cmp	r0, #0
 8009a78:	f43f af08 	beq.w	800988c <_strtod_l+0x434>
 8009a7c:	9a06      	ldr	r2, [sp, #24]
 8009a7e:	9b06      	ldr	r3, [sp, #24]
 8009a80:	2a00      	cmp	r2, #0
 8009a82:	f1c3 0300 	rsb	r3, r3, #0
 8009a86:	bfa8      	it	ge
 8009a88:	2300      	movge	r3, #0
 8009a8a:	930e      	str	r3, [sp, #56]	; 0x38
 8009a8c:	2400      	movs	r4, #0
 8009a8e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009a92:	9316      	str	r3, [sp, #88]	; 0x58
 8009a94:	46a0      	mov	r8, r4
 8009a96:	9b07      	ldr	r3, [sp, #28]
 8009a98:	4648      	mov	r0, r9
 8009a9a:	6859      	ldr	r1, [r3, #4]
 8009a9c:	f001 fd13 	bl	800b4c6 <_Balloc>
 8009aa0:	9005      	str	r0, [sp, #20]
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	f43f aef6 	beq.w	8009894 <_strtod_l+0x43c>
 8009aa8:	9b07      	ldr	r3, [sp, #28]
 8009aaa:	691a      	ldr	r2, [r3, #16]
 8009aac:	3202      	adds	r2, #2
 8009aae:	f103 010c 	add.w	r1, r3, #12
 8009ab2:	0092      	lsls	r2, r2, #2
 8009ab4:	300c      	adds	r0, #12
 8009ab6:	f001 fcfb 	bl	800b4b0 <memcpy>
 8009aba:	aa1e      	add	r2, sp, #120	; 0x78
 8009abc:	a91d      	add	r1, sp, #116	; 0x74
 8009abe:	ec4b ab10 	vmov	d0, sl, fp
 8009ac2:	4648      	mov	r0, r9
 8009ac4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009ac8:	f002 f83e 	bl	800bb48 <__d2b>
 8009acc:	901c      	str	r0, [sp, #112]	; 0x70
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	f43f aee0 	beq.w	8009894 <_strtod_l+0x43c>
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	4648      	mov	r0, r9
 8009ad8:	f001 fe07 	bl	800b6ea <__i2b>
 8009adc:	4680      	mov	r8, r0
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	f43f aed8 	beq.w	8009894 <_strtod_l+0x43c>
 8009ae4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009ae6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009ae8:	2e00      	cmp	r6, #0
 8009aea:	bfab      	itete	ge
 8009aec:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009aee:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009af0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009af2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8009af4:	bfac      	ite	ge
 8009af6:	18f7      	addge	r7, r6, r3
 8009af8:	1b9d      	sublt	r5, r3, r6
 8009afa:	9b04      	ldr	r3, [sp, #16]
 8009afc:	1af6      	subs	r6, r6, r3
 8009afe:	4416      	add	r6, r2
 8009b00:	4b63      	ldr	r3, [pc, #396]	; (8009c90 <_strtod_l+0x838>)
 8009b02:	3e01      	subs	r6, #1
 8009b04:	429e      	cmp	r6, r3
 8009b06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009b0a:	f280 80af 	bge.w	8009c6c <_strtod_l+0x814>
 8009b0e:	1b9b      	subs	r3, r3, r6
 8009b10:	2b1f      	cmp	r3, #31
 8009b12:	eba2 0203 	sub.w	r2, r2, r3
 8009b16:	f04f 0101 	mov.w	r1, #1
 8009b1a:	f300 809b 	bgt.w	8009c54 <_strtod_l+0x7fc>
 8009b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b22:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b24:	2300      	movs	r3, #0
 8009b26:	930a      	str	r3, [sp, #40]	; 0x28
 8009b28:	18be      	adds	r6, r7, r2
 8009b2a:	9b04      	ldr	r3, [sp, #16]
 8009b2c:	42b7      	cmp	r7, r6
 8009b2e:	4415      	add	r5, r2
 8009b30:	441d      	add	r5, r3
 8009b32:	463b      	mov	r3, r7
 8009b34:	bfa8      	it	ge
 8009b36:	4633      	movge	r3, r6
 8009b38:	42ab      	cmp	r3, r5
 8009b3a:	bfa8      	it	ge
 8009b3c:	462b      	movge	r3, r5
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	bfc2      	ittt	gt
 8009b42:	1af6      	subgt	r6, r6, r3
 8009b44:	1aed      	subgt	r5, r5, r3
 8009b46:	1aff      	subgt	r7, r7, r3
 8009b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b4a:	b1bb      	cbz	r3, 8009b7c <_strtod_l+0x724>
 8009b4c:	4641      	mov	r1, r8
 8009b4e:	461a      	mov	r2, r3
 8009b50:	4648      	mov	r0, r9
 8009b52:	f001 fe69 	bl	800b828 <__pow5mult>
 8009b56:	4680      	mov	r8, r0
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	f43f ae9b 	beq.w	8009894 <_strtod_l+0x43c>
 8009b5e:	4601      	mov	r1, r0
 8009b60:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009b62:	4648      	mov	r0, r9
 8009b64:	f001 fdca 	bl	800b6fc <__multiply>
 8009b68:	900c      	str	r0, [sp, #48]	; 0x30
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	f43f ae92 	beq.w	8009894 <_strtod_l+0x43c>
 8009b70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009b72:	4648      	mov	r0, r9
 8009b74:	f001 fcdb 	bl	800b52e <_Bfree>
 8009b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b7a:	931c      	str	r3, [sp, #112]	; 0x70
 8009b7c:	2e00      	cmp	r6, #0
 8009b7e:	dc7a      	bgt.n	8009c76 <_strtod_l+0x81e>
 8009b80:	9b06      	ldr	r3, [sp, #24]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	dd08      	ble.n	8009b98 <_strtod_l+0x740>
 8009b86:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009b88:	9905      	ldr	r1, [sp, #20]
 8009b8a:	4648      	mov	r0, r9
 8009b8c:	f001 fe4c 	bl	800b828 <__pow5mult>
 8009b90:	9005      	str	r0, [sp, #20]
 8009b92:	2800      	cmp	r0, #0
 8009b94:	f43f ae7e 	beq.w	8009894 <_strtod_l+0x43c>
 8009b98:	2d00      	cmp	r5, #0
 8009b9a:	dd08      	ble.n	8009bae <_strtod_l+0x756>
 8009b9c:	462a      	mov	r2, r5
 8009b9e:	9905      	ldr	r1, [sp, #20]
 8009ba0:	4648      	mov	r0, r9
 8009ba2:	f001 fe8f 	bl	800b8c4 <__lshift>
 8009ba6:	9005      	str	r0, [sp, #20]
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	f43f ae73 	beq.w	8009894 <_strtod_l+0x43c>
 8009bae:	2f00      	cmp	r7, #0
 8009bb0:	dd08      	ble.n	8009bc4 <_strtod_l+0x76c>
 8009bb2:	4641      	mov	r1, r8
 8009bb4:	463a      	mov	r2, r7
 8009bb6:	4648      	mov	r0, r9
 8009bb8:	f001 fe84 	bl	800b8c4 <__lshift>
 8009bbc:	4680      	mov	r8, r0
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	f43f ae68 	beq.w	8009894 <_strtod_l+0x43c>
 8009bc4:	9a05      	ldr	r2, [sp, #20]
 8009bc6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009bc8:	4648      	mov	r0, r9
 8009bca:	f001 fee9 	bl	800b9a0 <__mdiff>
 8009bce:	4604      	mov	r4, r0
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	f43f ae5f 	beq.w	8009894 <_strtod_l+0x43c>
 8009bd6:	68c3      	ldr	r3, [r0, #12]
 8009bd8:	930c      	str	r3, [sp, #48]	; 0x30
 8009bda:	2300      	movs	r3, #0
 8009bdc:	60c3      	str	r3, [r0, #12]
 8009bde:	4641      	mov	r1, r8
 8009be0:	f001 fec4 	bl	800b96c <__mcmp>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	da55      	bge.n	8009c94 <_strtod_l+0x83c>
 8009be8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bea:	b9e3      	cbnz	r3, 8009c26 <_strtod_l+0x7ce>
 8009bec:	f1ba 0f00 	cmp.w	sl, #0
 8009bf0:	d119      	bne.n	8009c26 <_strtod_l+0x7ce>
 8009bf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bf6:	b9b3      	cbnz	r3, 8009c26 <_strtod_l+0x7ce>
 8009bf8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009bfc:	0d1b      	lsrs	r3, r3, #20
 8009bfe:	051b      	lsls	r3, r3, #20
 8009c00:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009c04:	d90f      	bls.n	8009c26 <_strtod_l+0x7ce>
 8009c06:	6963      	ldr	r3, [r4, #20]
 8009c08:	b913      	cbnz	r3, 8009c10 <_strtod_l+0x7b8>
 8009c0a:	6923      	ldr	r3, [r4, #16]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	dd0a      	ble.n	8009c26 <_strtod_l+0x7ce>
 8009c10:	4621      	mov	r1, r4
 8009c12:	2201      	movs	r2, #1
 8009c14:	4648      	mov	r0, r9
 8009c16:	f001 fe55 	bl	800b8c4 <__lshift>
 8009c1a:	4641      	mov	r1, r8
 8009c1c:	4604      	mov	r4, r0
 8009c1e:	f001 fea5 	bl	800b96c <__mcmp>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	dc67      	bgt.n	8009cf6 <_strtod_l+0x89e>
 8009c26:	9b04      	ldr	r3, [sp, #16]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d171      	bne.n	8009d10 <_strtod_l+0x8b8>
 8009c2c:	e63d      	b.n	80098aa <_strtod_l+0x452>
 8009c2e:	f018 0f01 	tst.w	r8, #1
 8009c32:	d004      	beq.n	8009c3e <_strtod_l+0x7e6>
 8009c34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c38:	f7f6 fcfe 	bl	8000638 <__aeabi_dmul>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009c42:	3508      	adds	r5, #8
 8009c44:	e6e5      	b.n	8009a12 <_strtod_l+0x5ba>
 8009c46:	f04f 32ff 	mov.w	r2, #4294967295
 8009c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c4e:	ea03 0a0a 	and.w	sl, r3, sl
 8009c52:	e6ff      	b.n	8009a54 <_strtod_l+0x5fc>
 8009c54:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009c58:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009c5c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009c60:	36e2      	adds	r6, #226	; 0xe2
 8009c62:	fa01 f306 	lsl.w	r3, r1, r6
 8009c66:	930a      	str	r3, [sp, #40]	; 0x28
 8009c68:	910f      	str	r1, [sp, #60]	; 0x3c
 8009c6a:	e75d      	b.n	8009b28 <_strtod_l+0x6d0>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c70:	2301      	movs	r3, #1
 8009c72:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c74:	e758      	b.n	8009b28 <_strtod_l+0x6d0>
 8009c76:	4632      	mov	r2, r6
 8009c78:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009c7a:	4648      	mov	r0, r9
 8009c7c:	f001 fe22 	bl	800b8c4 <__lshift>
 8009c80:	901c      	str	r0, [sp, #112]	; 0x70
 8009c82:	2800      	cmp	r0, #0
 8009c84:	f47f af7c 	bne.w	8009b80 <_strtod_l+0x728>
 8009c88:	e604      	b.n	8009894 <_strtod_l+0x43c>
 8009c8a:	bf00      	nop
 8009c8c:	0800c270 	.word	0x0800c270
 8009c90:	fffffc02 	.word	0xfffffc02
 8009c94:	465d      	mov	r5, fp
 8009c96:	f040 8086 	bne.w	8009da6 <_strtod_l+0x94e>
 8009c9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ca0:	b32a      	cbz	r2, 8009cee <_strtod_l+0x896>
 8009ca2:	4aaf      	ldr	r2, [pc, #700]	; (8009f60 <_strtod_l+0xb08>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d153      	bne.n	8009d50 <_strtod_l+0x8f8>
 8009ca8:	9b04      	ldr	r3, [sp, #16]
 8009caa:	4650      	mov	r0, sl
 8009cac:	b1d3      	cbz	r3, 8009ce4 <_strtod_l+0x88c>
 8009cae:	4aad      	ldr	r2, [pc, #692]	; (8009f64 <_strtod_l+0xb0c>)
 8009cb0:	402a      	ands	r2, r5
 8009cb2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009cb6:	f04f 31ff 	mov.w	r1, #4294967295
 8009cba:	d816      	bhi.n	8009cea <_strtod_l+0x892>
 8009cbc:	0d12      	lsrs	r2, r2, #20
 8009cbe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8009cc6:	4298      	cmp	r0, r3
 8009cc8:	d142      	bne.n	8009d50 <_strtod_l+0x8f8>
 8009cca:	4ba7      	ldr	r3, [pc, #668]	; (8009f68 <_strtod_l+0xb10>)
 8009ccc:	429d      	cmp	r5, r3
 8009cce:	d102      	bne.n	8009cd6 <_strtod_l+0x87e>
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	f43f addf 	beq.w	8009894 <_strtod_l+0x43c>
 8009cd6:	4ba3      	ldr	r3, [pc, #652]	; (8009f64 <_strtod_l+0xb0c>)
 8009cd8:	402b      	ands	r3, r5
 8009cda:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009cde:	f04f 0a00 	mov.w	sl, #0
 8009ce2:	e7a0      	b.n	8009c26 <_strtod_l+0x7ce>
 8009ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce8:	e7ed      	b.n	8009cc6 <_strtod_l+0x86e>
 8009cea:	460b      	mov	r3, r1
 8009cec:	e7eb      	b.n	8009cc6 <_strtod_l+0x86e>
 8009cee:	bb7b      	cbnz	r3, 8009d50 <_strtod_l+0x8f8>
 8009cf0:	f1ba 0f00 	cmp.w	sl, #0
 8009cf4:	d12c      	bne.n	8009d50 <_strtod_l+0x8f8>
 8009cf6:	9904      	ldr	r1, [sp, #16]
 8009cf8:	4a9a      	ldr	r2, [pc, #616]	; (8009f64 <_strtod_l+0xb0c>)
 8009cfa:	465b      	mov	r3, fp
 8009cfc:	b1f1      	cbz	r1, 8009d3c <_strtod_l+0x8e4>
 8009cfe:	ea02 010b 	and.w	r1, r2, fp
 8009d02:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009d06:	dc19      	bgt.n	8009d3c <_strtod_l+0x8e4>
 8009d08:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009d0c:	f77f ae5b 	ble.w	80099c6 <_strtod_l+0x56e>
 8009d10:	4a96      	ldr	r2, [pc, #600]	; (8009f6c <_strtod_l+0xb14>)
 8009d12:	2300      	movs	r3, #0
 8009d14:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009d18:	4650      	mov	r0, sl
 8009d1a:	4659      	mov	r1, fp
 8009d1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009d20:	f7f6 fc8a 	bl	8000638 <__aeabi_dmul>
 8009d24:	4682      	mov	sl, r0
 8009d26:	468b      	mov	fp, r1
 8009d28:	2900      	cmp	r1, #0
 8009d2a:	f47f adbe 	bne.w	80098aa <_strtod_l+0x452>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	f47f adbb 	bne.w	80098aa <_strtod_l+0x452>
 8009d34:	2322      	movs	r3, #34	; 0x22
 8009d36:	f8c9 3000 	str.w	r3, [r9]
 8009d3a:	e5b6      	b.n	80098aa <_strtod_l+0x452>
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009d42:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009d46:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009d4a:	f04f 3aff 	mov.w	sl, #4294967295
 8009d4e:	e76a      	b.n	8009c26 <_strtod_l+0x7ce>
 8009d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d52:	b193      	cbz	r3, 8009d7a <_strtod_l+0x922>
 8009d54:	422b      	tst	r3, r5
 8009d56:	f43f af66 	beq.w	8009c26 <_strtod_l+0x7ce>
 8009d5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d5c:	9a04      	ldr	r2, [sp, #16]
 8009d5e:	4650      	mov	r0, sl
 8009d60:	4659      	mov	r1, fp
 8009d62:	b173      	cbz	r3, 8009d82 <_strtod_l+0x92a>
 8009d64:	f7ff fb5a 	bl	800941c <sulp>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d70:	f7f6 faac 	bl	80002cc <__adddf3>
 8009d74:	4682      	mov	sl, r0
 8009d76:	468b      	mov	fp, r1
 8009d78:	e755      	b.n	8009c26 <_strtod_l+0x7ce>
 8009d7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d7c:	ea13 0f0a 	tst.w	r3, sl
 8009d80:	e7e9      	b.n	8009d56 <_strtod_l+0x8fe>
 8009d82:	f7ff fb4b 	bl	800941c <sulp>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d8e:	f7f6 fa9b 	bl	80002c8 <__aeabi_dsub>
 8009d92:	2200      	movs	r2, #0
 8009d94:	2300      	movs	r3, #0
 8009d96:	4682      	mov	sl, r0
 8009d98:	468b      	mov	fp, r1
 8009d9a:	f7f6 feb5 	bl	8000b08 <__aeabi_dcmpeq>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	f47f ae11 	bne.w	80099c6 <_strtod_l+0x56e>
 8009da4:	e73f      	b.n	8009c26 <_strtod_l+0x7ce>
 8009da6:	4641      	mov	r1, r8
 8009da8:	4620      	mov	r0, r4
 8009daa:	f001 ff1c 	bl	800bbe6 <__ratio>
 8009dae:	ec57 6b10 	vmov	r6, r7, d0
 8009db2:	2200      	movs	r2, #0
 8009db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009db8:	ee10 0a10 	vmov	r0, s0
 8009dbc:	4639      	mov	r1, r7
 8009dbe:	f7f6 feb7 	bl	8000b30 <__aeabi_dcmple>
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	d077      	beq.n	8009eb6 <_strtod_l+0xa5e>
 8009dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d04a      	beq.n	8009e62 <_strtod_l+0xa0a>
 8009dcc:	4b68      	ldr	r3, [pc, #416]	; (8009f70 <_strtod_l+0xb18>)
 8009dce:	2200      	movs	r2, #0
 8009dd0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009dd4:	4f66      	ldr	r7, [pc, #408]	; (8009f70 <_strtod_l+0xb18>)
 8009dd6:	2600      	movs	r6, #0
 8009dd8:	4b62      	ldr	r3, [pc, #392]	; (8009f64 <_strtod_l+0xb0c>)
 8009dda:	402b      	ands	r3, r5
 8009ddc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009de0:	4b64      	ldr	r3, [pc, #400]	; (8009f74 <_strtod_l+0xb1c>)
 8009de2:	429a      	cmp	r2, r3
 8009de4:	f040 80ce 	bne.w	8009f84 <_strtod_l+0xb2c>
 8009de8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009dec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009df0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009df4:	ec4b ab10 	vmov	d0, sl, fp
 8009df8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009dfc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009e00:	f001 fe2c 	bl	800ba5c <__ulp>
 8009e04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e08:	ec53 2b10 	vmov	r2, r3, d0
 8009e0c:	f7f6 fc14 	bl	8000638 <__aeabi_dmul>
 8009e10:	4652      	mov	r2, sl
 8009e12:	465b      	mov	r3, fp
 8009e14:	f7f6 fa5a 	bl	80002cc <__adddf3>
 8009e18:	460b      	mov	r3, r1
 8009e1a:	4952      	ldr	r1, [pc, #328]	; (8009f64 <_strtod_l+0xb0c>)
 8009e1c:	4a56      	ldr	r2, [pc, #344]	; (8009f78 <_strtod_l+0xb20>)
 8009e1e:	4019      	ands	r1, r3
 8009e20:	4291      	cmp	r1, r2
 8009e22:	4682      	mov	sl, r0
 8009e24:	d95b      	bls.n	8009ede <_strtod_l+0xa86>
 8009e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e28:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d103      	bne.n	8009e38 <_strtod_l+0x9e0>
 8009e30:	9b08      	ldr	r3, [sp, #32]
 8009e32:	3301      	adds	r3, #1
 8009e34:	f43f ad2e 	beq.w	8009894 <_strtod_l+0x43c>
 8009e38:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009f68 <_strtod_l+0xb10>
 8009e3c:	f04f 3aff 	mov.w	sl, #4294967295
 8009e40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009e42:	4648      	mov	r0, r9
 8009e44:	f001 fb73 	bl	800b52e <_Bfree>
 8009e48:	9905      	ldr	r1, [sp, #20]
 8009e4a:	4648      	mov	r0, r9
 8009e4c:	f001 fb6f 	bl	800b52e <_Bfree>
 8009e50:	4641      	mov	r1, r8
 8009e52:	4648      	mov	r0, r9
 8009e54:	f001 fb6b 	bl	800b52e <_Bfree>
 8009e58:	4621      	mov	r1, r4
 8009e5a:	4648      	mov	r0, r9
 8009e5c:	f001 fb67 	bl	800b52e <_Bfree>
 8009e60:	e619      	b.n	8009a96 <_strtod_l+0x63e>
 8009e62:	f1ba 0f00 	cmp.w	sl, #0
 8009e66:	d11a      	bne.n	8009e9e <_strtod_l+0xa46>
 8009e68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e6c:	b9eb      	cbnz	r3, 8009eaa <_strtod_l+0xa52>
 8009e6e:	2200      	movs	r2, #0
 8009e70:	4b3f      	ldr	r3, [pc, #252]	; (8009f70 <_strtod_l+0xb18>)
 8009e72:	4630      	mov	r0, r6
 8009e74:	4639      	mov	r1, r7
 8009e76:	f7f6 fe51 	bl	8000b1c <__aeabi_dcmplt>
 8009e7a:	b9c8      	cbnz	r0, 8009eb0 <_strtod_l+0xa58>
 8009e7c:	4630      	mov	r0, r6
 8009e7e:	4639      	mov	r1, r7
 8009e80:	2200      	movs	r2, #0
 8009e82:	4b3e      	ldr	r3, [pc, #248]	; (8009f7c <_strtod_l+0xb24>)
 8009e84:	f7f6 fbd8 	bl	8000638 <__aeabi_dmul>
 8009e88:	4606      	mov	r6, r0
 8009e8a:	460f      	mov	r7, r1
 8009e8c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009e90:	9618      	str	r6, [sp, #96]	; 0x60
 8009e92:	9319      	str	r3, [sp, #100]	; 0x64
 8009e94:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009e98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009e9c:	e79c      	b.n	8009dd8 <_strtod_l+0x980>
 8009e9e:	f1ba 0f01 	cmp.w	sl, #1
 8009ea2:	d102      	bne.n	8009eaa <_strtod_l+0xa52>
 8009ea4:	2d00      	cmp	r5, #0
 8009ea6:	f43f ad8e 	beq.w	80099c6 <_strtod_l+0x56e>
 8009eaa:	2200      	movs	r2, #0
 8009eac:	4b34      	ldr	r3, [pc, #208]	; (8009f80 <_strtod_l+0xb28>)
 8009eae:	e78f      	b.n	8009dd0 <_strtod_l+0x978>
 8009eb0:	2600      	movs	r6, #0
 8009eb2:	4f32      	ldr	r7, [pc, #200]	; (8009f7c <_strtod_l+0xb24>)
 8009eb4:	e7ea      	b.n	8009e8c <_strtod_l+0xa34>
 8009eb6:	4b31      	ldr	r3, [pc, #196]	; (8009f7c <_strtod_l+0xb24>)
 8009eb8:	4630      	mov	r0, r6
 8009eba:	4639      	mov	r1, r7
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f7f6 fbbb 	bl	8000638 <__aeabi_dmul>
 8009ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ec4:	4606      	mov	r6, r0
 8009ec6:	460f      	mov	r7, r1
 8009ec8:	b933      	cbnz	r3, 8009ed8 <_strtod_l+0xa80>
 8009eca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ece:	9010      	str	r0, [sp, #64]	; 0x40
 8009ed0:	9311      	str	r3, [sp, #68]	; 0x44
 8009ed2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ed6:	e7df      	b.n	8009e98 <_strtod_l+0xa40>
 8009ed8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009edc:	e7f9      	b.n	8009ed2 <_strtod_l+0xa7a>
 8009ede:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009ee2:	9b04      	ldr	r3, [sp, #16]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1ab      	bne.n	8009e40 <_strtod_l+0x9e8>
 8009ee8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009eec:	0d1b      	lsrs	r3, r3, #20
 8009eee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ef0:	051b      	lsls	r3, r3, #20
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	465d      	mov	r5, fp
 8009ef6:	d1a3      	bne.n	8009e40 <_strtod_l+0x9e8>
 8009ef8:	4639      	mov	r1, r7
 8009efa:	4630      	mov	r0, r6
 8009efc:	f7f6 fe4c 	bl	8000b98 <__aeabi_d2iz>
 8009f00:	f7f6 fb30 	bl	8000564 <__aeabi_i2d>
 8009f04:	460b      	mov	r3, r1
 8009f06:	4602      	mov	r2, r0
 8009f08:	4639      	mov	r1, r7
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f7f6 f9dc 	bl	80002c8 <__aeabi_dsub>
 8009f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f12:	4606      	mov	r6, r0
 8009f14:	460f      	mov	r7, r1
 8009f16:	b933      	cbnz	r3, 8009f26 <_strtod_l+0xace>
 8009f18:	f1ba 0f00 	cmp.w	sl, #0
 8009f1c:	d103      	bne.n	8009f26 <_strtod_l+0xace>
 8009f1e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8009f22:	2d00      	cmp	r5, #0
 8009f24:	d06d      	beq.n	800a002 <_strtod_l+0xbaa>
 8009f26:	a30a      	add	r3, pc, #40	; (adr r3, 8009f50 <_strtod_l+0xaf8>)
 8009f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	4639      	mov	r1, r7
 8009f30:	f7f6 fdf4 	bl	8000b1c <__aeabi_dcmplt>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	f47f acb8 	bne.w	80098aa <_strtod_l+0x452>
 8009f3a:	a307      	add	r3, pc, #28	; (adr r3, 8009f58 <_strtod_l+0xb00>)
 8009f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f40:	4630      	mov	r0, r6
 8009f42:	4639      	mov	r1, r7
 8009f44:	f7f6 fe08 	bl	8000b58 <__aeabi_dcmpgt>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	f43f af79 	beq.w	8009e40 <_strtod_l+0x9e8>
 8009f4e:	e4ac      	b.n	80098aa <_strtod_l+0x452>
 8009f50:	94a03595 	.word	0x94a03595
 8009f54:	3fdfffff 	.word	0x3fdfffff
 8009f58:	35afe535 	.word	0x35afe535
 8009f5c:	3fe00000 	.word	0x3fe00000
 8009f60:	000fffff 	.word	0x000fffff
 8009f64:	7ff00000 	.word	0x7ff00000
 8009f68:	7fefffff 	.word	0x7fefffff
 8009f6c:	39500000 	.word	0x39500000
 8009f70:	3ff00000 	.word	0x3ff00000
 8009f74:	7fe00000 	.word	0x7fe00000
 8009f78:	7c9fffff 	.word	0x7c9fffff
 8009f7c:	3fe00000 	.word	0x3fe00000
 8009f80:	bff00000 	.word	0xbff00000
 8009f84:	9b04      	ldr	r3, [sp, #16]
 8009f86:	b333      	cbz	r3, 8009fd6 <_strtod_l+0xb7e>
 8009f88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f8a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009f8e:	d822      	bhi.n	8009fd6 <_strtod_l+0xb7e>
 8009f90:	a327      	add	r3, pc, #156	; (adr r3, 800a030 <_strtod_l+0xbd8>)
 8009f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f96:	4630      	mov	r0, r6
 8009f98:	4639      	mov	r1, r7
 8009f9a:	f7f6 fdc9 	bl	8000b30 <__aeabi_dcmple>
 8009f9e:	b1a0      	cbz	r0, 8009fca <_strtod_l+0xb72>
 8009fa0:	4639      	mov	r1, r7
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f7f6 fe20 	bl	8000be8 <__aeabi_d2uiz>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	bf08      	it	eq
 8009fac:	2001      	moveq	r0, #1
 8009fae:	f7f6 fac9 	bl	8000544 <__aeabi_ui2d>
 8009fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	460f      	mov	r7, r1
 8009fb8:	bb03      	cbnz	r3, 8009ffc <_strtod_l+0xba4>
 8009fba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fbe:	9012      	str	r0, [sp, #72]	; 0x48
 8009fc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8009fc2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009fc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009fce:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009fd2:	1a9b      	subs	r3, r3, r2
 8009fd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fd6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009fda:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009fde:	f001 fd3d 	bl	800ba5c <__ulp>
 8009fe2:	4650      	mov	r0, sl
 8009fe4:	ec53 2b10 	vmov	r2, r3, d0
 8009fe8:	4659      	mov	r1, fp
 8009fea:	f7f6 fb25 	bl	8000638 <__aeabi_dmul>
 8009fee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009ff2:	f7f6 f96b 	bl	80002cc <__adddf3>
 8009ff6:	4682      	mov	sl, r0
 8009ff8:	468b      	mov	fp, r1
 8009ffa:	e772      	b.n	8009ee2 <_strtod_l+0xa8a>
 8009ffc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800a000:	e7df      	b.n	8009fc2 <_strtod_l+0xb6a>
 800a002:	a30d      	add	r3, pc, #52	; (adr r3, 800a038 <_strtod_l+0xbe0>)
 800a004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a008:	f7f6 fd88 	bl	8000b1c <__aeabi_dcmplt>
 800a00c:	e79c      	b.n	8009f48 <_strtod_l+0xaf0>
 800a00e:	2300      	movs	r3, #0
 800a010:	930d      	str	r3, [sp, #52]	; 0x34
 800a012:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a014:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a016:	6013      	str	r3, [r2, #0]
 800a018:	f7ff ba61 	b.w	80094de <_strtod_l+0x86>
 800a01c:	2b65      	cmp	r3, #101	; 0x65
 800a01e:	f04f 0200 	mov.w	r2, #0
 800a022:	f43f ab4e 	beq.w	80096c2 <_strtod_l+0x26a>
 800a026:	2101      	movs	r1, #1
 800a028:	4614      	mov	r4, r2
 800a02a:	9104      	str	r1, [sp, #16]
 800a02c:	f7ff bacb 	b.w	80095c6 <_strtod_l+0x16e>
 800a030:	ffc00000 	.word	0xffc00000
 800a034:	41dfffff 	.word	0x41dfffff
 800a038:	94a03595 	.word	0x94a03595
 800a03c:	3fcfffff 	.word	0x3fcfffff

0800a040 <_strtod_r>:
 800a040:	4b05      	ldr	r3, [pc, #20]	; (800a058 <_strtod_r+0x18>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	b410      	push	{r4}
 800a046:	6a1b      	ldr	r3, [r3, #32]
 800a048:	4c04      	ldr	r4, [pc, #16]	; (800a05c <_strtod_r+0x1c>)
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	bf08      	it	eq
 800a04e:	4623      	moveq	r3, r4
 800a050:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a054:	f7ff ba00 	b.w	8009458 <_strtod_l>
 800a058:	2000001c 	.word	0x2000001c
 800a05c:	20000080 	.word	0x20000080

0800a060 <_strtol_l.isra.0>:
 800a060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a064:	4680      	mov	r8, r0
 800a066:	4689      	mov	r9, r1
 800a068:	4692      	mov	sl, r2
 800a06a:	461e      	mov	r6, r3
 800a06c:	460f      	mov	r7, r1
 800a06e:	463d      	mov	r5, r7
 800a070:	9808      	ldr	r0, [sp, #32]
 800a072:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a076:	f001 f9ed 	bl	800b454 <__locale_ctype_ptr_l>
 800a07a:	4420      	add	r0, r4
 800a07c:	7843      	ldrb	r3, [r0, #1]
 800a07e:	f013 0308 	ands.w	r3, r3, #8
 800a082:	d132      	bne.n	800a0ea <_strtol_l.isra.0+0x8a>
 800a084:	2c2d      	cmp	r4, #45	; 0x2d
 800a086:	d132      	bne.n	800a0ee <_strtol_l.isra.0+0x8e>
 800a088:	787c      	ldrb	r4, [r7, #1]
 800a08a:	1cbd      	adds	r5, r7, #2
 800a08c:	2201      	movs	r2, #1
 800a08e:	2e00      	cmp	r6, #0
 800a090:	d05d      	beq.n	800a14e <_strtol_l.isra.0+0xee>
 800a092:	2e10      	cmp	r6, #16
 800a094:	d109      	bne.n	800a0aa <_strtol_l.isra.0+0x4a>
 800a096:	2c30      	cmp	r4, #48	; 0x30
 800a098:	d107      	bne.n	800a0aa <_strtol_l.isra.0+0x4a>
 800a09a:	782b      	ldrb	r3, [r5, #0]
 800a09c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a0a0:	2b58      	cmp	r3, #88	; 0x58
 800a0a2:	d14f      	bne.n	800a144 <_strtol_l.isra.0+0xe4>
 800a0a4:	786c      	ldrb	r4, [r5, #1]
 800a0a6:	2610      	movs	r6, #16
 800a0a8:	3502      	adds	r5, #2
 800a0aa:	2a00      	cmp	r2, #0
 800a0ac:	bf14      	ite	ne
 800a0ae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a0b2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a0b6:	2700      	movs	r7, #0
 800a0b8:	fbb1 fcf6 	udiv	ip, r1, r6
 800a0bc:	4638      	mov	r0, r7
 800a0be:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a0c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a0c6:	2b09      	cmp	r3, #9
 800a0c8:	d817      	bhi.n	800a0fa <_strtol_l.isra.0+0x9a>
 800a0ca:	461c      	mov	r4, r3
 800a0cc:	42a6      	cmp	r6, r4
 800a0ce:	dd23      	ble.n	800a118 <_strtol_l.isra.0+0xb8>
 800a0d0:	1c7b      	adds	r3, r7, #1
 800a0d2:	d007      	beq.n	800a0e4 <_strtol_l.isra.0+0x84>
 800a0d4:	4584      	cmp	ip, r0
 800a0d6:	d31c      	bcc.n	800a112 <_strtol_l.isra.0+0xb2>
 800a0d8:	d101      	bne.n	800a0de <_strtol_l.isra.0+0x7e>
 800a0da:	45a6      	cmp	lr, r4
 800a0dc:	db19      	blt.n	800a112 <_strtol_l.isra.0+0xb2>
 800a0de:	fb00 4006 	mla	r0, r0, r6, r4
 800a0e2:	2701      	movs	r7, #1
 800a0e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0e8:	e7eb      	b.n	800a0c2 <_strtol_l.isra.0+0x62>
 800a0ea:	462f      	mov	r7, r5
 800a0ec:	e7bf      	b.n	800a06e <_strtol_l.isra.0+0xe>
 800a0ee:	2c2b      	cmp	r4, #43	; 0x2b
 800a0f0:	bf04      	itt	eq
 800a0f2:	1cbd      	addeq	r5, r7, #2
 800a0f4:	787c      	ldrbeq	r4, [r7, #1]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	e7c9      	b.n	800a08e <_strtol_l.isra.0+0x2e>
 800a0fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a0fe:	2b19      	cmp	r3, #25
 800a100:	d801      	bhi.n	800a106 <_strtol_l.isra.0+0xa6>
 800a102:	3c37      	subs	r4, #55	; 0x37
 800a104:	e7e2      	b.n	800a0cc <_strtol_l.isra.0+0x6c>
 800a106:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a10a:	2b19      	cmp	r3, #25
 800a10c:	d804      	bhi.n	800a118 <_strtol_l.isra.0+0xb8>
 800a10e:	3c57      	subs	r4, #87	; 0x57
 800a110:	e7dc      	b.n	800a0cc <_strtol_l.isra.0+0x6c>
 800a112:	f04f 37ff 	mov.w	r7, #4294967295
 800a116:	e7e5      	b.n	800a0e4 <_strtol_l.isra.0+0x84>
 800a118:	1c7b      	adds	r3, r7, #1
 800a11a:	d108      	bne.n	800a12e <_strtol_l.isra.0+0xce>
 800a11c:	2322      	movs	r3, #34	; 0x22
 800a11e:	f8c8 3000 	str.w	r3, [r8]
 800a122:	4608      	mov	r0, r1
 800a124:	f1ba 0f00 	cmp.w	sl, #0
 800a128:	d107      	bne.n	800a13a <_strtol_l.isra.0+0xda>
 800a12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a12e:	b102      	cbz	r2, 800a132 <_strtol_l.isra.0+0xd2>
 800a130:	4240      	negs	r0, r0
 800a132:	f1ba 0f00 	cmp.w	sl, #0
 800a136:	d0f8      	beq.n	800a12a <_strtol_l.isra.0+0xca>
 800a138:	b10f      	cbz	r7, 800a13e <_strtol_l.isra.0+0xde>
 800a13a:	f105 39ff 	add.w	r9, r5, #4294967295
 800a13e:	f8ca 9000 	str.w	r9, [sl]
 800a142:	e7f2      	b.n	800a12a <_strtol_l.isra.0+0xca>
 800a144:	2430      	movs	r4, #48	; 0x30
 800a146:	2e00      	cmp	r6, #0
 800a148:	d1af      	bne.n	800a0aa <_strtol_l.isra.0+0x4a>
 800a14a:	2608      	movs	r6, #8
 800a14c:	e7ad      	b.n	800a0aa <_strtol_l.isra.0+0x4a>
 800a14e:	2c30      	cmp	r4, #48	; 0x30
 800a150:	d0a3      	beq.n	800a09a <_strtol_l.isra.0+0x3a>
 800a152:	260a      	movs	r6, #10
 800a154:	e7a9      	b.n	800a0aa <_strtol_l.isra.0+0x4a>
	...

0800a158 <_strtol_r>:
 800a158:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a15a:	4c06      	ldr	r4, [pc, #24]	; (800a174 <_strtol_r+0x1c>)
 800a15c:	4d06      	ldr	r5, [pc, #24]	; (800a178 <_strtol_r+0x20>)
 800a15e:	6824      	ldr	r4, [r4, #0]
 800a160:	6a24      	ldr	r4, [r4, #32]
 800a162:	2c00      	cmp	r4, #0
 800a164:	bf08      	it	eq
 800a166:	462c      	moveq	r4, r5
 800a168:	9400      	str	r4, [sp, #0]
 800a16a:	f7ff ff79 	bl	800a060 <_strtol_l.isra.0>
 800a16e:	b003      	add	sp, #12
 800a170:	bd30      	pop	{r4, r5, pc}
 800a172:	bf00      	nop
 800a174:	2000001c 	.word	0x2000001c
 800a178:	20000080 	.word	0x20000080

0800a17c <quorem>:
 800a17c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a180:	6903      	ldr	r3, [r0, #16]
 800a182:	690c      	ldr	r4, [r1, #16]
 800a184:	42a3      	cmp	r3, r4
 800a186:	4680      	mov	r8, r0
 800a188:	f2c0 8082 	blt.w	800a290 <quorem+0x114>
 800a18c:	3c01      	subs	r4, #1
 800a18e:	f101 0714 	add.w	r7, r1, #20
 800a192:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a196:	f100 0614 	add.w	r6, r0, #20
 800a19a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a19e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a1a2:	eb06 030c 	add.w	r3, r6, ip
 800a1a6:	3501      	adds	r5, #1
 800a1a8:	eb07 090c 	add.w	r9, r7, ip
 800a1ac:	9301      	str	r3, [sp, #4]
 800a1ae:	fbb0 f5f5 	udiv	r5, r0, r5
 800a1b2:	b395      	cbz	r5, 800a21a <quorem+0x9e>
 800a1b4:	f04f 0a00 	mov.w	sl, #0
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	46b6      	mov	lr, r6
 800a1bc:	46d3      	mov	fp, sl
 800a1be:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1c2:	b293      	uxth	r3, r2
 800a1c4:	fb05 a303 	mla	r3, r5, r3, sl
 800a1c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	ebab 0303 	sub.w	r3, fp, r3
 800a1d2:	0c12      	lsrs	r2, r2, #16
 800a1d4:	f8de b000 	ldr.w	fp, [lr]
 800a1d8:	fb05 a202 	mla	r2, r5, r2, sl
 800a1dc:	fa13 f38b 	uxtah	r3, r3, fp
 800a1e0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a1e4:	fa1f fb82 	uxth.w	fp, r2
 800a1e8:	f8de 2000 	ldr.w	r2, [lr]
 800a1ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a1f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1fa:	4581      	cmp	r9, r0
 800a1fc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a200:	f84e 3b04 	str.w	r3, [lr], #4
 800a204:	d2db      	bcs.n	800a1be <quorem+0x42>
 800a206:	f856 300c 	ldr.w	r3, [r6, ip]
 800a20a:	b933      	cbnz	r3, 800a21a <quorem+0x9e>
 800a20c:	9b01      	ldr	r3, [sp, #4]
 800a20e:	3b04      	subs	r3, #4
 800a210:	429e      	cmp	r6, r3
 800a212:	461a      	mov	r2, r3
 800a214:	d330      	bcc.n	800a278 <quorem+0xfc>
 800a216:	f8c8 4010 	str.w	r4, [r8, #16]
 800a21a:	4640      	mov	r0, r8
 800a21c:	f001 fba6 	bl	800b96c <__mcmp>
 800a220:	2800      	cmp	r0, #0
 800a222:	db25      	blt.n	800a270 <quorem+0xf4>
 800a224:	3501      	adds	r5, #1
 800a226:	4630      	mov	r0, r6
 800a228:	f04f 0c00 	mov.w	ip, #0
 800a22c:	f857 2b04 	ldr.w	r2, [r7], #4
 800a230:	f8d0 e000 	ldr.w	lr, [r0]
 800a234:	b293      	uxth	r3, r2
 800a236:	ebac 0303 	sub.w	r3, ip, r3
 800a23a:	0c12      	lsrs	r2, r2, #16
 800a23c:	fa13 f38e 	uxtah	r3, r3, lr
 800a240:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a244:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a248:	b29b      	uxth	r3, r3
 800a24a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a24e:	45b9      	cmp	r9, r7
 800a250:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a254:	f840 3b04 	str.w	r3, [r0], #4
 800a258:	d2e8      	bcs.n	800a22c <quorem+0xb0>
 800a25a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a25e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a262:	b92a      	cbnz	r2, 800a270 <quorem+0xf4>
 800a264:	3b04      	subs	r3, #4
 800a266:	429e      	cmp	r6, r3
 800a268:	461a      	mov	r2, r3
 800a26a:	d30b      	bcc.n	800a284 <quorem+0x108>
 800a26c:	f8c8 4010 	str.w	r4, [r8, #16]
 800a270:	4628      	mov	r0, r5
 800a272:	b003      	add	sp, #12
 800a274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a278:	6812      	ldr	r2, [r2, #0]
 800a27a:	3b04      	subs	r3, #4
 800a27c:	2a00      	cmp	r2, #0
 800a27e:	d1ca      	bne.n	800a216 <quorem+0x9a>
 800a280:	3c01      	subs	r4, #1
 800a282:	e7c5      	b.n	800a210 <quorem+0x94>
 800a284:	6812      	ldr	r2, [r2, #0]
 800a286:	3b04      	subs	r3, #4
 800a288:	2a00      	cmp	r2, #0
 800a28a:	d1ef      	bne.n	800a26c <quorem+0xf0>
 800a28c:	3c01      	subs	r4, #1
 800a28e:	e7ea      	b.n	800a266 <quorem+0xea>
 800a290:	2000      	movs	r0, #0
 800a292:	e7ee      	b.n	800a272 <quorem+0xf6>
 800a294:	0000      	movs	r0, r0
	...

0800a298 <_dtoa_r>:
 800a298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29c:	ec57 6b10 	vmov	r6, r7, d0
 800a2a0:	b097      	sub	sp, #92	; 0x5c
 800a2a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2a4:	9106      	str	r1, [sp, #24]
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	920b      	str	r2, [sp, #44]	; 0x2c
 800a2aa:	9312      	str	r3, [sp, #72]	; 0x48
 800a2ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a2b0:	e9cd 6700 	strd	r6, r7, [sp]
 800a2b4:	b93d      	cbnz	r5, 800a2c6 <_dtoa_r+0x2e>
 800a2b6:	2010      	movs	r0, #16
 800a2b8:	f001 f8e0 	bl	800b47c <malloc>
 800a2bc:	6260      	str	r0, [r4, #36]	; 0x24
 800a2be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2c2:	6005      	str	r5, [r0, #0]
 800a2c4:	60c5      	str	r5, [r0, #12]
 800a2c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2c8:	6819      	ldr	r1, [r3, #0]
 800a2ca:	b151      	cbz	r1, 800a2e2 <_dtoa_r+0x4a>
 800a2cc:	685a      	ldr	r2, [r3, #4]
 800a2ce:	604a      	str	r2, [r1, #4]
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	4093      	lsls	r3, r2
 800a2d4:	608b      	str	r3, [r1, #8]
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f001 f929 	bl	800b52e <_Bfree>
 800a2dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2de:	2200      	movs	r2, #0
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	1e3b      	subs	r3, r7, #0
 800a2e4:	bfbb      	ittet	lt
 800a2e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a2ea:	9301      	strlt	r3, [sp, #4]
 800a2ec:	2300      	movge	r3, #0
 800a2ee:	2201      	movlt	r2, #1
 800a2f0:	bfac      	ite	ge
 800a2f2:	f8c8 3000 	strge.w	r3, [r8]
 800a2f6:	f8c8 2000 	strlt.w	r2, [r8]
 800a2fa:	4baf      	ldr	r3, [pc, #700]	; (800a5b8 <_dtoa_r+0x320>)
 800a2fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a300:	ea33 0308 	bics.w	r3, r3, r8
 800a304:	d114      	bne.n	800a330 <_dtoa_r+0x98>
 800a306:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a308:	f242 730f 	movw	r3, #9999	; 0x270f
 800a30c:	6013      	str	r3, [r2, #0]
 800a30e:	9b00      	ldr	r3, [sp, #0]
 800a310:	b923      	cbnz	r3, 800a31c <_dtoa_r+0x84>
 800a312:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a316:	2800      	cmp	r0, #0
 800a318:	f000 8542 	beq.w	800ada0 <_dtoa_r+0xb08>
 800a31c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a31e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a5cc <_dtoa_r+0x334>
 800a322:	2b00      	cmp	r3, #0
 800a324:	f000 8544 	beq.w	800adb0 <_dtoa_r+0xb18>
 800a328:	f10b 0303 	add.w	r3, fp, #3
 800a32c:	f000 bd3e 	b.w	800adac <_dtoa_r+0xb14>
 800a330:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a334:	2200      	movs	r2, #0
 800a336:	2300      	movs	r3, #0
 800a338:	4630      	mov	r0, r6
 800a33a:	4639      	mov	r1, r7
 800a33c:	f7f6 fbe4 	bl	8000b08 <__aeabi_dcmpeq>
 800a340:	4681      	mov	r9, r0
 800a342:	b168      	cbz	r0, 800a360 <_dtoa_r+0xc8>
 800a344:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a346:	2301      	movs	r3, #1
 800a348:	6013      	str	r3, [r2, #0]
 800a34a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 8524 	beq.w	800ad9a <_dtoa_r+0xb02>
 800a352:	4b9a      	ldr	r3, [pc, #616]	; (800a5bc <_dtoa_r+0x324>)
 800a354:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a356:	f103 3bff 	add.w	fp, r3, #4294967295
 800a35a:	6013      	str	r3, [r2, #0]
 800a35c:	f000 bd28 	b.w	800adb0 <_dtoa_r+0xb18>
 800a360:	aa14      	add	r2, sp, #80	; 0x50
 800a362:	a915      	add	r1, sp, #84	; 0x54
 800a364:	ec47 6b10 	vmov	d0, r6, r7
 800a368:	4620      	mov	r0, r4
 800a36a:	f001 fbed 	bl	800bb48 <__d2b>
 800a36e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a372:	9004      	str	r0, [sp, #16]
 800a374:	2d00      	cmp	r5, #0
 800a376:	d07c      	beq.n	800a472 <_dtoa_r+0x1da>
 800a378:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a37c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a380:	46b2      	mov	sl, r6
 800a382:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a386:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a38a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a38e:	2200      	movs	r2, #0
 800a390:	4b8b      	ldr	r3, [pc, #556]	; (800a5c0 <_dtoa_r+0x328>)
 800a392:	4650      	mov	r0, sl
 800a394:	4659      	mov	r1, fp
 800a396:	f7f5 ff97 	bl	80002c8 <__aeabi_dsub>
 800a39a:	a381      	add	r3, pc, #516	; (adr r3, 800a5a0 <_dtoa_r+0x308>)
 800a39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a0:	f7f6 f94a 	bl	8000638 <__aeabi_dmul>
 800a3a4:	a380      	add	r3, pc, #512	; (adr r3, 800a5a8 <_dtoa_r+0x310>)
 800a3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3aa:	f7f5 ff8f 	bl	80002cc <__adddf3>
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	460f      	mov	r7, r1
 800a3b4:	f7f6 f8d6 	bl	8000564 <__aeabi_i2d>
 800a3b8:	a37d      	add	r3, pc, #500	; (adr r3, 800a5b0 <_dtoa_r+0x318>)
 800a3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3be:	f7f6 f93b 	bl	8000638 <__aeabi_dmul>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	4639      	mov	r1, r7
 800a3ca:	f7f5 ff7f 	bl	80002cc <__adddf3>
 800a3ce:	4606      	mov	r6, r0
 800a3d0:	460f      	mov	r7, r1
 800a3d2:	f7f6 fbe1 	bl	8000b98 <__aeabi_d2iz>
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	4682      	mov	sl, r0
 800a3da:	2300      	movs	r3, #0
 800a3dc:	4630      	mov	r0, r6
 800a3de:	4639      	mov	r1, r7
 800a3e0:	f7f6 fb9c 	bl	8000b1c <__aeabi_dcmplt>
 800a3e4:	b148      	cbz	r0, 800a3fa <_dtoa_r+0x162>
 800a3e6:	4650      	mov	r0, sl
 800a3e8:	f7f6 f8bc 	bl	8000564 <__aeabi_i2d>
 800a3ec:	4632      	mov	r2, r6
 800a3ee:	463b      	mov	r3, r7
 800a3f0:	f7f6 fb8a 	bl	8000b08 <__aeabi_dcmpeq>
 800a3f4:	b908      	cbnz	r0, 800a3fa <_dtoa_r+0x162>
 800a3f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3fa:	f1ba 0f16 	cmp.w	sl, #22
 800a3fe:	d859      	bhi.n	800a4b4 <_dtoa_r+0x21c>
 800a400:	4970      	ldr	r1, [pc, #448]	; (800a5c4 <_dtoa_r+0x32c>)
 800a402:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a406:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a40a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a40e:	f7f6 fba3 	bl	8000b58 <__aeabi_dcmpgt>
 800a412:	2800      	cmp	r0, #0
 800a414:	d050      	beq.n	800a4b8 <_dtoa_r+0x220>
 800a416:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a41a:	2300      	movs	r3, #0
 800a41c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a41e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a420:	1b5d      	subs	r5, r3, r5
 800a422:	f1b5 0801 	subs.w	r8, r5, #1
 800a426:	bf49      	itett	mi
 800a428:	f1c5 0301 	rsbmi	r3, r5, #1
 800a42c:	2300      	movpl	r3, #0
 800a42e:	9305      	strmi	r3, [sp, #20]
 800a430:	f04f 0800 	movmi.w	r8, #0
 800a434:	bf58      	it	pl
 800a436:	9305      	strpl	r3, [sp, #20]
 800a438:	f1ba 0f00 	cmp.w	sl, #0
 800a43c:	db3e      	blt.n	800a4bc <_dtoa_r+0x224>
 800a43e:	2300      	movs	r3, #0
 800a440:	44d0      	add	r8, sl
 800a442:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a446:	9307      	str	r3, [sp, #28]
 800a448:	9b06      	ldr	r3, [sp, #24]
 800a44a:	2b09      	cmp	r3, #9
 800a44c:	f200 8090 	bhi.w	800a570 <_dtoa_r+0x2d8>
 800a450:	2b05      	cmp	r3, #5
 800a452:	bfc4      	itt	gt
 800a454:	3b04      	subgt	r3, #4
 800a456:	9306      	strgt	r3, [sp, #24]
 800a458:	9b06      	ldr	r3, [sp, #24]
 800a45a:	f1a3 0302 	sub.w	r3, r3, #2
 800a45e:	bfcc      	ite	gt
 800a460:	2500      	movgt	r5, #0
 800a462:	2501      	movle	r5, #1
 800a464:	2b03      	cmp	r3, #3
 800a466:	f200 808f 	bhi.w	800a588 <_dtoa_r+0x2f0>
 800a46a:	e8df f003 	tbb	[pc, r3]
 800a46e:	7f7d      	.short	0x7f7d
 800a470:	7131      	.short	0x7131
 800a472:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a476:	441d      	add	r5, r3
 800a478:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a47c:	2820      	cmp	r0, #32
 800a47e:	dd13      	ble.n	800a4a8 <_dtoa_r+0x210>
 800a480:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a484:	9b00      	ldr	r3, [sp, #0]
 800a486:	fa08 f800 	lsl.w	r8, r8, r0
 800a48a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a48e:	fa23 f000 	lsr.w	r0, r3, r0
 800a492:	ea48 0000 	orr.w	r0, r8, r0
 800a496:	f7f6 f855 	bl	8000544 <__aeabi_ui2d>
 800a49a:	2301      	movs	r3, #1
 800a49c:	4682      	mov	sl, r0
 800a49e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a4a2:	3d01      	subs	r5, #1
 800a4a4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a4a6:	e772      	b.n	800a38e <_dtoa_r+0xf6>
 800a4a8:	9b00      	ldr	r3, [sp, #0]
 800a4aa:	f1c0 0020 	rsb	r0, r0, #32
 800a4ae:	fa03 f000 	lsl.w	r0, r3, r0
 800a4b2:	e7f0      	b.n	800a496 <_dtoa_r+0x1fe>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e7b1      	b.n	800a41c <_dtoa_r+0x184>
 800a4b8:	900f      	str	r0, [sp, #60]	; 0x3c
 800a4ba:	e7b0      	b.n	800a41e <_dtoa_r+0x186>
 800a4bc:	9b05      	ldr	r3, [sp, #20]
 800a4be:	eba3 030a 	sub.w	r3, r3, sl
 800a4c2:	9305      	str	r3, [sp, #20]
 800a4c4:	f1ca 0300 	rsb	r3, sl, #0
 800a4c8:	9307      	str	r3, [sp, #28]
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	930e      	str	r3, [sp, #56]	; 0x38
 800a4ce:	e7bb      	b.n	800a448 <_dtoa_r+0x1b0>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	930a      	str	r3, [sp, #40]	; 0x28
 800a4d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	dd59      	ble.n	800a58e <_dtoa_r+0x2f6>
 800a4da:	9302      	str	r3, [sp, #8]
 800a4dc:	4699      	mov	r9, r3
 800a4de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	6072      	str	r2, [r6, #4]
 800a4e4:	2204      	movs	r2, #4
 800a4e6:	f102 0014 	add.w	r0, r2, #20
 800a4ea:	4298      	cmp	r0, r3
 800a4ec:	6871      	ldr	r1, [r6, #4]
 800a4ee:	d953      	bls.n	800a598 <_dtoa_r+0x300>
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f000 ffe8 	bl	800b4c6 <_Balloc>
 800a4f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4f8:	6030      	str	r0, [r6, #0]
 800a4fa:	f1b9 0f0e 	cmp.w	r9, #14
 800a4fe:	f8d3 b000 	ldr.w	fp, [r3]
 800a502:	f200 80e6 	bhi.w	800a6d2 <_dtoa_r+0x43a>
 800a506:	2d00      	cmp	r5, #0
 800a508:	f000 80e3 	beq.w	800a6d2 <_dtoa_r+0x43a>
 800a50c:	ed9d 7b00 	vldr	d7, [sp]
 800a510:	f1ba 0f00 	cmp.w	sl, #0
 800a514:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a518:	dd74      	ble.n	800a604 <_dtoa_r+0x36c>
 800a51a:	4a2a      	ldr	r2, [pc, #168]	; (800a5c4 <_dtoa_r+0x32c>)
 800a51c:	f00a 030f 	and.w	r3, sl, #15
 800a520:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a524:	ed93 7b00 	vldr	d7, [r3]
 800a528:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a52c:	06f0      	lsls	r0, r6, #27
 800a52e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a532:	d565      	bpl.n	800a600 <_dtoa_r+0x368>
 800a534:	4b24      	ldr	r3, [pc, #144]	; (800a5c8 <_dtoa_r+0x330>)
 800a536:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a53a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a53e:	f7f6 f9a5 	bl	800088c <__aeabi_ddiv>
 800a542:	e9cd 0100 	strd	r0, r1, [sp]
 800a546:	f006 060f 	and.w	r6, r6, #15
 800a54a:	2503      	movs	r5, #3
 800a54c:	4f1e      	ldr	r7, [pc, #120]	; (800a5c8 <_dtoa_r+0x330>)
 800a54e:	e04c      	b.n	800a5ea <_dtoa_r+0x352>
 800a550:	2301      	movs	r3, #1
 800a552:	930a      	str	r3, [sp, #40]	; 0x28
 800a554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a556:	4453      	add	r3, sl
 800a558:	f103 0901 	add.w	r9, r3, #1
 800a55c:	9302      	str	r3, [sp, #8]
 800a55e:	464b      	mov	r3, r9
 800a560:	2b01      	cmp	r3, #1
 800a562:	bfb8      	it	lt
 800a564:	2301      	movlt	r3, #1
 800a566:	e7ba      	b.n	800a4de <_dtoa_r+0x246>
 800a568:	2300      	movs	r3, #0
 800a56a:	e7b2      	b.n	800a4d2 <_dtoa_r+0x23a>
 800a56c:	2300      	movs	r3, #0
 800a56e:	e7f0      	b.n	800a552 <_dtoa_r+0x2ba>
 800a570:	2501      	movs	r5, #1
 800a572:	2300      	movs	r3, #0
 800a574:	9306      	str	r3, [sp, #24]
 800a576:	950a      	str	r5, [sp, #40]	; 0x28
 800a578:	f04f 33ff 	mov.w	r3, #4294967295
 800a57c:	9302      	str	r3, [sp, #8]
 800a57e:	4699      	mov	r9, r3
 800a580:	2200      	movs	r2, #0
 800a582:	2312      	movs	r3, #18
 800a584:	920b      	str	r2, [sp, #44]	; 0x2c
 800a586:	e7aa      	b.n	800a4de <_dtoa_r+0x246>
 800a588:	2301      	movs	r3, #1
 800a58a:	930a      	str	r3, [sp, #40]	; 0x28
 800a58c:	e7f4      	b.n	800a578 <_dtoa_r+0x2e0>
 800a58e:	2301      	movs	r3, #1
 800a590:	9302      	str	r3, [sp, #8]
 800a592:	4699      	mov	r9, r3
 800a594:	461a      	mov	r2, r3
 800a596:	e7f5      	b.n	800a584 <_dtoa_r+0x2ec>
 800a598:	3101      	adds	r1, #1
 800a59a:	6071      	str	r1, [r6, #4]
 800a59c:	0052      	lsls	r2, r2, #1
 800a59e:	e7a2      	b.n	800a4e6 <_dtoa_r+0x24e>
 800a5a0:	636f4361 	.word	0x636f4361
 800a5a4:	3fd287a7 	.word	0x3fd287a7
 800a5a8:	8b60c8b3 	.word	0x8b60c8b3
 800a5ac:	3fc68a28 	.word	0x3fc68a28
 800a5b0:	509f79fb 	.word	0x509f79fb
 800a5b4:	3fd34413 	.word	0x3fd34413
 800a5b8:	7ff00000 	.word	0x7ff00000
 800a5bc:	0800c219 	.word	0x0800c219
 800a5c0:	3ff80000 	.word	0x3ff80000
 800a5c4:	0800c2d8 	.word	0x0800c2d8
 800a5c8:	0800c2b0 	.word	0x0800c2b0
 800a5cc:	0800c2a1 	.word	0x0800c2a1
 800a5d0:	07f1      	lsls	r1, r6, #31
 800a5d2:	d508      	bpl.n	800a5e6 <_dtoa_r+0x34e>
 800a5d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a5d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5dc:	f7f6 f82c 	bl	8000638 <__aeabi_dmul>
 800a5e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a5e4:	3501      	adds	r5, #1
 800a5e6:	1076      	asrs	r6, r6, #1
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	2e00      	cmp	r6, #0
 800a5ec:	d1f0      	bne.n	800a5d0 <_dtoa_r+0x338>
 800a5ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a5f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5f6:	f7f6 f949 	bl	800088c <__aeabi_ddiv>
 800a5fa:	e9cd 0100 	strd	r0, r1, [sp]
 800a5fe:	e01a      	b.n	800a636 <_dtoa_r+0x39e>
 800a600:	2502      	movs	r5, #2
 800a602:	e7a3      	b.n	800a54c <_dtoa_r+0x2b4>
 800a604:	f000 80a0 	beq.w	800a748 <_dtoa_r+0x4b0>
 800a608:	f1ca 0600 	rsb	r6, sl, #0
 800a60c:	4b9f      	ldr	r3, [pc, #636]	; (800a88c <_dtoa_r+0x5f4>)
 800a60e:	4fa0      	ldr	r7, [pc, #640]	; (800a890 <_dtoa_r+0x5f8>)
 800a610:	f006 020f 	and.w	r2, r6, #15
 800a614:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a620:	f7f6 f80a 	bl	8000638 <__aeabi_dmul>
 800a624:	e9cd 0100 	strd	r0, r1, [sp]
 800a628:	1136      	asrs	r6, r6, #4
 800a62a:	2300      	movs	r3, #0
 800a62c:	2502      	movs	r5, #2
 800a62e:	2e00      	cmp	r6, #0
 800a630:	d17f      	bne.n	800a732 <_dtoa_r+0x49a>
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1e1      	bne.n	800a5fa <_dtoa_r+0x362>
 800a636:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f000 8087 	beq.w	800a74c <_dtoa_r+0x4b4>
 800a63e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a642:	2200      	movs	r2, #0
 800a644:	4b93      	ldr	r3, [pc, #588]	; (800a894 <_dtoa_r+0x5fc>)
 800a646:	4630      	mov	r0, r6
 800a648:	4639      	mov	r1, r7
 800a64a:	f7f6 fa67 	bl	8000b1c <__aeabi_dcmplt>
 800a64e:	2800      	cmp	r0, #0
 800a650:	d07c      	beq.n	800a74c <_dtoa_r+0x4b4>
 800a652:	f1b9 0f00 	cmp.w	r9, #0
 800a656:	d079      	beq.n	800a74c <_dtoa_r+0x4b4>
 800a658:	9b02      	ldr	r3, [sp, #8]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	dd35      	ble.n	800a6ca <_dtoa_r+0x432>
 800a65e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a662:	9308      	str	r3, [sp, #32]
 800a664:	4639      	mov	r1, r7
 800a666:	2200      	movs	r2, #0
 800a668:	4b8b      	ldr	r3, [pc, #556]	; (800a898 <_dtoa_r+0x600>)
 800a66a:	4630      	mov	r0, r6
 800a66c:	f7f5 ffe4 	bl	8000638 <__aeabi_dmul>
 800a670:	e9cd 0100 	strd	r0, r1, [sp]
 800a674:	9f02      	ldr	r7, [sp, #8]
 800a676:	3501      	adds	r5, #1
 800a678:	4628      	mov	r0, r5
 800a67a:	f7f5 ff73 	bl	8000564 <__aeabi_i2d>
 800a67e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a682:	f7f5 ffd9 	bl	8000638 <__aeabi_dmul>
 800a686:	2200      	movs	r2, #0
 800a688:	4b84      	ldr	r3, [pc, #528]	; (800a89c <_dtoa_r+0x604>)
 800a68a:	f7f5 fe1f 	bl	80002cc <__adddf3>
 800a68e:	4605      	mov	r5, r0
 800a690:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a694:	2f00      	cmp	r7, #0
 800a696:	d15d      	bne.n	800a754 <_dtoa_r+0x4bc>
 800a698:	2200      	movs	r2, #0
 800a69a:	4b81      	ldr	r3, [pc, #516]	; (800a8a0 <_dtoa_r+0x608>)
 800a69c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6a0:	f7f5 fe12 	bl	80002c8 <__aeabi_dsub>
 800a6a4:	462a      	mov	r2, r5
 800a6a6:	4633      	mov	r3, r6
 800a6a8:	e9cd 0100 	strd	r0, r1, [sp]
 800a6ac:	f7f6 fa54 	bl	8000b58 <__aeabi_dcmpgt>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	f040 8288 	bne.w	800abc6 <_dtoa_r+0x92e>
 800a6b6:	462a      	mov	r2, r5
 800a6b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a6bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6c0:	f7f6 fa2c 	bl	8000b1c <__aeabi_dcmplt>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	f040 827c 	bne.w	800abc2 <_dtoa_r+0x92a>
 800a6ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a6ce:	e9cd 2300 	strd	r2, r3, [sp]
 800a6d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f2c0 8150 	blt.w	800a97a <_dtoa_r+0x6e2>
 800a6da:	f1ba 0f0e 	cmp.w	sl, #14
 800a6de:	f300 814c 	bgt.w	800a97a <_dtoa_r+0x6e2>
 800a6e2:	4b6a      	ldr	r3, [pc, #424]	; (800a88c <_dtoa_r+0x5f4>)
 800a6e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a6e8:	ed93 7b00 	vldr	d7, [r3]
 800a6ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a6f4:	f280 80d8 	bge.w	800a8a8 <_dtoa_r+0x610>
 800a6f8:	f1b9 0f00 	cmp.w	r9, #0
 800a6fc:	f300 80d4 	bgt.w	800a8a8 <_dtoa_r+0x610>
 800a700:	f040 825e 	bne.w	800abc0 <_dtoa_r+0x928>
 800a704:	2200      	movs	r2, #0
 800a706:	4b66      	ldr	r3, [pc, #408]	; (800a8a0 <_dtoa_r+0x608>)
 800a708:	ec51 0b17 	vmov	r0, r1, d7
 800a70c:	f7f5 ff94 	bl	8000638 <__aeabi_dmul>
 800a710:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a714:	f7f6 fa16 	bl	8000b44 <__aeabi_dcmpge>
 800a718:	464f      	mov	r7, r9
 800a71a:	464e      	mov	r6, r9
 800a71c:	2800      	cmp	r0, #0
 800a71e:	f040 8234 	bne.w	800ab8a <_dtoa_r+0x8f2>
 800a722:	2331      	movs	r3, #49	; 0x31
 800a724:	f10b 0501 	add.w	r5, fp, #1
 800a728:	f88b 3000 	strb.w	r3, [fp]
 800a72c:	f10a 0a01 	add.w	sl, sl, #1
 800a730:	e22f      	b.n	800ab92 <_dtoa_r+0x8fa>
 800a732:	07f2      	lsls	r2, r6, #31
 800a734:	d505      	bpl.n	800a742 <_dtoa_r+0x4aa>
 800a736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a73a:	f7f5 ff7d 	bl	8000638 <__aeabi_dmul>
 800a73e:	3501      	adds	r5, #1
 800a740:	2301      	movs	r3, #1
 800a742:	1076      	asrs	r6, r6, #1
 800a744:	3708      	adds	r7, #8
 800a746:	e772      	b.n	800a62e <_dtoa_r+0x396>
 800a748:	2502      	movs	r5, #2
 800a74a:	e774      	b.n	800a636 <_dtoa_r+0x39e>
 800a74c:	f8cd a020 	str.w	sl, [sp, #32]
 800a750:	464f      	mov	r7, r9
 800a752:	e791      	b.n	800a678 <_dtoa_r+0x3e0>
 800a754:	4b4d      	ldr	r3, [pc, #308]	; (800a88c <_dtoa_r+0x5f4>)
 800a756:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a75a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a75e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a760:	2b00      	cmp	r3, #0
 800a762:	d047      	beq.n	800a7f4 <_dtoa_r+0x55c>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	2000      	movs	r0, #0
 800a76a:	494e      	ldr	r1, [pc, #312]	; (800a8a4 <_dtoa_r+0x60c>)
 800a76c:	f7f6 f88e 	bl	800088c <__aeabi_ddiv>
 800a770:	462a      	mov	r2, r5
 800a772:	4633      	mov	r3, r6
 800a774:	f7f5 fda8 	bl	80002c8 <__aeabi_dsub>
 800a778:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a77c:	465d      	mov	r5, fp
 800a77e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a782:	f7f6 fa09 	bl	8000b98 <__aeabi_d2iz>
 800a786:	4606      	mov	r6, r0
 800a788:	f7f5 feec 	bl	8000564 <__aeabi_i2d>
 800a78c:	4602      	mov	r2, r0
 800a78e:	460b      	mov	r3, r1
 800a790:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a794:	f7f5 fd98 	bl	80002c8 <__aeabi_dsub>
 800a798:	3630      	adds	r6, #48	; 0x30
 800a79a:	f805 6b01 	strb.w	r6, [r5], #1
 800a79e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a7a2:	e9cd 0100 	strd	r0, r1, [sp]
 800a7a6:	f7f6 f9b9 	bl	8000b1c <__aeabi_dcmplt>
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	d163      	bne.n	800a876 <_dtoa_r+0x5de>
 800a7ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	4937      	ldr	r1, [pc, #220]	; (800a894 <_dtoa_r+0x5fc>)
 800a7b6:	f7f5 fd87 	bl	80002c8 <__aeabi_dsub>
 800a7ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a7be:	f7f6 f9ad 	bl	8000b1c <__aeabi_dcmplt>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	f040 80b7 	bne.w	800a936 <_dtoa_r+0x69e>
 800a7c8:	eba5 030b 	sub.w	r3, r5, fp
 800a7cc:	429f      	cmp	r7, r3
 800a7ce:	f77f af7c 	ble.w	800a6ca <_dtoa_r+0x432>
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	4b30      	ldr	r3, [pc, #192]	; (800a898 <_dtoa_r+0x600>)
 800a7d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7da:	f7f5 ff2d 	bl	8000638 <__aeabi_dmul>
 800a7de:	2200      	movs	r2, #0
 800a7e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a7e4:	4b2c      	ldr	r3, [pc, #176]	; (800a898 <_dtoa_r+0x600>)
 800a7e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7ea:	f7f5 ff25 	bl	8000638 <__aeabi_dmul>
 800a7ee:	e9cd 0100 	strd	r0, r1, [sp]
 800a7f2:	e7c4      	b.n	800a77e <_dtoa_r+0x4e6>
 800a7f4:	462a      	mov	r2, r5
 800a7f6:	4633      	mov	r3, r6
 800a7f8:	f7f5 ff1e 	bl	8000638 <__aeabi_dmul>
 800a7fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a800:	eb0b 0507 	add.w	r5, fp, r7
 800a804:	465e      	mov	r6, fp
 800a806:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a80a:	f7f6 f9c5 	bl	8000b98 <__aeabi_d2iz>
 800a80e:	4607      	mov	r7, r0
 800a810:	f7f5 fea8 	bl	8000564 <__aeabi_i2d>
 800a814:	3730      	adds	r7, #48	; 0x30
 800a816:	4602      	mov	r2, r0
 800a818:	460b      	mov	r3, r1
 800a81a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a81e:	f7f5 fd53 	bl	80002c8 <__aeabi_dsub>
 800a822:	f806 7b01 	strb.w	r7, [r6], #1
 800a826:	42ae      	cmp	r6, r5
 800a828:	e9cd 0100 	strd	r0, r1, [sp]
 800a82c:	f04f 0200 	mov.w	r2, #0
 800a830:	d126      	bne.n	800a880 <_dtoa_r+0x5e8>
 800a832:	4b1c      	ldr	r3, [pc, #112]	; (800a8a4 <_dtoa_r+0x60c>)
 800a834:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a838:	f7f5 fd48 	bl	80002cc <__adddf3>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a844:	f7f6 f988 	bl	8000b58 <__aeabi_dcmpgt>
 800a848:	2800      	cmp	r0, #0
 800a84a:	d174      	bne.n	800a936 <_dtoa_r+0x69e>
 800a84c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a850:	2000      	movs	r0, #0
 800a852:	4914      	ldr	r1, [pc, #80]	; (800a8a4 <_dtoa_r+0x60c>)
 800a854:	f7f5 fd38 	bl	80002c8 <__aeabi_dsub>
 800a858:	4602      	mov	r2, r0
 800a85a:	460b      	mov	r3, r1
 800a85c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a860:	f7f6 f95c 	bl	8000b1c <__aeabi_dcmplt>
 800a864:	2800      	cmp	r0, #0
 800a866:	f43f af30 	beq.w	800a6ca <_dtoa_r+0x432>
 800a86a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a86e:	2b30      	cmp	r3, #48	; 0x30
 800a870:	f105 32ff 	add.w	r2, r5, #4294967295
 800a874:	d002      	beq.n	800a87c <_dtoa_r+0x5e4>
 800a876:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a87a:	e04a      	b.n	800a912 <_dtoa_r+0x67a>
 800a87c:	4615      	mov	r5, r2
 800a87e:	e7f4      	b.n	800a86a <_dtoa_r+0x5d2>
 800a880:	4b05      	ldr	r3, [pc, #20]	; (800a898 <_dtoa_r+0x600>)
 800a882:	f7f5 fed9 	bl	8000638 <__aeabi_dmul>
 800a886:	e9cd 0100 	strd	r0, r1, [sp]
 800a88a:	e7bc      	b.n	800a806 <_dtoa_r+0x56e>
 800a88c:	0800c2d8 	.word	0x0800c2d8
 800a890:	0800c2b0 	.word	0x0800c2b0
 800a894:	3ff00000 	.word	0x3ff00000
 800a898:	40240000 	.word	0x40240000
 800a89c:	401c0000 	.word	0x401c0000
 800a8a0:	40140000 	.word	0x40140000
 800a8a4:	3fe00000 	.word	0x3fe00000
 800a8a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a8ac:	465d      	mov	r5, fp
 800a8ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	4639      	mov	r1, r7
 800a8b6:	f7f5 ffe9 	bl	800088c <__aeabi_ddiv>
 800a8ba:	f7f6 f96d 	bl	8000b98 <__aeabi_d2iz>
 800a8be:	4680      	mov	r8, r0
 800a8c0:	f7f5 fe50 	bl	8000564 <__aeabi_i2d>
 800a8c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8c8:	f7f5 feb6 	bl	8000638 <__aeabi_dmul>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a8d8:	f7f5 fcf6 	bl	80002c8 <__aeabi_dsub>
 800a8dc:	f805 6b01 	strb.w	r6, [r5], #1
 800a8e0:	eba5 060b 	sub.w	r6, r5, fp
 800a8e4:	45b1      	cmp	r9, r6
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	d139      	bne.n	800a960 <_dtoa_r+0x6c8>
 800a8ec:	f7f5 fcee 	bl	80002cc <__adddf3>
 800a8f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8f4:	4606      	mov	r6, r0
 800a8f6:	460f      	mov	r7, r1
 800a8f8:	f7f6 f92e 	bl	8000b58 <__aeabi_dcmpgt>
 800a8fc:	b9c8      	cbnz	r0, 800a932 <_dtoa_r+0x69a>
 800a8fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a902:	4630      	mov	r0, r6
 800a904:	4639      	mov	r1, r7
 800a906:	f7f6 f8ff 	bl	8000b08 <__aeabi_dcmpeq>
 800a90a:	b110      	cbz	r0, 800a912 <_dtoa_r+0x67a>
 800a90c:	f018 0f01 	tst.w	r8, #1
 800a910:	d10f      	bne.n	800a932 <_dtoa_r+0x69a>
 800a912:	9904      	ldr	r1, [sp, #16]
 800a914:	4620      	mov	r0, r4
 800a916:	f000 fe0a 	bl	800b52e <_Bfree>
 800a91a:	2300      	movs	r3, #0
 800a91c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a91e:	702b      	strb	r3, [r5, #0]
 800a920:	f10a 0301 	add.w	r3, sl, #1
 800a924:	6013      	str	r3, [r2, #0]
 800a926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 8241 	beq.w	800adb0 <_dtoa_r+0xb18>
 800a92e:	601d      	str	r5, [r3, #0]
 800a930:	e23e      	b.n	800adb0 <_dtoa_r+0xb18>
 800a932:	f8cd a020 	str.w	sl, [sp, #32]
 800a936:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a93a:	2a39      	cmp	r2, #57	; 0x39
 800a93c:	f105 33ff 	add.w	r3, r5, #4294967295
 800a940:	d108      	bne.n	800a954 <_dtoa_r+0x6bc>
 800a942:	459b      	cmp	fp, r3
 800a944:	d10a      	bne.n	800a95c <_dtoa_r+0x6c4>
 800a946:	9b08      	ldr	r3, [sp, #32]
 800a948:	3301      	adds	r3, #1
 800a94a:	9308      	str	r3, [sp, #32]
 800a94c:	2330      	movs	r3, #48	; 0x30
 800a94e:	f88b 3000 	strb.w	r3, [fp]
 800a952:	465b      	mov	r3, fp
 800a954:	781a      	ldrb	r2, [r3, #0]
 800a956:	3201      	adds	r2, #1
 800a958:	701a      	strb	r2, [r3, #0]
 800a95a:	e78c      	b.n	800a876 <_dtoa_r+0x5de>
 800a95c:	461d      	mov	r5, r3
 800a95e:	e7ea      	b.n	800a936 <_dtoa_r+0x69e>
 800a960:	2200      	movs	r2, #0
 800a962:	4b9b      	ldr	r3, [pc, #620]	; (800abd0 <_dtoa_r+0x938>)
 800a964:	f7f5 fe68 	bl	8000638 <__aeabi_dmul>
 800a968:	2200      	movs	r2, #0
 800a96a:	2300      	movs	r3, #0
 800a96c:	4606      	mov	r6, r0
 800a96e:	460f      	mov	r7, r1
 800a970:	f7f6 f8ca 	bl	8000b08 <__aeabi_dcmpeq>
 800a974:	2800      	cmp	r0, #0
 800a976:	d09a      	beq.n	800a8ae <_dtoa_r+0x616>
 800a978:	e7cb      	b.n	800a912 <_dtoa_r+0x67a>
 800a97a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a97c:	2a00      	cmp	r2, #0
 800a97e:	f000 808b 	beq.w	800aa98 <_dtoa_r+0x800>
 800a982:	9a06      	ldr	r2, [sp, #24]
 800a984:	2a01      	cmp	r2, #1
 800a986:	dc6e      	bgt.n	800aa66 <_dtoa_r+0x7ce>
 800a988:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a98a:	2a00      	cmp	r2, #0
 800a98c:	d067      	beq.n	800aa5e <_dtoa_r+0x7c6>
 800a98e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a992:	9f07      	ldr	r7, [sp, #28]
 800a994:	9d05      	ldr	r5, [sp, #20]
 800a996:	9a05      	ldr	r2, [sp, #20]
 800a998:	2101      	movs	r1, #1
 800a99a:	441a      	add	r2, r3
 800a99c:	4620      	mov	r0, r4
 800a99e:	9205      	str	r2, [sp, #20]
 800a9a0:	4498      	add	r8, r3
 800a9a2:	f000 fea2 	bl	800b6ea <__i2b>
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	2d00      	cmp	r5, #0
 800a9aa:	dd0c      	ble.n	800a9c6 <_dtoa_r+0x72e>
 800a9ac:	f1b8 0f00 	cmp.w	r8, #0
 800a9b0:	dd09      	ble.n	800a9c6 <_dtoa_r+0x72e>
 800a9b2:	4545      	cmp	r5, r8
 800a9b4:	9a05      	ldr	r2, [sp, #20]
 800a9b6:	462b      	mov	r3, r5
 800a9b8:	bfa8      	it	ge
 800a9ba:	4643      	movge	r3, r8
 800a9bc:	1ad2      	subs	r2, r2, r3
 800a9be:	9205      	str	r2, [sp, #20]
 800a9c0:	1aed      	subs	r5, r5, r3
 800a9c2:	eba8 0803 	sub.w	r8, r8, r3
 800a9c6:	9b07      	ldr	r3, [sp, #28]
 800a9c8:	b1eb      	cbz	r3, 800aa06 <_dtoa_r+0x76e>
 800a9ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d067      	beq.n	800aaa0 <_dtoa_r+0x808>
 800a9d0:	b18f      	cbz	r7, 800a9f6 <_dtoa_r+0x75e>
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	463a      	mov	r2, r7
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f000 ff26 	bl	800b828 <__pow5mult>
 800a9dc:	9a04      	ldr	r2, [sp, #16]
 800a9de:	4601      	mov	r1, r0
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f000 fe8a 	bl	800b6fc <__multiply>
 800a9e8:	9904      	ldr	r1, [sp, #16]
 800a9ea:	9008      	str	r0, [sp, #32]
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f000 fd9e 	bl	800b52e <_Bfree>
 800a9f2:	9b08      	ldr	r3, [sp, #32]
 800a9f4:	9304      	str	r3, [sp, #16]
 800a9f6:	9b07      	ldr	r3, [sp, #28]
 800a9f8:	1bda      	subs	r2, r3, r7
 800a9fa:	d004      	beq.n	800aa06 <_dtoa_r+0x76e>
 800a9fc:	9904      	ldr	r1, [sp, #16]
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f000 ff12 	bl	800b828 <__pow5mult>
 800aa04:	9004      	str	r0, [sp, #16]
 800aa06:	2101      	movs	r1, #1
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f000 fe6e 	bl	800b6ea <__i2b>
 800aa0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa10:	4607      	mov	r7, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f000 81d0 	beq.w	800adb8 <_dtoa_r+0xb20>
 800aa18:	461a      	mov	r2, r3
 800aa1a:	4601      	mov	r1, r0
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f000 ff03 	bl	800b828 <__pow5mult>
 800aa22:	9b06      	ldr	r3, [sp, #24]
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	4607      	mov	r7, r0
 800aa28:	dc40      	bgt.n	800aaac <_dtoa_r+0x814>
 800aa2a:	9b00      	ldr	r3, [sp, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d139      	bne.n	800aaa4 <_dtoa_r+0x80c>
 800aa30:	9b01      	ldr	r3, [sp, #4]
 800aa32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d136      	bne.n	800aaa8 <_dtoa_r+0x810>
 800aa3a:	9b01      	ldr	r3, [sp, #4]
 800aa3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa40:	0d1b      	lsrs	r3, r3, #20
 800aa42:	051b      	lsls	r3, r3, #20
 800aa44:	b12b      	cbz	r3, 800aa52 <_dtoa_r+0x7ba>
 800aa46:	9b05      	ldr	r3, [sp, #20]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	9305      	str	r3, [sp, #20]
 800aa4c:	f108 0801 	add.w	r8, r8, #1
 800aa50:	2301      	movs	r3, #1
 800aa52:	9307      	str	r3, [sp, #28]
 800aa54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d12a      	bne.n	800aab0 <_dtoa_r+0x818>
 800aa5a:	2001      	movs	r0, #1
 800aa5c:	e030      	b.n	800aac0 <_dtoa_r+0x828>
 800aa5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa60:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa64:	e795      	b.n	800a992 <_dtoa_r+0x6fa>
 800aa66:	9b07      	ldr	r3, [sp, #28]
 800aa68:	f109 37ff 	add.w	r7, r9, #4294967295
 800aa6c:	42bb      	cmp	r3, r7
 800aa6e:	bfbf      	itttt	lt
 800aa70:	9b07      	ldrlt	r3, [sp, #28]
 800aa72:	9707      	strlt	r7, [sp, #28]
 800aa74:	1afa      	sublt	r2, r7, r3
 800aa76:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800aa78:	bfbb      	ittet	lt
 800aa7a:	189b      	addlt	r3, r3, r2
 800aa7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800aa7e:	1bdf      	subge	r7, r3, r7
 800aa80:	2700      	movlt	r7, #0
 800aa82:	f1b9 0f00 	cmp.w	r9, #0
 800aa86:	bfb5      	itete	lt
 800aa88:	9b05      	ldrlt	r3, [sp, #20]
 800aa8a:	9d05      	ldrge	r5, [sp, #20]
 800aa8c:	eba3 0509 	sublt.w	r5, r3, r9
 800aa90:	464b      	movge	r3, r9
 800aa92:	bfb8      	it	lt
 800aa94:	2300      	movlt	r3, #0
 800aa96:	e77e      	b.n	800a996 <_dtoa_r+0x6fe>
 800aa98:	9f07      	ldr	r7, [sp, #28]
 800aa9a:	9d05      	ldr	r5, [sp, #20]
 800aa9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800aa9e:	e783      	b.n	800a9a8 <_dtoa_r+0x710>
 800aaa0:	9a07      	ldr	r2, [sp, #28]
 800aaa2:	e7ab      	b.n	800a9fc <_dtoa_r+0x764>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	e7d4      	b.n	800aa52 <_dtoa_r+0x7ba>
 800aaa8:	9b00      	ldr	r3, [sp, #0]
 800aaaa:	e7d2      	b.n	800aa52 <_dtoa_r+0x7ba>
 800aaac:	2300      	movs	r3, #0
 800aaae:	9307      	str	r3, [sp, #28]
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800aab6:	6918      	ldr	r0, [r3, #16]
 800aab8:	f000 fdc9 	bl	800b64e <__hi0bits>
 800aabc:	f1c0 0020 	rsb	r0, r0, #32
 800aac0:	4440      	add	r0, r8
 800aac2:	f010 001f 	ands.w	r0, r0, #31
 800aac6:	d047      	beq.n	800ab58 <_dtoa_r+0x8c0>
 800aac8:	f1c0 0320 	rsb	r3, r0, #32
 800aacc:	2b04      	cmp	r3, #4
 800aace:	dd3b      	ble.n	800ab48 <_dtoa_r+0x8b0>
 800aad0:	9b05      	ldr	r3, [sp, #20]
 800aad2:	f1c0 001c 	rsb	r0, r0, #28
 800aad6:	4403      	add	r3, r0
 800aad8:	9305      	str	r3, [sp, #20]
 800aada:	4405      	add	r5, r0
 800aadc:	4480      	add	r8, r0
 800aade:	9b05      	ldr	r3, [sp, #20]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	dd05      	ble.n	800aaf0 <_dtoa_r+0x858>
 800aae4:	461a      	mov	r2, r3
 800aae6:	9904      	ldr	r1, [sp, #16]
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 feeb 	bl	800b8c4 <__lshift>
 800aaee:	9004      	str	r0, [sp, #16]
 800aaf0:	f1b8 0f00 	cmp.w	r8, #0
 800aaf4:	dd05      	ble.n	800ab02 <_dtoa_r+0x86a>
 800aaf6:	4639      	mov	r1, r7
 800aaf8:	4642      	mov	r2, r8
 800aafa:	4620      	mov	r0, r4
 800aafc:	f000 fee2 	bl	800b8c4 <__lshift>
 800ab00:	4607      	mov	r7, r0
 800ab02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab04:	b353      	cbz	r3, 800ab5c <_dtoa_r+0x8c4>
 800ab06:	4639      	mov	r1, r7
 800ab08:	9804      	ldr	r0, [sp, #16]
 800ab0a:	f000 ff2f 	bl	800b96c <__mcmp>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	da24      	bge.n	800ab5c <_dtoa_r+0x8c4>
 800ab12:	2300      	movs	r3, #0
 800ab14:	220a      	movs	r2, #10
 800ab16:	9904      	ldr	r1, [sp, #16]
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f000 fd1f 	bl	800b55c <__multadd>
 800ab1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab20:	9004      	str	r0, [sp, #16]
 800ab22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f000 814d 	beq.w	800adc6 <_dtoa_r+0xb2e>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	4631      	mov	r1, r6
 800ab30:	220a      	movs	r2, #10
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 fd12 	bl	800b55c <__multadd>
 800ab38:	9b02      	ldr	r3, [sp, #8]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	dc4f      	bgt.n	800abe0 <_dtoa_r+0x948>
 800ab40:	9b06      	ldr	r3, [sp, #24]
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	dd4c      	ble.n	800abe0 <_dtoa_r+0x948>
 800ab46:	e011      	b.n	800ab6c <_dtoa_r+0x8d4>
 800ab48:	d0c9      	beq.n	800aade <_dtoa_r+0x846>
 800ab4a:	9a05      	ldr	r2, [sp, #20]
 800ab4c:	331c      	adds	r3, #28
 800ab4e:	441a      	add	r2, r3
 800ab50:	9205      	str	r2, [sp, #20]
 800ab52:	441d      	add	r5, r3
 800ab54:	4498      	add	r8, r3
 800ab56:	e7c2      	b.n	800aade <_dtoa_r+0x846>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	e7f6      	b.n	800ab4a <_dtoa_r+0x8b2>
 800ab5c:	f1b9 0f00 	cmp.w	r9, #0
 800ab60:	dc38      	bgt.n	800abd4 <_dtoa_r+0x93c>
 800ab62:	9b06      	ldr	r3, [sp, #24]
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	dd35      	ble.n	800abd4 <_dtoa_r+0x93c>
 800ab68:	f8cd 9008 	str.w	r9, [sp, #8]
 800ab6c:	9b02      	ldr	r3, [sp, #8]
 800ab6e:	b963      	cbnz	r3, 800ab8a <_dtoa_r+0x8f2>
 800ab70:	4639      	mov	r1, r7
 800ab72:	2205      	movs	r2, #5
 800ab74:	4620      	mov	r0, r4
 800ab76:	f000 fcf1 	bl	800b55c <__multadd>
 800ab7a:	4601      	mov	r1, r0
 800ab7c:	4607      	mov	r7, r0
 800ab7e:	9804      	ldr	r0, [sp, #16]
 800ab80:	f000 fef4 	bl	800b96c <__mcmp>
 800ab84:	2800      	cmp	r0, #0
 800ab86:	f73f adcc 	bgt.w	800a722 <_dtoa_r+0x48a>
 800ab8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab8c:	465d      	mov	r5, fp
 800ab8e:	ea6f 0a03 	mvn.w	sl, r3
 800ab92:	f04f 0900 	mov.w	r9, #0
 800ab96:	4639      	mov	r1, r7
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f000 fcc8 	bl	800b52e <_Bfree>
 800ab9e:	2e00      	cmp	r6, #0
 800aba0:	f43f aeb7 	beq.w	800a912 <_dtoa_r+0x67a>
 800aba4:	f1b9 0f00 	cmp.w	r9, #0
 800aba8:	d005      	beq.n	800abb6 <_dtoa_r+0x91e>
 800abaa:	45b1      	cmp	r9, r6
 800abac:	d003      	beq.n	800abb6 <_dtoa_r+0x91e>
 800abae:	4649      	mov	r1, r9
 800abb0:	4620      	mov	r0, r4
 800abb2:	f000 fcbc 	bl	800b52e <_Bfree>
 800abb6:	4631      	mov	r1, r6
 800abb8:	4620      	mov	r0, r4
 800abba:	f000 fcb8 	bl	800b52e <_Bfree>
 800abbe:	e6a8      	b.n	800a912 <_dtoa_r+0x67a>
 800abc0:	2700      	movs	r7, #0
 800abc2:	463e      	mov	r6, r7
 800abc4:	e7e1      	b.n	800ab8a <_dtoa_r+0x8f2>
 800abc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800abca:	463e      	mov	r6, r7
 800abcc:	e5a9      	b.n	800a722 <_dtoa_r+0x48a>
 800abce:	bf00      	nop
 800abd0:	40240000 	.word	0x40240000
 800abd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abd6:	f8cd 9008 	str.w	r9, [sp, #8]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f000 80fa 	beq.w	800add4 <_dtoa_r+0xb3c>
 800abe0:	2d00      	cmp	r5, #0
 800abe2:	dd05      	ble.n	800abf0 <_dtoa_r+0x958>
 800abe4:	4631      	mov	r1, r6
 800abe6:	462a      	mov	r2, r5
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 fe6b 	bl	800b8c4 <__lshift>
 800abee:	4606      	mov	r6, r0
 800abf0:	9b07      	ldr	r3, [sp, #28]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d04c      	beq.n	800ac90 <_dtoa_r+0x9f8>
 800abf6:	6871      	ldr	r1, [r6, #4]
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 fc64 	bl	800b4c6 <_Balloc>
 800abfe:	6932      	ldr	r2, [r6, #16]
 800ac00:	3202      	adds	r2, #2
 800ac02:	4605      	mov	r5, r0
 800ac04:	0092      	lsls	r2, r2, #2
 800ac06:	f106 010c 	add.w	r1, r6, #12
 800ac0a:	300c      	adds	r0, #12
 800ac0c:	f000 fc50 	bl	800b4b0 <memcpy>
 800ac10:	2201      	movs	r2, #1
 800ac12:	4629      	mov	r1, r5
 800ac14:	4620      	mov	r0, r4
 800ac16:	f000 fe55 	bl	800b8c4 <__lshift>
 800ac1a:	9b00      	ldr	r3, [sp, #0]
 800ac1c:	f8cd b014 	str.w	fp, [sp, #20]
 800ac20:	f003 0301 	and.w	r3, r3, #1
 800ac24:	46b1      	mov	r9, r6
 800ac26:	9307      	str	r3, [sp, #28]
 800ac28:	4606      	mov	r6, r0
 800ac2a:	4639      	mov	r1, r7
 800ac2c:	9804      	ldr	r0, [sp, #16]
 800ac2e:	f7ff faa5 	bl	800a17c <quorem>
 800ac32:	4649      	mov	r1, r9
 800ac34:	4605      	mov	r5, r0
 800ac36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ac3a:	9804      	ldr	r0, [sp, #16]
 800ac3c:	f000 fe96 	bl	800b96c <__mcmp>
 800ac40:	4632      	mov	r2, r6
 800ac42:	9000      	str	r0, [sp, #0]
 800ac44:	4639      	mov	r1, r7
 800ac46:	4620      	mov	r0, r4
 800ac48:	f000 feaa 	bl	800b9a0 <__mdiff>
 800ac4c:	68c3      	ldr	r3, [r0, #12]
 800ac4e:	4602      	mov	r2, r0
 800ac50:	bb03      	cbnz	r3, 800ac94 <_dtoa_r+0x9fc>
 800ac52:	4601      	mov	r1, r0
 800ac54:	9008      	str	r0, [sp, #32]
 800ac56:	9804      	ldr	r0, [sp, #16]
 800ac58:	f000 fe88 	bl	800b96c <__mcmp>
 800ac5c:	9a08      	ldr	r2, [sp, #32]
 800ac5e:	4603      	mov	r3, r0
 800ac60:	4611      	mov	r1, r2
 800ac62:	4620      	mov	r0, r4
 800ac64:	9308      	str	r3, [sp, #32]
 800ac66:	f000 fc62 	bl	800b52e <_Bfree>
 800ac6a:	9b08      	ldr	r3, [sp, #32]
 800ac6c:	b9a3      	cbnz	r3, 800ac98 <_dtoa_r+0xa00>
 800ac6e:	9a06      	ldr	r2, [sp, #24]
 800ac70:	b992      	cbnz	r2, 800ac98 <_dtoa_r+0xa00>
 800ac72:	9a07      	ldr	r2, [sp, #28]
 800ac74:	b982      	cbnz	r2, 800ac98 <_dtoa_r+0xa00>
 800ac76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ac7a:	d029      	beq.n	800acd0 <_dtoa_r+0xa38>
 800ac7c:	9b00      	ldr	r3, [sp, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	dd01      	ble.n	800ac86 <_dtoa_r+0x9ee>
 800ac82:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ac86:	9b05      	ldr	r3, [sp, #20]
 800ac88:	1c5d      	adds	r5, r3, #1
 800ac8a:	f883 8000 	strb.w	r8, [r3]
 800ac8e:	e782      	b.n	800ab96 <_dtoa_r+0x8fe>
 800ac90:	4630      	mov	r0, r6
 800ac92:	e7c2      	b.n	800ac1a <_dtoa_r+0x982>
 800ac94:	2301      	movs	r3, #1
 800ac96:	e7e3      	b.n	800ac60 <_dtoa_r+0x9c8>
 800ac98:	9a00      	ldr	r2, [sp, #0]
 800ac9a:	2a00      	cmp	r2, #0
 800ac9c:	db04      	blt.n	800aca8 <_dtoa_r+0xa10>
 800ac9e:	d125      	bne.n	800acec <_dtoa_r+0xa54>
 800aca0:	9a06      	ldr	r2, [sp, #24]
 800aca2:	bb1a      	cbnz	r2, 800acec <_dtoa_r+0xa54>
 800aca4:	9a07      	ldr	r2, [sp, #28]
 800aca6:	bb0a      	cbnz	r2, 800acec <_dtoa_r+0xa54>
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	ddec      	ble.n	800ac86 <_dtoa_r+0x9ee>
 800acac:	2201      	movs	r2, #1
 800acae:	9904      	ldr	r1, [sp, #16]
 800acb0:	4620      	mov	r0, r4
 800acb2:	f000 fe07 	bl	800b8c4 <__lshift>
 800acb6:	4639      	mov	r1, r7
 800acb8:	9004      	str	r0, [sp, #16]
 800acba:	f000 fe57 	bl	800b96c <__mcmp>
 800acbe:	2800      	cmp	r0, #0
 800acc0:	dc03      	bgt.n	800acca <_dtoa_r+0xa32>
 800acc2:	d1e0      	bne.n	800ac86 <_dtoa_r+0x9ee>
 800acc4:	f018 0f01 	tst.w	r8, #1
 800acc8:	d0dd      	beq.n	800ac86 <_dtoa_r+0x9ee>
 800acca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800acce:	d1d8      	bne.n	800ac82 <_dtoa_r+0x9ea>
 800acd0:	9b05      	ldr	r3, [sp, #20]
 800acd2:	9a05      	ldr	r2, [sp, #20]
 800acd4:	1c5d      	adds	r5, r3, #1
 800acd6:	2339      	movs	r3, #57	; 0x39
 800acd8:	7013      	strb	r3, [r2, #0]
 800acda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800acde:	2b39      	cmp	r3, #57	; 0x39
 800ace0:	f105 32ff 	add.w	r2, r5, #4294967295
 800ace4:	d04f      	beq.n	800ad86 <_dtoa_r+0xaee>
 800ace6:	3301      	adds	r3, #1
 800ace8:	7013      	strb	r3, [r2, #0]
 800acea:	e754      	b.n	800ab96 <_dtoa_r+0x8fe>
 800acec:	9a05      	ldr	r2, [sp, #20]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f102 0501 	add.w	r5, r2, #1
 800acf4:	dd06      	ble.n	800ad04 <_dtoa_r+0xa6c>
 800acf6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800acfa:	d0e9      	beq.n	800acd0 <_dtoa_r+0xa38>
 800acfc:	f108 0801 	add.w	r8, r8, #1
 800ad00:	9b05      	ldr	r3, [sp, #20]
 800ad02:	e7c2      	b.n	800ac8a <_dtoa_r+0x9f2>
 800ad04:	9a02      	ldr	r2, [sp, #8]
 800ad06:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ad0a:	eba5 030b 	sub.w	r3, r5, fp
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d021      	beq.n	800ad56 <_dtoa_r+0xabe>
 800ad12:	2300      	movs	r3, #0
 800ad14:	220a      	movs	r2, #10
 800ad16:	9904      	ldr	r1, [sp, #16]
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f000 fc1f 	bl	800b55c <__multadd>
 800ad1e:	45b1      	cmp	r9, r6
 800ad20:	9004      	str	r0, [sp, #16]
 800ad22:	f04f 0300 	mov.w	r3, #0
 800ad26:	f04f 020a 	mov.w	r2, #10
 800ad2a:	4649      	mov	r1, r9
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	d105      	bne.n	800ad3c <_dtoa_r+0xaa4>
 800ad30:	f000 fc14 	bl	800b55c <__multadd>
 800ad34:	4681      	mov	r9, r0
 800ad36:	4606      	mov	r6, r0
 800ad38:	9505      	str	r5, [sp, #20]
 800ad3a:	e776      	b.n	800ac2a <_dtoa_r+0x992>
 800ad3c:	f000 fc0e 	bl	800b55c <__multadd>
 800ad40:	4631      	mov	r1, r6
 800ad42:	4681      	mov	r9, r0
 800ad44:	2300      	movs	r3, #0
 800ad46:	220a      	movs	r2, #10
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f000 fc07 	bl	800b55c <__multadd>
 800ad4e:	4606      	mov	r6, r0
 800ad50:	e7f2      	b.n	800ad38 <_dtoa_r+0xaa0>
 800ad52:	f04f 0900 	mov.w	r9, #0
 800ad56:	2201      	movs	r2, #1
 800ad58:	9904      	ldr	r1, [sp, #16]
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f000 fdb2 	bl	800b8c4 <__lshift>
 800ad60:	4639      	mov	r1, r7
 800ad62:	9004      	str	r0, [sp, #16]
 800ad64:	f000 fe02 	bl	800b96c <__mcmp>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	dcb6      	bgt.n	800acda <_dtoa_r+0xa42>
 800ad6c:	d102      	bne.n	800ad74 <_dtoa_r+0xadc>
 800ad6e:	f018 0f01 	tst.w	r8, #1
 800ad72:	d1b2      	bne.n	800acda <_dtoa_r+0xa42>
 800ad74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad78:	2b30      	cmp	r3, #48	; 0x30
 800ad7a:	f105 32ff 	add.w	r2, r5, #4294967295
 800ad7e:	f47f af0a 	bne.w	800ab96 <_dtoa_r+0x8fe>
 800ad82:	4615      	mov	r5, r2
 800ad84:	e7f6      	b.n	800ad74 <_dtoa_r+0xadc>
 800ad86:	4593      	cmp	fp, r2
 800ad88:	d105      	bne.n	800ad96 <_dtoa_r+0xafe>
 800ad8a:	2331      	movs	r3, #49	; 0x31
 800ad8c:	f10a 0a01 	add.w	sl, sl, #1
 800ad90:	f88b 3000 	strb.w	r3, [fp]
 800ad94:	e6ff      	b.n	800ab96 <_dtoa_r+0x8fe>
 800ad96:	4615      	mov	r5, r2
 800ad98:	e79f      	b.n	800acda <_dtoa_r+0xa42>
 800ad9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ae00 <_dtoa_r+0xb68>
 800ad9e:	e007      	b.n	800adb0 <_dtoa_r+0xb18>
 800ada0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ada2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ae04 <_dtoa_r+0xb6c>
 800ada6:	b11b      	cbz	r3, 800adb0 <_dtoa_r+0xb18>
 800ada8:	f10b 0308 	add.w	r3, fp, #8
 800adac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800adae:	6013      	str	r3, [r2, #0]
 800adb0:	4658      	mov	r0, fp
 800adb2:	b017      	add	sp, #92	; 0x5c
 800adb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb8:	9b06      	ldr	r3, [sp, #24]
 800adba:	2b01      	cmp	r3, #1
 800adbc:	f77f ae35 	ble.w	800aa2a <_dtoa_r+0x792>
 800adc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adc2:	9307      	str	r3, [sp, #28]
 800adc4:	e649      	b.n	800aa5a <_dtoa_r+0x7c2>
 800adc6:	9b02      	ldr	r3, [sp, #8]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	dc03      	bgt.n	800add4 <_dtoa_r+0xb3c>
 800adcc:	9b06      	ldr	r3, [sp, #24]
 800adce:	2b02      	cmp	r3, #2
 800add0:	f73f aecc 	bgt.w	800ab6c <_dtoa_r+0x8d4>
 800add4:	465d      	mov	r5, fp
 800add6:	4639      	mov	r1, r7
 800add8:	9804      	ldr	r0, [sp, #16]
 800adda:	f7ff f9cf 	bl	800a17c <quorem>
 800adde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ade2:	f805 8b01 	strb.w	r8, [r5], #1
 800ade6:	9a02      	ldr	r2, [sp, #8]
 800ade8:	eba5 030b 	sub.w	r3, r5, fp
 800adec:	429a      	cmp	r2, r3
 800adee:	ddb0      	ble.n	800ad52 <_dtoa_r+0xaba>
 800adf0:	2300      	movs	r3, #0
 800adf2:	220a      	movs	r2, #10
 800adf4:	9904      	ldr	r1, [sp, #16]
 800adf6:	4620      	mov	r0, r4
 800adf8:	f000 fbb0 	bl	800b55c <__multadd>
 800adfc:	9004      	str	r0, [sp, #16]
 800adfe:	e7ea      	b.n	800add6 <_dtoa_r+0xb3e>
 800ae00:	0800c218 	.word	0x0800c218
 800ae04:	0800c298 	.word	0x0800c298

0800ae08 <rshift>:
 800ae08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae0a:	6906      	ldr	r6, [r0, #16]
 800ae0c:	114b      	asrs	r3, r1, #5
 800ae0e:	429e      	cmp	r6, r3
 800ae10:	f100 0414 	add.w	r4, r0, #20
 800ae14:	dd30      	ble.n	800ae78 <rshift+0x70>
 800ae16:	f011 011f 	ands.w	r1, r1, #31
 800ae1a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ae1e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ae22:	d108      	bne.n	800ae36 <rshift+0x2e>
 800ae24:	4621      	mov	r1, r4
 800ae26:	42b2      	cmp	r2, r6
 800ae28:	460b      	mov	r3, r1
 800ae2a:	d211      	bcs.n	800ae50 <rshift+0x48>
 800ae2c:	f852 3b04 	ldr.w	r3, [r2], #4
 800ae30:	f841 3b04 	str.w	r3, [r1], #4
 800ae34:	e7f7      	b.n	800ae26 <rshift+0x1e>
 800ae36:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ae3a:	f1c1 0c20 	rsb	ip, r1, #32
 800ae3e:	40cd      	lsrs	r5, r1
 800ae40:	3204      	adds	r2, #4
 800ae42:	4623      	mov	r3, r4
 800ae44:	42b2      	cmp	r2, r6
 800ae46:	4617      	mov	r7, r2
 800ae48:	d30c      	bcc.n	800ae64 <rshift+0x5c>
 800ae4a:	601d      	str	r5, [r3, #0]
 800ae4c:	b105      	cbz	r5, 800ae50 <rshift+0x48>
 800ae4e:	3304      	adds	r3, #4
 800ae50:	1b1a      	subs	r2, r3, r4
 800ae52:	42a3      	cmp	r3, r4
 800ae54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ae58:	bf08      	it	eq
 800ae5a:	2300      	moveq	r3, #0
 800ae5c:	6102      	str	r2, [r0, #16]
 800ae5e:	bf08      	it	eq
 800ae60:	6143      	streq	r3, [r0, #20]
 800ae62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae64:	683f      	ldr	r7, [r7, #0]
 800ae66:	fa07 f70c 	lsl.w	r7, r7, ip
 800ae6a:	433d      	orrs	r5, r7
 800ae6c:	f843 5b04 	str.w	r5, [r3], #4
 800ae70:	f852 5b04 	ldr.w	r5, [r2], #4
 800ae74:	40cd      	lsrs	r5, r1
 800ae76:	e7e5      	b.n	800ae44 <rshift+0x3c>
 800ae78:	4623      	mov	r3, r4
 800ae7a:	e7e9      	b.n	800ae50 <rshift+0x48>

0800ae7c <__hexdig_fun>:
 800ae7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ae80:	2b09      	cmp	r3, #9
 800ae82:	d802      	bhi.n	800ae8a <__hexdig_fun+0xe>
 800ae84:	3820      	subs	r0, #32
 800ae86:	b2c0      	uxtb	r0, r0
 800ae88:	4770      	bx	lr
 800ae8a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ae8e:	2b05      	cmp	r3, #5
 800ae90:	d801      	bhi.n	800ae96 <__hexdig_fun+0x1a>
 800ae92:	3847      	subs	r0, #71	; 0x47
 800ae94:	e7f7      	b.n	800ae86 <__hexdig_fun+0xa>
 800ae96:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ae9a:	2b05      	cmp	r3, #5
 800ae9c:	d801      	bhi.n	800aea2 <__hexdig_fun+0x26>
 800ae9e:	3827      	subs	r0, #39	; 0x27
 800aea0:	e7f1      	b.n	800ae86 <__hexdig_fun+0xa>
 800aea2:	2000      	movs	r0, #0
 800aea4:	4770      	bx	lr

0800aea6 <__gethex>:
 800aea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeaa:	b08b      	sub	sp, #44	; 0x2c
 800aeac:	468a      	mov	sl, r1
 800aeae:	9002      	str	r0, [sp, #8]
 800aeb0:	9816      	ldr	r0, [sp, #88]	; 0x58
 800aeb2:	9306      	str	r3, [sp, #24]
 800aeb4:	4690      	mov	r8, r2
 800aeb6:	f000 fad0 	bl	800b45a <__localeconv_l>
 800aeba:	6803      	ldr	r3, [r0, #0]
 800aebc:	9303      	str	r3, [sp, #12]
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7f5 f9a6 	bl	8000210 <strlen>
 800aec4:	9b03      	ldr	r3, [sp, #12]
 800aec6:	9001      	str	r0, [sp, #4]
 800aec8:	4403      	add	r3, r0
 800aeca:	f04f 0b00 	mov.w	fp, #0
 800aece:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aed2:	9307      	str	r3, [sp, #28]
 800aed4:	f8da 3000 	ldr.w	r3, [sl]
 800aed8:	3302      	adds	r3, #2
 800aeda:	461f      	mov	r7, r3
 800aedc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aee0:	2830      	cmp	r0, #48	; 0x30
 800aee2:	d06c      	beq.n	800afbe <__gethex+0x118>
 800aee4:	f7ff ffca 	bl	800ae7c <__hexdig_fun>
 800aee8:	4604      	mov	r4, r0
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d16a      	bne.n	800afc4 <__gethex+0x11e>
 800aeee:	9a01      	ldr	r2, [sp, #4]
 800aef0:	9903      	ldr	r1, [sp, #12]
 800aef2:	4638      	mov	r0, r7
 800aef4:	f001 f8fe 	bl	800c0f4 <strncmp>
 800aef8:	2800      	cmp	r0, #0
 800aefa:	d166      	bne.n	800afca <__gethex+0x124>
 800aefc:	9b01      	ldr	r3, [sp, #4]
 800aefe:	5cf8      	ldrb	r0, [r7, r3]
 800af00:	18fe      	adds	r6, r7, r3
 800af02:	f7ff ffbb 	bl	800ae7c <__hexdig_fun>
 800af06:	2800      	cmp	r0, #0
 800af08:	d062      	beq.n	800afd0 <__gethex+0x12a>
 800af0a:	4633      	mov	r3, r6
 800af0c:	7818      	ldrb	r0, [r3, #0]
 800af0e:	2830      	cmp	r0, #48	; 0x30
 800af10:	461f      	mov	r7, r3
 800af12:	f103 0301 	add.w	r3, r3, #1
 800af16:	d0f9      	beq.n	800af0c <__gethex+0x66>
 800af18:	f7ff ffb0 	bl	800ae7c <__hexdig_fun>
 800af1c:	fab0 f580 	clz	r5, r0
 800af20:	096d      	lsrs	r5, r5, #5
 800af22:	4634      	mov	r4, r6
 800af24:	f04f 0b01 	mov.w	fp, #1
 800af28:	463a      	mov	r2, r7
 800af2a:	4616      	mov	r6, r2
 800af2c:	3201      	adds	r2, #1
 800af2e:	7830      	ldrb	r0, [r6, #0]
 800af30:	f7ff ffa4 	bl	800ae7c <__hexdig_fun>
 800af34:	2800      	cmp	r0, #0
 800af36:	d1f8      	bne.n	800af2a <__gethex+0x84>
 800af38:	9a01      	ldr	r2, [sp, #4]
 800af3a:	9903      	ldr	r1, [sp, #12]
 800af3c:	4630      	mov	r0, r6
 800af3e:	f001 f8d9 	bl	800c0f4 <strncmp>
 800af42:	b950      	cbnz	r0, 800af5a <__gethex+0xb4>
 800af44:	b954      	cbnz	r4, 800af5c <__gethex+0xb6>
 800af46:	9b01      	ldr	r3, [sp, #4]
 800af48:	18f4      	adds	r4, r6, r3
 800af4a:	4622      	mov	r2, r4
 800af4c:	4616      	mov	r6, r2
 800af4e:	3201      	adds	r2, #1
 800af50:	7830      	ldrb	r0, [r6, #0]
 800af52:	f7ff ff93 	bl	800ae7c <__hexdig_fun>
 800af56:	2800      	cmp	r0, #0
 800af58:	d1f8      	bne.n	800af4c <__gethex+0xa6>
 800af5a:	b10c      	cbz	r4, 800af60 <__gethex+0xba>
 800af5c:	1ba4      	subs	r4, r4, r6
 800af5e:	00a4      	lsls	r4, r4, #2
 800af60:	7833      	ldrb	r3, [r6, #0]
 800af62:	2b50      	cmp	r3, #80	; 0x50
 800af64:	d001      	beq.n	800af6a <__gethex+0xc4>
 800af66:	2b70      	cmp	r3, #112	; 0x70
 800af68:	d140      	bne.n	800afec <__gethex+0x146>
 800af6a:	7873      	ldrb	r3, [r6, #1]
 800af6c:	2b2b      	cmp	r3, #43	; 0x2b
 800af6e:	d031      	beq.n	800afd4 <__gethex+0x12e>
 800af70:	2b2d      	cmp	r3, #45	; 0x2d
 800af72:	d033      	beq.n	800afdc <__gethex+0x136>
 800af74:	1c71      	adds	r1, r6, #1
 800af76:	f04f 0900 	mov.w	r9, #0
 800af7a:	7808      	ldrb	r0, [r1, #0]
 800af7c:	f7ff ff7e 	bl	800ae7c <__hexdig_fun>
 800af80:	1e43      	subs	r3, r0, #1
 800af82:	b2db      	uxtb	r3, r3
 800af84:	2b18      	cmp	r3, #24
 800af86:	d831      	bhi.n	800afec <__gethex+0x146>
 800af88:	f1a0 0210 	sub.w	r2, r0, #16
 800af8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800af90:	f7ff ff74 	bl	800ae7c <__hexdig_fun>
 800af94:	1e43      	subs	r3, r0, #1
 800af96:	b2db      	uxtb	r3, r3
 800af98:	2b18      	cmp	r3, #24
 800af9a:	d922      	bls.n	800afe2 <__gethex+0x13c>
 800af9c:	f1b9 0f00 	cmp.w	r9, #0
 800afa0:	d000      	beq.n	800afa4 <__gethex+0xfe>
 800afa2:	4252      	negs	r2, r2
 800afa4:	4414      	add	r4, r2
 800afa6:	f8ca 1000 	str.w	r1, [sl]
 800afaa:	b30d      	cbz	r5, 800aff0 <__gethex+0x14a>
 800afac:	f1bb 0f00 	cmp.w	fp, #0
 800afb0:	bf0c      	ite	eq
 800afb2:	2706      	moveq	r7, #6
 800afb4:	2700      	movne	r7, #0
 800afb6:	4638      	mov	r0, r7
 800afb8:	b00b      	add	sp, #44	; 0x2c
 800afba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbe:	f10b 0b01 	add.w	fp, fp, #1
 800afc2:	e78a      	b.n	800aeda <__gethex+0x34>
 800afc4:	2500      	movs	r5, #0
 800afc6:	462c      	mov	r4, r5
 800afc8:	e7ae      	b.n	800af28 <__gethex+0x82>
 800afca:	463e      	mov	r6, r7
 800afcc:	2501      	movs	r5, #1
 800afce:	e7c7      	b.n	800af60 <__gethex+0xba>
 800afd0:	4604      	mov	r4, r0
 800afd2:	e7fb      	b.n	800afcc <__gethex+0x126>
 800afd4:	f04f 0900 	mov.w	r9, #0
 800afd8:	1cb1      	adds	r1, r6, #2
 800afda:	e7ce      	b.n	800af7a <__gethex+0xd4>
 800afdc:	f04f 0901 	mov.w	r9, #1
 800afe0:	e7fa      	b.n	800afd8 <__gethex+0x132>
 800afe2:	230a      	movs	r3, #10
 800afe4:	fb03 0202 	mla	r2, r3, r2, r0
 800afe8:	3a10      	subs	r2, #16
 800afea:	e7cf      	b.n	800af8c <__gethex+0xe6>
 800afec:	4631      	mov	r1, r6
 800afee:	e7da      	b.n	800afa6 <__gethex+0x100>
 800aff0:	1bf3      	subs	r3, r6, r7
 800aff2:	3b01      	subs	r3, #1
 800aff4:	4629      	mov	r1, r5
 800aff6:	2b07      	cmp	r3, #7
 800aff8:	dc49      	bgt.n	800b08e <__gethex+0x1e8>
 800affa:	9802      	ldr	r0, [sp, #8]
 800affc:	f000 fa63 	bl	800b4c6 <_Balloc>
 800b000:	9b01      	ldr	r3, [sp, #4]
 800b002:	f100 0914 	add.w	r9, r0, #20
 800b006:	f04f 0b00 	mov.w	fp, #0
 800b00a:	f1c3 0301 	rsb	r3, r3, #1
 800b00e:	4605      	mov	r5, r0
 800b010:	f8cd 9010 	str.w	r9, [sp, #16]
 800b014:	46da      	mov	sl, fp
 800b016:	9308      	str	r3, [sp, #32]
 800b018:	42b7      	cmp	r7, r6
 800b01a:	d33b      	bcc.n	800b094 <__gethex+0x1ee>
 800b01c:	9804      	ldr	r0, [sp, #16]
 800b01e:	f840 ab04 	str.w	sl, [r0], #4
 800b022:	eba0 0009 	sub.w	r0, r0, r9
 800b026:	1080      	asrs	r0, r0, #2
 800b028:	6128      	str	r0, [r5, #16]
 800b02a:	0147      	lsls	r7, r0, #5
 800b02c:	4650      	mov	r0, sl
 800b02e:	f000 fb0e 	bl	800b64e <__hi0bits>
 800b032:	f8d8 6000 	ldr.w	r6, [r8]
 800b036:	1a3f      	subs	r7, r7, r0
 800b038:	42b7      	cmp	r7, r6
 800b03a:	dd64      	ble.n	800b106 <__gethex+0x260>
 800b03c:	1bbf      	subs	r7, r7, r6
 800b03e:	4639      	mov	r1, r7
 800b040:	4628      	mov	r0, r5
 800b042:	f000 fe1d 	bl	800bc80 <__any_on>
 800b046:	4682      	mov	sl, r0
 800b048:	b178      	cbz	r0, 800b06a <__gethex+0x1c4>
 800b04a:	1e7b      	subs	r3, r7, #1
 800b04c:	1159      	asrs	r1, r3, #5
 800b04e:	f003 021f 	and.w	r2, r3, #31
 800b052:	f04f 0a01 	mov.w	sl, #1
 800b056:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b05a:	fa0a f202 	lsl.w	r2, sl, r2
 800b05e:	420a      	tst	r2, r1
 800b060:	d003      	beq.n	800b06a <__gethex+0x1c4>
 800b062:	4553      	cmp	r3, sl
 800b064:	dc46      	bgt.n	800b0f4 <__gethex+0x24e>
 800b066:	f04f 0a02 	mov.w	sl, #2
 800b06a:	4639      	mov	r1, r7
 800b06c:	4628      	mov	r0, r5
 800b06e:	f7ff fecb 	bl	800ae08 <rshift>
 800b072:	443c      	add	r4, r7
 800b074:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b078:	42a3      	cmp	r3, r4
 800b07a:	da52      	bge.n	800b122 <__gethex+0x27c>
 800b07c:	4629      	mov	r1, r5
 800b07e:	9802      	ldr	r0, [sp, #8]
 800b080:	f000 fa55 	bl	800b52e <_Bfree>
 800b084:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b086:	2300      	movs	r3, #0
 800b088:	6013      	str	r3, [r2, #0]
 800b08a:	27a3      	movs	r7, #163	; 0xa3
 800b08c:	e793      	b.n	800afb6 <__gethex+0x110>
 800b08e:	3101      	adds	r1, #1
 800b090:	105b      	asrs	r3, r3, #1
 800b092:	e7b0      	b.n	800aff6 <__gethex+0x150>
 800b094:	1e73      	subs	r3, r6, #1
 800b096:	9305      	str	r3, [sp, #20]
 800b098:	9a07      	ldr	r2, [sp, #28]
 800b09a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d018      	beq.n	800b0d4 <__gethex+0x22e>
 800b0a2:	f1bb 0f20 	cmp.w	fp, #32
 800b0a6:	d107      	bne.n	800b0b8 <__gethex+0x212>
 800b0a8:	9b04      	ldr	r3, [sp, #16]
 800b0aa:	f8c3 a000 	str.w	sl, [r3]
 800b0ae:	3304      	adds	r3, #4
 800b0b0:	f04f 0a00 	mov.w	sl, #0
 800b0b4:	9304      	str	r3, [sp, #16]
 800b0b6:	46d3      	mov	fp, sl
 800b0b8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b0bc:	f7ff fede 	bl	800ae7c <__hexdig_fun>
 800b0c0:	f000 000f 	and.w	r0, r0, #15
 800b0c4:	fa00 f00b 	lsl.w	r0, r0, fp
 800b0c8:	ea4a 0a00 	orr.w	sl, sl, r0
 800b0cc:	f10b 0b04 	add.w	fp, fp, #4
 800b0d0:	9b05      	ldr	r3, [sp, #20]
 800b0d2:	e00d      	b.n	800b0f0 <__gethex+0x24a>
 800b0d4:	9b05      	ldr	r3, [sp, #20]
 800b0d6:	9a08      	ldr	r2, [sp, #32]
 800b0d8:	4413      	add	r3, r2
 800b0da:	42bb      	cmp	r3, r7
 800b0dc:	d3e1      	bcc.n	800b0a2 <__gethex+0x1fc>
 800b0de:	4618      	mov	r0, r3
 800b0e0:	9a01      	ldr	r2, [sp, #4]
 800b0e2:	9903      	ldr	r1, [sp, #12]
 800b0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e6:	f001 f805 	bl	800c0f4 <strncmp>
 800b0ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d1d8      	bne.n	800b0a2 <__gethex+0x1fc>
 800b0f0:	461e      	mov	r6, r3
 800b0f2:	e791      	b.n	800b018 <__gethex+0x172>
 800b0f4:	1eb9      	subs	r1, r7, #2
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	f000 fdc2 	bl	800bc80 <__any_on>
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	d0b2      	beq.n	800b066 <__gethex+0x1c0>
 800b100:	f04f 0a03 	mov.w	sl, #3
 800b104:	e7b1      	b.n	800b06a <__gethex+0x1c4>
 800b106:	da09      	bge.n	800b11c <__gethex+0x276>
 800b108:	1bf7      	subs	r7, r6, r7
 800b10a:	4629      	mov	r1, r5
 800b10c:	463a      	mov	r2, r7
 800b10e:	9802      	ldr	r0, [sp, #8]
 800b110:	f000 fbd8 	bl	800b8c4 <__lshift>
 800b114:	1be4      	subs	r4, r4, r7
 800b116:	4605      	mov	r5, r0
 800b118:	f100 0914 	add.w	r9, r0, #20
 800b11c:	f04f 0a00 	mov.w	sl, #0
 800b120:	e7a8      	b.n	800b074 <__gethex+0x1ce>
 800b122:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b126:	42a0      	cmp	r0, r4
 800b128:	dd6a      	ble.n	800b200 <__gethex+0x35a>
 800b12a:	1b04      	subs	r4, r0, r4
 800b12c:	42a6      	cmp	r6, r4
 800b12e:	dc2e      	bgt.n	800b18e <__gethex+0x2e8>
 800b130:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b134:	2b02      	cmp	r3, #2
 800b136:	d022      	beq.n	800b17e <__gethex+0x2d8>
 800b138:	2b03      	cmp	r3, #3
 800b13a:	d024      	beq.n	800b186 <__gethex+0x2e0>
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d115      	bne.n	800b16c <__gethex+0x2c6>
 800b140:	42a6      	cmp	r6, r4
 800b142:	d113      	bne.n	800b16c <__gethex+0x2c6>
 800b144:	2e01      	cmp	r6, #1
 800b146:	dc0b      	bgt.n	800b160 <__gethex+0x2ba>
 800b148:	9a06      	ldr	r2, [sp, #24]
 800b14a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b14e:	6013      	str	r3, [r2, #0]
 800b150:	2301      	movs	r3, #1
 800b152:	612b      	str	r3, [r5, #16]
 800b154:	f8c9 3000 	str.w	r3, [r9]
 800b158:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b15a:	2762      	movs	r7, #98	; 0x62
 800b15c:	601d      	str	r5, [r3, #0]
 800b15e:	e72a      	b.n	800afb6 <__gethex+0x110>
 800b160:	1e71      	subs	r1, r6, #1
 800b162:	4628      	mov	r0, r5
 800b164:	f000 fd8c 	bl	800bc80 <__any_on>
 800b168:	2800      	cmp	r0, #0
 800b16a:	d1ed      	bne.n	800b148 <__gethex+0x2a2>
 800b16c:	4629      	mov	r1, r5
 800b16e:	9802      	ldr	r0, [sp, #8]
 800b170:	f000 f9dd 	bl	800b52e <_Bfree>
 800b174:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b176:	2300      	movs	r3, #0
 800b178:	6013      	str	r3, [r2, #0]
 800b17a:	2750      	movs	r7, #80	; 0x50
 800b17c:	e71b      	b.n	800afb6 <__gethex+0x110>
 800b17e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b180:	2b00      	cmp	r3, #0
 800b182:	d0e1      	beq.n	800b148 <__gethex+0x2a2>
 800b184:	e7f2      	b.n	800b16c <__gethex+0x2c6>
 800b186:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1dd      	bne.n	800b148 <__gethex+0x2a2>
 800b18c:	e7ee      	b.n	800b16c <__gethex+0x2c6>
 800b18e:	1e67      	subs	r7, r4, #1
 800b190:	f1ba 0f00 	cmp.w	sl, #0
 800b194:	d131      	bne.n	800b1fa <__gethex+0x354>
 800b196:	b127      	cbz	r7, 800b1a2 <__gethex+0x2fc>
 800b198:	4639      	mov	r1, r7
 800b19a:	4628      	mov	r0, r5
 800b19c:	f000 fd70 	bl	800bc80 <__any_on>
 800b1a0:	4682      	mov	sl, r0
 800b1a2:	117a      	asrs	r2, r7, #5
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	f007 071f 	and.w	r7, r7, #31
 800b1aa:	fa03 f707 	lsl.w	r7, r3, r7
 800b1ae:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b1b2:	4621      	mov	r1, r4
 800b1b4:	421f      	tst	r7, r3
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	bf18      	it	ne
 800b1ba:	f04a 0a02 	orrne.w	sl, sl, #2
 800b1be:	1b36      	subs	r6, r6, r4
 800b1c0:	f7ff fe22 	bl	800ae08 <rshift>
 800b1c4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b1c8:	2702      	movs	r7, #2
 800b1ca:	f1ba 0f00 	cmp.w	sl, #0
 800b1ce:	d048      	beq.n	800b262 <__gethex+0x3bc>
 800b1d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d015      	beq.n	800b204 <__gethex+0x35e>
 800b1d8:	2b03      	cmp	r3, #3
 800b1da:	d017      	beq.n	800b20c <__gethex+0x366>
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d109      	bne.n	800b1f4 <__gethex+0x34e>
 800b1e0:	f01a 0f02 	tst.w	sl, #2
 800b1e4:	d006      	beq.n	800b1f4 <__gethex+0x34e>
 800b1e6:	f8d9 3000 	ldr.w	r3, [r9]
 800b1ea:	ea4a 0a03 	orr.w	sl, sl, r3
 800b1ee:	f01a 0f01 	tst.w	sl, #1
 800b1f2:	d10e      	bne.n	800b212 <__gethex+0x36c>
 800b1f4:	f047 0710 	orr.w	r7, r7, #16
 800b1f8:	e033      	b.n	800b262 <__gethex+0x3bc>
 800b1fa:	f04f 0a01 	mov.w	sl, #1
 800b1fe:	e7d0      	b.n	800b1a2 <__gethex+0x2fc>
 800b200:	2701      	movs	r7, #1
 800b202:	e7e2      	b.n	800b1ca <__gethex+0x324>
 800b204:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b206:	f1c3 0301 	rsb	r3, r3, #1
 800b20a:	9315      	str	r3, [sp, #84]	; 0x54
 800b20c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d0f0      	beq.n	800b1f4 <__gethex+0x34e>
 800b212:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b216:	f105 0314 	add.w	r3, r5, #20
 800b21a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b21e:	eb03 010a 	add.w	r1, r3, sl
 800b222:	f04f 0c00 	mov.w	ip, #0
 800b226:	4618      	mov	r0, r3
 800b228:	f853 2b04 	ldr.w	r2, [r3], #4
 800b22c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b230:	d01c      	beq.n	800b26c <__gethex+0x3c6>
 800b232:	3201      	adds	r2, #1
 800b234:	6002      	str	r2, [r0, #0]
 800b236:	2f02      	cmp	r7, #2
 800b238:	f105 0314 	add.w	r3, r5, #20
 800b23c:	d138      	bne.n	800b2b0 <__gethex+0x40a>
 800b23e:	f8d8 2000 	ldr.w	r2, [r8]
 800b242:	3a01      	subs	r2, #1
 800b244:	42b2      	cmp	r2, r6
 800b246:	d10a      	bne.n	800b25e <__gethex+0x3b8>
 800b248:	1171      	asrs	r1, r6, #5
 800b24a:	2201      	movs	r2, #1
 800b24c:	f006 061f 	and.w	r6, r6, #31
 800b250:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b254:	fa02 f606 	lsl.w	r6, r2, r6
 800b258:	421e      	tst	r6, r3
 800b25a:	bf18      	it	ne
 800b25c:	4617      	movne	r7, r2
 800b25e:	f047 0720 	orr.w	r7, r7, #32
 800b262:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b264:	601d      	str	r5, [r3, #0]
 800b266:	9b06      	ldr	r3, [sp, #24]
 800b268:	601c      	str	r4, [r3, #0]
 800b26a:	e6a4      	b.n	800afb6 <__gethex+0x110>
 800b26c:	4299      	cmp	r1, r3
 800b26e:	f843 cc04 	str.w	ip, [r3, #-4]
 800b272:	d8d8      	bhi.n	800b226 <__gethex+0x380>
 800b274:	68ab      	ldr	r3, [r5, #8]
 800b276:	4599      	cmp	r9, r3
 800b278:	db12      	blt.n	800b2a0 <__gethex+0x3fa>
 800b27a:	6869      	ldr	r1, [r5, #4]
 800b27c:	9802      	ldr	r0, [sp, #8]
 800b27e:	3101      	adds	r1, #1
 800b280:	f000 f921 	bl	800b4c6 <_Balloc>
 800b284:	692a      	ldr	r2, [r5, #16]
 800b286:	3202      	adds	r2, #2
 800b288:	f105 010c 	add.w	r1, r5, #12
 800b28c:	4683      	mov	fp, r0
 800b28e:	0092      	lsls	r2, r2, #2
 800b290:	300c      	adds	r0, #12
 800b292:	f000 f90d 	bl	800b4b0 <memcpy>
 800b296:	4629      	mov	r1, r5
 800b298:	9802      	ldr	r0, [sp, #8]
 800b29a:	f000 f948 	bl	800b52e <_Bfree>
 800b29e:	465d      	mov	r5, fp
 800b2a0:	692b      	ldr	r3, [r5, #16]
 800b2a2:	1c5a      	adds	r2, r3, #1
 800b2a4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b2a8:	612a      	str	r2, [r5, #16]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	615a      	str	r2, [r3, #20]
 800b2ae:	e7c2      	b.n	800b236 <__gethex+0x390>
 800b2b0:	692a      	ldr	r2, [r5, #16]
 800b2b2:	454a      	cmp	r2, r9
 800b2b4:	dd0b      	ble.n	800b2ce <__gethex+0x428>
 800b2b6:	2101      	movs	r1, #1
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	f7ff fda5 	bl	800ae08 <rshift>
 800b2be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2c2:	3401      	adds	r4, #1
 800b2c4:	42a3      	cmp	r3, r4
 800b2c6:	f6ff aed9 	blt.w	800b07c <__gethex+0x1d6>
 800b2ca:	2701      	movs	r7, #1
 800b2cc:	e7c7      	b.n	800b25e <__gethex+0x3b8>
 800b2ce:	f016 061f 	ands.w	r6, r6, #31
 800b2d2:	d0fa      	beq.n	800b2ca <__gethex+0x424>
 800b2d4:	449a      	add	sl, r3
 800b2d6:	f1c6 0620 	rsb	r6, r6, #32
 800b2da:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b2de:	f000 f9b6 	bl	800b64e <__hi0bits>
 800b2e2:	42b0      	cmp	r0, r6
 800b2e4:	dbe7      	blt.n	800b2b6 <__gethex+0x410>
 800b2e6:	e7f0      	b.n	800b2ca <__gethex+0x424>

0800b2e8 <L_shift>:
 800b2e8:	f1c2 0208 	rsb	r2, r2, #8
 800b2ec:	0092      	lsls	r2, r2, #2
 800b2ee:	b570      	push	{r4, r5, r6, lr}
 800b2f0:	f1c2 0620 	rsb	r6, r2, #32
 800b2f4:	6843      	ldr	r3, [r0, #4]
 800b2f6:	6804      	ldr	r4, [r0, #0]
 800b2f8:	fa03 f506 	lsl.w	r5, r3, r6
 800b2fc:	432c      	orrs	r4, r5
 800b2fe:	40d3      	lsrs	r3, r2
 800b300:	6004      	str	r4, [r0, #0]
 800b302:	f840 3f04 	str.w	r3, [r0, #4]!
 800b306:	4288      	cmp	r0, r1
 800b308:	d3f4      	bcc.n	800b2f4 <L_shift+0xc>
 800b30a:	bd70      	pop	{r4, r5, r6, pc}

0800b30c <__match>:
 800b30c:	b530      	push	{r4, r5, lr}
 800b30e:	6803      	ldr	r3, [r0, #0]
 800b310:	3301      	adds	r3, #1
 800b312:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b316:	b914      	cbnz	r4, 800b31e <__match+0x12>
 800b318:	6003      	str	r3, [r0, #0]
 800b31a:	2001      	movs	r0, #1
 800b31c:	bd30      	pop	{r4, r5, pc}
 800b31e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b322:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b326:	2d19      	cmp	r5, #25
 800b328:	bf98      	it	ls
 800b32a:	3220      	addls	r2, #32
 800b32c:	42a2      	cmp	r2, r4
 800b32e:	d0f0      	beq.n	800b312 <__match+0x6>
 800b330:	2000      	movs	r0, #0
 800b332:	e7f3      	b.n	800b31c <__match+0x10>

0800b334 <__hexnan>:
 800b334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b338:	680b      	ldr	r3, [r1, #0]
 800b33a:	6801      	ldr	r1, [r0, #0]
 800b33c:	115f      	asrs	r7, r3, #5
 800b33e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b342:	f013 031f 	ands.w	r3, r3, #31
 800b346:	b087      	sub	sp, #28
 800b348:	bf18      	it	ne
 800b34a:	3704      	addne	r7, #4
 800b34c:	2500      	movs	r5, #0
 800b34e:	1f3e      	subs	r6, r7, #4
 800b350:	4682      	mov	sl, r0
 800b352:	4690      	mov	r8, r2
 800b354:	9301      	str	r3, [sp, #4]
 800b356:	f847 5c04 	str.w	r5, [r7, #-4]
 800b35a:	46b1      	mov	r9, r6
 800b35c:	4634      	mov	r4, r6
 800b35e:	9502      	str	r5, [sp, #8]
 800b360:	46ab      	mov	fp, r5
 800b362:	784a      	ldrb	r2, [r1, #1]
 800b364:	1c4b      	adds	r3, r1, #1
 800b366:	9303      	str	r3, [sp, #12]
 800b368:	b342      	cbz	r2, 800b3bc <__hexnan+0x88>
 800b36a:	4610      	mov	r0, r2
 800b36c:	9105      	str	r1, [sp, #20]
 800b36e:	9204      	str	r2, [sp, #16]
 800b370:	f7ff fd84 	bl	800ae7c <__hexdig_fun>
 800b374:	2800      	cmp	r0, #0
 800b376:	d143      	bne.n	800b400 <__hexnan+0xcc>
 800b378:	9a04      	ldr	r2, [sp, #16]
 800b37a:	9905      	ldr	r1, [sp, #20]
 800b37c:	2a20      	cmp	r2, #32
 800b37e:	d818      	bhi.n	800b3b2 <__hexnan+0x7e>
 800b380:	9b02      	ldr	r3, [sp, #8]
 800b382:	459b      	cmp	fp, r3
 800b384:	dd13      	ble.n	800b3ae <__hexnan+0x7a>
 800b386:	454c      	cmp	r4, r9
 800b388:	d206      	bcs.n	800b398 <__hexnan+0x64>
 800b38a:	2d07      	cmp	r5, #7
 800b38c:	dc04      	bgt.n	800b398 <__hexnan+0x64>
 800b38e:	462a      	mov	r2, r5
 800b390:	4649      	mov	r1, r9
 800b392:	4620      	mov	r0, r4
 800b394:	f7ff ffa8 	bl	800b2e8 <L_shift>
 800b398:	4544      	cmp	r4, r8
 800b39a:	d944      	bls.n	800b426 <__hexnan+0xf2>
 800b39c:	2300      	movs	r3, #0
 800b39e:	f1a4 0904 	sub.w	r9, r4, #4
 800b3a2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3a6:	f8cd b008 	str.w	fp, [sp, #8]
 800b3aa:	464c      	mov	r4, r9
 800b3ac:	461d      	mov	r5, r3
 800b3ae:	9903      	ldr	r1, [sp, #12]
 800b3b0:	e7d7      	b.n	800b362 <__hexnan+0x2e>
 800b3b2:	2a29      	cmp	r2, #41	; 0x29
 800b3b4:	d14a      	bne.n	800b44c <__hexnan+0x118>
 800b3b6:	3102      	adds	r1, #2
 800b3b8:	f8ca 1000 	str.w	r1, [sl]
 800b3bc:	f1bb 0f00 	cmp.w	fp, #0
 800b3c0:	d044      	beq.n	800b44c <__hexnan+0x118>
 800b3c2:	454c      	cmp	r4, r9
 800b3c4:	d206      	bcs.n	800b3d4 <__hexnan+0xa0>
 800b3c6:	2d07      	cmp	r5, #7
 800b3c8:	dc04      	bgt.n	800b3d4 <__hexnan+0xa0>
 800b3ca:	462a      	mov	r2, r5
 800b3cc:	4649      	mov	r1, r9
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f7ff ff8a 	bl	800b2e8 <L_shift>
 800b3d4:	4544      	cmp	r4, r8
 800b3d6:	d928      	bls.n	800b42a <__hexnan+0xf6>
 800b3d8:	4643      	mov	r3, r8
 800b3da:	f854 2b04 	ldr.w	r2, [r4], #4
 800b3de:	f843 2b04 	str.w	r2, [r3], #4
 800b3e2:	42a6      	cmp	r6, r4
 800b3e4:	d2f9      	bcs.n	800b3da <__hexnan+0xa6>
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f843 2b04 	str.w	r2, [r3], #4
 800b3ec:	429e      	cmp	r6, r3
 800b3ee:	d2fb      	bcs.n	800b3e8 <__hexnan+0xb4>
 800b3f0:	6833      	ldr	r3, [r6, #0]
 800b3f2:	b91b      	cbnz	r3, 800b3fc <__hexnan+0xc8>
 800b3f4:	4546      	cmp	r6, r8
 800b3f6:	d127      	bne.n	800b448 <__hexnan+0x114>
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	6033      	str	r3, [r6, #0]
 800b3fc:	2005      	movs	r0, #5
 800b3fe:	e026      	b.n	800b44e <__hexnan+0x11a>
 800b400:	3501      	adds	r5, #1
 800b402:	2d08      	cmp	r5, #8
 800b404:	f10b 0b01 	add.w	fp, fp, #1
 800b408:	dd06      	ble.n	800b418 <__hexnan+0xe4>
 800b40a:	4544      	cmp	r4, r8
 800b40c:	d9cf      	bls.n	800b3ae <__hexnan+0x7a>
 800b40e:	2300      	movs	r3, #0
 800b410:	f844 3c04 	str.w	r3, [r4, #-4]
 800b414:	2501      	movs	r5, #1
 800b416:	3c04      	subs	r4, #4
 800b418:	6822      	ldr	r2, [r4, #0]
 800b41a:	f000 000f 	and.w	r0, r0, #15
 800b41e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b422:	6020      	str	r0, [r4, #0]
 800b424:	e7c3      	b.n	800b3ae <__hexnan+0x7a>
 800b426:	2508      	movs	r5, #8
 800b428:	e7c1      	b.n	800b3ae <__hexnan+0x7a>
 800b42a:	9b01      	ldr	r3, [sp, #4]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d0df      	beq.n	800b3f0 <__hexnan+0xbc>
 800b430:	f04f 32ff 	mov.w	r2, #4294967295
 800b434:	f1c3 0320 	rsb	r3, r3, #32
 800b438:	fa22 f303 	lsr.w	r3, r2, r3
 800b43c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b440:	401a      	ands	r2, r3
 800b442:	f847 2c04 	str.w	r2, [r7, #-4]
 800b446:	e7d3      	b.n	800b3f0 <__hexnan+0xbc>
 800b448:	3e04      	subs	r6, #4
 800b44a:	e7d1      	b.n	800b3f0 <__hexnan+0xbc>
 800b44c:	2004      	movs	r0, #4
 800b44e:	b007      	add	sp, #28
 800b450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b454 <__locale_ctype_ptr_l>:
 800b454:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b458:	4770      	bx	lr

0800b45a <__localeconv_l>:
 800b45a:	30f0      	adds	r0, #240	; 0xf0
 800b45c:	4770      	bx	lr
	...

0800b460 <_localeconv_r>:
 800b460:	4b04      	ldr	r3, [pc, #16]	; (800b474 <_localeconv_r+0x14>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	6a18      	ldr	r0, [r3, #32]
 800b466:	4b04      	ldr	r3, [pc, #16]	; (800b478 <_localeconv_r+0x18>)
 800b468:	2800      	cmp	r0, #0
 800b46a:	bf08      	it	eq
 800b46c:	4618      	moveq	r0, r3
 800b46e:	30f0      	adds	r0, #240	; 0xf0
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	2000001c 	.word	0x2000001c
 800b478:	20000080 	.word	0x20000080

0800b47c <malloc>:
 800b47c:	4b02      	ldr	r3, [pc, #8]	; (800b488 <malloc+0xc>)
 800b47e:	4601      	mov	r1, r0
 800b480:	6818      	ldr	r0, [r3, #0]
 800b482:	f000 bc7b 	b.w	800bd7c <_malloc_r>
 800b486:	bf00      	nop
 800b488:	2000001c 	.word	0x2000001c

0800b48c <__ascii_mbtowc>:
 800b48c:	b082      	sub	sp, #8
 800b48e:	b901      	cbnz	r1, 800b492 <__ascii_mbtowc+0x6>
 800b490:	a901      	add	r1, sp, #4
 800b492:	b142      	cbz	r2, 800b4a6 <__ascii_mbtowc+0x1a>
 800b494:	b14b      	cbz	r3, 800b4aa <__ascii_mbtowc+0x1e>
 800b496:	7813      	ldrb	r3, [r2, #0]
 800b498:	600b      	str	r3, [r1, #0]
 800b49a:	7812      	ldrb	r2, [r2, #0]
 800b49c:	1c10      	adds	r0, r2, #0
 800b49e:	bf18      	it	ne
 800b4a0:	2001      	movne	r0, #1
 800b4a2:	b002      	add	sp, #8
 800b4a4:	4770      	bx	lr
 800b4a6:	4610      	mov	r0, r2
 800b4a8:	e7fb      	b.n	800b4a2 <__ascii_mbtowc+0x16>
 800b4aa:	f06f 0001 	mvn.w	r0, #1
 800b4ae:	e7f8      	b.n	800b4a2 <__ascii_mbtowc+0x16>

0800b4b0 <memcpy>:
 800b4b0:	b510      	push	{r4, lr}
 800b4b2:	1e43      	subs	r3, r0, #1
 800b4b4:	440a      	add	r2, r1
 800b4b6:	4291      	cmp	r1, r2
 800b4b8:	d100      	bne.n	800b4bc <memcpy+0xc>
 800b4ba:	bd10      	pop	{r4, pc}
 800b4bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4c4:	e7f7      	b.n	800b4b6 <memcpy+0x6>

0800b4c6 <_Balloc>:
 800b4c6:	b570      	push	{r4, r5, r6, lr}
 800b4c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	460e      	mov	r6, r1
 800b4ce:	b93d      	cbnz	r5, 800b4e0 <_Balloc+0x1a>
 800b4d0:	2010      	movs	r0, #16
 800b4d2:	f7ff ffd3 	bl	800b47c <malloc>
 800b4d6:	6260      	str	r0, [r4, #36]	; 0x24
 800b4d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b4dc:	6005      	str	r5, [r0, #0]
 800b4de:	60c5      	str	r5, [r0, #12]
 800b4e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b4e2:	68eb      	ldr	r3, [r5, #12]
 800b4e4:	b183      	cbz	r3, 800b508 <_Balloc+0x42>
 800b4e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b4ee:	b9b8      	cbnz	r0, 800b520 <_Balloc+0x5a>
 800b4f0:	2101      	movs	r1, #1
 800b4f2:	fa01 f506 	lsl.w	r5, r1, r6
 800b4f6:	1d6a      	adds	r2, r5, #5
 800b4f8:	0092      	lsls	r2, r2, #2
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f000 fbe1 	bl	800bcc2 <_calloc_r>
 800b500:	b160      	cbz	r0, 800b51c <_Balloc+0x56>
 800b502:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b506:	e00e      	b.n	800b526 <_Balloc+0x60>
 800b508:	2221      	movs	r2, #33	; 0x21
 800b50a:	2104      	movs	r1, #4
 800b50c:	4620      	mov	r0, r4
 800b50e:	f000 fbd8 	bl	800bcc2 <_calloc_r>
 800b512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b514:	60e8      	str	r0, [r5, #12]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1e4      	bne.n	800b4e6 <_Balloc+0x20>
 800b51c:	2000      	movs	r0, #0
 800b51e:	bd70      	pop	{r4, r5, r6, pc}
 800b520:	6802      	ldr	r2, [r0, #0]
 800b522:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b526:	2300      	movs	r3, #0
 800b528:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b52c:	e7f7      	b.n	800b51e <_Balloc+0x58>

0800b52e <_Bfree>:
 800b52e:	b570      	push	{r4, r5, r6, lr}
 800b530:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b532:	4606      	mov	r6, r0
 800b534:	460d      	mov	r5, r1
 800b536:	b93c      	cbnz	r4, 800b548 <_Bfree+0x1a>
 800b538:	2010      	movs	r0, #16
 800b53a:	f7ff ff9f 	bl	800b47c <malloc>
 800b53e:	6270      	str	r0, [r6, #36]	; 0x24
 800b540:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b544:	6004      	str	r4, [r0, #0]
 800b546:	60c4      	str	r4, [r0, #12]
 800b548:	b13d      	cbz	r5, 800b55a <_Bfree+0x2c>
 800b54a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b54c:	686a      	ldr	r2, [r5, #4]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b554:	6029      	str	r1, [r5, #0]
 800b556:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b55a:	bd70      	pop	{r4, r5, r6, pc}

0800b55c <__multadd>:
 800b55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b560:	690d      	ldr	r5, [r1, #16]
 800b562:	461f      	mov	r7, r3
 800b564:	4606      	mov	r6, r0
 800b566:	460c      	mov	r4, r1
 800b568:	f101 0c14 	add.w	ip, r1, #20
 800b56c:	2300      	movs	r3, #0
 800b56e:	f8dc 0000 	ldr.w	r0, [ip]
 800b572:	b281      	uxth	r1, r0
 800b574:	fb02 7101 	mla	r1, r2, r1, r7
 800b578:	0c0f      	lsrs	r7, r1, #16
 800b57a:	0c00      	lsrs	r0, r0, #16
 800b57c:	fb02 7000 	mla	r0, r2, r0, r7
 800b580:	b289      	uxth	r1, r1
 800b582:	3301      	adds	r3, #1
 800b584:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b588:	429d      	cmp	r5, r3
 800b58a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b58e:	f84c 1b04 	str.w	r1, [ip], #4
 800b592:	dcec      	bgt.n	800b56e <__multadd+0x12>
 800b594:	b1d7      	cbz	r7, 800b5cc <__multadd+0x70>
 800b596:	68a3      	ldr	r3, [r4, #8]
 800b598:	42ab      	cmp	r3, r5
 800b59a:	dc12      	bgt.n	800b5c2 <__multadd+0x66>
 800b59c:	6861      	ldr	r1, [r4, #4]
 800b59e:	4630      	mov	r0, r6
 800b5a0:	3101      	adds	r1, #1
 800b5a2:	f7ff ff90 	bl	800b4c6 <_Balloc>
 800b5a6:	6922      	ldr	r2, [r4, #16]
 800b5a8:	3202      	adds	r2, #2
 800b5aa:	f104 010c 	add.w	r1, r4, #12
 800b5ae:	4680      	mov	r8, r0
 800b5b0:	0092      	lsls	r2, r2, #2
 800b5b2:	300c      	adds	r0, #12
 800b5b4:	f7ff ff7c 	bl	800b4b0 <memcpy>
 800b5b8:	4621      	mov	r1, r4
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	f7ff ffb7 	bl	800b52e <_Bfree>
 800b5c0:	4644      	mov	r4, r8
 800b5c2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b5c6:	3501      	adds	r5, #1
 800b5c8:	615f      	str	r7, [r3, #20]
 800b5ca:	6125      	str	r5, [r4, #16]
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b5d2 <__s2b>:
 800b5d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5d6:	460c      	mov	r4, r1
 800b5d8:	4615      	mov	r5, r2
 800b5da:	461f      	mov	r7, r3
 800b5dc:	2209      	movs	r2, #9
 800b5de:	3308      	adds	r3, #8
 800b5e0:	4606      	mov	r6, r0
 800b5e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5e6:	2100      	movs	r1, #0
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	db20      	blt.n	800b630 <__s2b+0x5e>
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	f7ff ff69 	bl	800b4c6 <_Balloc>
 800b5f4:	9b08      	ldr	r3, [sp, #32]
 800b5f6:	6143      	str	r3, [r0, #20]
 800b5f8:	2d09      	cmp	r5, #9
 800b5fa:	f04f 0301 	mov.w	r3, #1
 800b5fe:	6103      	str	r3, [r0, #16]
 800b600:	dd19      	ble.n	800b636 <__s2b+0x64>
 800b602:	f104 0809 	add.w	r8, r4, #9
 800b606:	46c1      	mov	r9, r8
 800b608:	442c      	add	r4, r5
 800b60a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b60e:	4601      	mov	r1, r0
 800b610:	3b30      	subs	r3, #48	; 0x30
 800b612:	220a      	movs	r2, #10
 800b614:	4630      	mov	r0, r6
 800b616:	f7ff ffa1 	bl	800b55c <__multadd>
 800b61a:	45a1      	cmp	r9, r4
 800b61c:	d1f5      	bne.n	800b60a <__s2b+0x38>
 800b61e:	eb08 0405 	add.w	r4, r8, r5
 800b622:	3c08      	subs	r4, #8
 800b624:	1b2d      	subs	r5, r5, r4
 800b626:	1963      	adds	r3, r4, r5
 800b628:	42bb      	cmp	r3, r7
 800b62a:	db07      	blt.n	800b63c <__s2b+0x6a>
 800b62c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b630:	0052      	lsls	r2, r2, #1
 800b632:	3101      	adds	r1, #1
 800b634:	e7d9      	b.n	800b5ea <__s2b+0x18>
 800b636:	340a      	adds	r4, #10
 800b638:	2509      	movs	r5, #9
 800b63a:	e7f3      	b.n	800b624 <__s2b+0x52>
 800b63c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b640:	4601      	mov	r1, r0
 800b642:	3b30      	subs	r3, #48	; 0x30
 800b644:	220a      	movs	r2, #10
 800b646:	4630      	mov	r0, r6
 800b648:	f7ff ff88 	bl	800b55c <__multadd>
 800b64c:	e7eb      	b.n	800b626 <__s2b+0x54>

0800b64e <__hi0bits>:
 800b64e:	0c02      	lsrs	r2, r0, #16
 800b650:	0412      	lsls	r2, r2, #16
 800b652:	4603      	mov	r3, r0
 800b654:	b9b2      	cbnz	r2, 800b684 <__hi0bits+0x36>
 800b656:	0403      	lsls	r3, r0, #16
 800b658:	2010      	movs	r0, #16
 800b65a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b65e:	bf04      	itt	eq
 800b660:	021b      	lsleq	r3, r3, #8
 800b662:	3008      	addeq	r0, #8
 800b664:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b668:	bf04      	itt	eq
 800b66a:	011b      	lsleq	r3, r3, #4
 800b66c:	3004      	addeq	r0, #4
 800b66e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b672:	bf04      	itt	eq
 800b674:	009b      	lsleq	r3, r3, #2
 800b676:	3002      	addeq	r0, #2
 800b678:	2b00      	cmp	r3, #0
 800b67a:	db06      	blt.n	800b68a <__hi0bits+0x3c>
 800b67c:	005b      	lsls	r3, r3, #1
 800b67e:	d503      	bpl.n	800b688 <__hi0bits+0x3a>
 800b680:	3001      	adds	r0, #1
 800b682:	4770      	bx	lr
 800b684:	2000      	movs	r0, #0
 800b686:	e7e8      	b.n	800b65a <__hi0bits+0xc>
 800b688:	2020      	movs	r0, #32
 800b68a:	4770      	bx	lr

0800b68c <__lo0bits>:
 800b68c:	6803      	ldr	r3, [r0, #0]
 800b68e:	f013 0207 	ands.w	r2, r3, #7
 800b692:	4601      	mov	r1, r0
 800b694:	d00b      	beq.n	800b6ae <__lo0bits+0x22>
 800b696:	07da      	lsls	r2, r3, #31
 800b698:	d423      	bmi.n	800b6e2 <__lo0bits+0x56>
 800b69a:	0798      	lsls	r0, r3, #30
 800b69c:	bf49      	itett	mi
 800b69e:	085b      	lsrmi	r3, r3, #1
 800b6a0:	089b      	lsrpl	r3, r3, #2
 800b6a2:	2001      	movmi	r0, #1
 800b6a4:	600b      	strmi	r3, [r1, #0]
 800b6a6:	bf5c      	itt	pl
 800b6a8:	600b      	strpl	r3, [r1, #0]
 800b6aa:	2002      	movpl	r0, #2
 800b6ac:	4770      	bx	lr
 800b6ae:	b298      	uxth	r0, r3
 800b6b0:	b9a8      	cbnz	r0, 800b6de <__lo0bits+0x52>
 800b6b2:	0c1b      	lsrs	r3, r3, #16
 800b6b4:	2010      	movs	r0, #16
 800b6b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b6ba:	bf04      	itt	eq
 800b6bc:	0a1b      	lsreq	r3, r3, #8
 800b6be:	3008      	addeq	r0, #8
 800b6c0:	071a      	lsls	r2, r3, #28
 800b6c2:	bf04      	itt	eq
 800b6c4:	091b      	lsreq	r3, r3, #4
 800b6c6:	3004      	addeq	r0, #4
 800b6c8:	079a      	lsls	r2, r3, #30
 800b6ca:	bf04      	itt	eq
 800b6cc:	089b      	lsreq	r3, r3, #2
 800b6ce:	3002      	addeq	r0, #2
 800b6d0:	07da      	lsls	r2, r3, #31
 800b6d2:	d402      	bmi.n	800b6da <__lo0bits+0x4e>
 800b6d4:	085b      	lsrs	r3, r3, #1
 800b6d6:	d006      	beq.n	800b6e6 <__lo0bits+0x5a>
 800b6d8:	3001      	adds	r0, #1
 800b6da:	600b      	str	r3, [r1, #0]
 800b6dc:	4770      	bx	lr
 800b6de:	4610      	mov	r0, r2
 800b6e0:	e7e9      	b.n	800b6b6 <__lo0bits+0x2a>
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	4770      	bx	lr
 800b6e6:	2020      	movs	r0, #32
 800b6e8:	4770      	bx	lr

0800b6ea <__i2b>:
 800b6ea:	b510      	push	{r4, lr}
 800b6ec:	460c      	mov	r4, r1
 800b6ee:	2101      	movs	r1, #1
 800b6f0:	f7ff fee9 	bl	800b4c6 <_Balloc>
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	6144      	str	r4, [r0, #20]
 800b6f8:	6102      	str	r2, [r0, #16]
 800b6fa:	bd10      	pop	{r4, pc}

0800b6fc <__multiply>:
 800b6fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b700:	4614      	mov	r4, r2
 800b702:	690a      	ldr	r2, [r1, #16]
 800b704:	6923      	ldr	r3, [r4, #16]
 800b706:	429a      	cmp	r2, r3
 800b708:	bfb8      	it	lt
 800b70a:	460b      	movlt	r3, r1
 800b70c:	4688      	mov	r8, r1
 800b70e:	bfbc      	itt	lt
 800b710:	46a0      	movlt	r8, r4
 800b712:	461c      	movlt	r4, r3
 800b714:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b718:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b71c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b720:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b724:	eb07 0609 	add.w	r6, r7, r9
 800b728:	42b3      	cmp	r3, r6
 800b72a:	bfb8      	it	lt
 800b72c:	3101      	addlt	r1, #1
 800b72e:	f7ff feca 	bl	800b4c6 <_Balloc>
 800b732:	f100 0514 	add.w	r5, r0, #20
 800b736:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b73a:	462b      	mov	r3, r5
 800b73c:	2200      	movs	r2, #0
 800b73e:	4573      	cmp	r3, lr
 800b740:	d316      	bcc.n	800b770 <__multiply+0x74>
 800b742:	f104 0214 	add.w	r2, r4, #20
 800b746:	f108 0114 	add.w	r1, r8, #20
 800b74a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b74e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	9b00      	ldr	r3, [sp, #0]
 800b756:	9201      	str	r2, [sp, #4]
 800b758:	4293      	cmp	r3, r2
 800b75a:	d80c      	bhi.n	800b776 <__multiply+0x7a>
 800b75c:	2e00      	cmp	r6, #0
 800b75e:	dd03      	ble.n	800b768 <__multiply+0x6c>
 800b760:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b764:	2b00      	cmp	r3, #0
 800b766:	d05d      	beq.n	800b824 <__multiply+0x128>
 800b768:	6106      	str	r6, [r0, #16]
 800b76a:	b003      	add	sp, #12
 800b76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b770:	f843 2b04 	str.w	r2, [r3], #4
 800b774:	e7e3      	b.n	800b73e <__multiply+0x42>
 800b776:	f8b2 b000 	ldrh.w	fp, [r2]
 800b77a:	f1bb 0f00 	cmp.w	fp, #0
 800b77e:	d023      	beq.n	800b7c8 <__multiply+0xcc>
 800b780:	4689      	mov	r9, r1
 800b782:	46ac      	mov	ip, r5
 800b784:	f04f 0800 	mov.w	r8, #0
 800b788:	f859 4b04 	ldr.w	r4, [r9], #4
 800b78c:	f8dc a000 	ldr.w	sl, [ip]
 800b790:	b2a3      	uxth	r3, r4
 800b792:	fa1f fa8a 	uxth.w	sl, sl
 800b796:	fb0b a303 	mla	r3, fp, r3, sl
 800b79a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b79e:	f8dc 4000 	ldr.w	r4, [ip]
 800b7a2:	4443      	add	r3, r8
 800b7a4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b7a8:	fb0b 840a 	mla	r4, fp, sl, r8
 800b7ac:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b7b0:	46e2      	mov	sl, ip
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b7b8:	454f      	cmp	r7, r9
 800b7ba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b7be:	f84a 3b04 	str.w	r3, [sl], #4
 800b7c2:	d82b      	bhi.n	800b81c <__multiply+0x120>
 800b7c4:	f8cc 8004 	str.w	r8, [ip, #4]
 800b7c8:	9b01      	ldr	r3, [sp, #4]
 800b7ca:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b7ce:	3204      	adds	r2, #4
 800b7d0:	f1ba 0f00 	cmp.w	sl, #0
 800b7d4:	d020      	beq.n	800b818 <__multiply+0x11c>
 800b7d6:	682b      	ldr	r3, [r5, #0]
 800b7d8:	4689      	mov	r9, r1
 800b7da:	46a8      	mov	r8, r5
 800b7dc:	f04f 0b00 	mov.w	fp, #0
 800b7e0:	f8b9 c000 	ldrh.w	ip, [r9]
 800b7e4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b7e8:	fb0a 440c 	mla	r4, sl, ip, r4
 800b7ec:	445c      	add	r4, fp
 800b7ee:	46c4      	mov	ip, r8
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b7f6:	f84c 3b04 	str.w	r3, [ip], #4
 800b7fa:	f859 3b04 	ldr.w	r3, [r9], #4
 800b7fe:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b802:	0c1b      	lsrs	r3, r3, #16
 800b804:	fb0a b303 	mla	r3, sl, r3, fp
 800b808:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b80c:	454f      	cmp	r7, r9
 800b80e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b812:	d805      	bhi.n	800b820 <__multiply+0x124>
 800b814:	f8c8 3004 	str.w	r3, [r8, #4]
 800b818:	3504      	adds	r5, #4
 800b81a:	e79b      	b.n	800b754 <__multiply+0x58>
 800b81c:	46d4      	mov	ip, sl
 800b81e:	e7b3      	b.n	800b788 <__multiply+0x8c>
 800b820:	46e0      	mov	r8, ip
 800b822:	e7dd      	b.n	800b7e0 <__multiply+0xe4>
 800b824:	3e01      	subs	r6, #1
 800b826:	e799      	b.n	800b75c <__multiply+0x60>

0800b828 <__pow5mult>:
 800b828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b82c:	4615      	mov	r5, r2
 800b82e:	f012 0203 	ands.w	r2, r2, #3
 800b832:	4606      	mov	r6, r0
 800b834:	460f      	mov	r7, r1
 800b836:	d007      	beq.n	800b848 <__pow5mult+0x20>
 800b838:	3a01      	subs	r2, #1
 800b83a:	4c21      	ldr	r4, [pc, #132]	; (800b8c0 <__pow5mult+0x98>)
 800b83c:	2300      	movs	r3, #0
 800b83e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b842:	f7ff fe8b 	bl	800b55c <__multadd>
 800b846:	4607      	mov	r7, r0
 800b848:	10ad      	asrs	r5, r5, #2
 800b84a:	d035      	beq.n	800b8b8 <__pow5mult+0x90>
 800b84c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b84e:	b93c      	cbnz	r4, 800b860 <__pow5mult+0x38>
 800b850:	2010      	movs	r0, #16
 800b852:	f7ff fe13 	bl	800b47c <malloc>
 800b856:	6270      	str	r0, [r6, #36]	; 0x24
 800b858:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b85c:	6004      	str	r4, [r0, #0]
 800b85e:	60c4      	str	r4, [r0, #12]
 800b860:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b864:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b868:	b94c      	cbnz	r4, 800b87e <__pow5mult+0x56>
 800b86a:	f240 2171 	movw	r1, #625	; 0x271
 800b86e:	4630      	mov	r0, r6
 800b870:	f7ff ff3b 	bl	800b6ea <__i2b>
 800b874:	2300      	movs	r3, #0
 800b876:	f8c8 0008 	str.w	r0, [r8, #8]
 800b87a:	4604      	mov	r4, r0
 800b87c:	6003      	str	r3, [r0, #0]
 800b87e:	f04f 0800 	mov.w	r8, #0
 800b882:	07eb      	lsls	r3, r5, #31
 800b884:	d50a      	bpl.n	800b89c <__pow5mult+0x74>
 800b886:	4639      	mov	r1, r7
 800b888:	4622      	mov	r2, r4
 800b88a:	4630      	mov	r0, r6
 800b88c:	f7ff ff36 	bl	800b6fc <__multiply>
 800b890:	4639      	mov	r1, r7
 800b892:	4681      	mov	r9, r0
 800b894:	4630      	mov	r0, r6
 800b896:	f7ff fe4a 	bl	800b52e <_Bfree>
 800b89a:	464f      	mov	r7, r9
 800b89c:	106d      	asrs	r5, r5, #1
 800b89e:	d00b      	beq.n	800b8b8 <__pow5mult+0x90>
 800b8a0:	6820      	ldr	r0, [r4, #0]
 800b8a2:	b938      	cbnz	r0, 800b8b4 <__pow5mult+0x8c>
 800b8a4:	4622      	mov	r2, r4
 800b8a6:	4621      	mov	r1, r4
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	f7ff ff27 	bl	800b6fc <__multiply>
 800b8ae:	6020      	str	r0, [r4, #0]
 800b8b0:	f8c0 8000 	str.w	r8, [r0]
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	e7e4      	b.n	800b882 <__pow5mult+0x5a>
 800b8b8:	4638      	mov	r0, r7
 800b8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8be:	bf00      	nop
 800b8c0:	0800c3a0 	.word	0x0800c3a0

0800b8c4 <__lshift>:
 800b8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8c8:	460c      	mov	r4, r1
 800b8ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8ce:	6923      	ldr	r3, [r4, #16]
 800b8d0:	6849      	ldr	r1, [r1, #4]
 800b8d2:	eb0a 0903 	add.w	r9, sl, r3
 800b8d6:	68a3      	ldr	r3, [r4, #8]
 800b8d8:	4607      	mov	r7, r0
 800b8da:	4616      	mov	r6, r2
 800b8dc:	f109 0501 	add.w	r5, r9, #1
 800b8e0:	42ab      	cmp	r3, r5
 800b8e2:	db32      	blt.n	800b94a <__lshift+0x86>
 800b8e4:	4638      	mov	r0, r7
 800b8e6:	f7ff fdee 	bl	800b4c6 <_Balloc>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	4680      	mov	r8, r0
 800b8ee:	f100 0114 	add.w	r1, r0, #20
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	4553      	cmp	r3, sl
 800b8f6:	db2b      	blt.n	800b950 <__lshift+0x8c>
 800b8f8:	6920      	ldr	r0, [r4, #16]
 800b8fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8fe:	f104 0314 	add.w	r3, r4, #20
 800b902:	f016 021f 	ands.w	r2, r6, #31
 800b906:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b90a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b90e:	d025      	beq.n	800b95c <__lshift+0x98>
 800b910:	f1c2 0e20 	rsb	lr, r2, #32
 800b914:	2000      	movs	r0, #0
 800b916:	681e      	ldr	r6, [r3, #0]
 800b918:	468a      	mov	sl, r1
 800b91a:	4096      	lsls	r6, r2
 800b91c:	4330      	orrs	r0, r6
 800b91e:	f84a 0b04 	str.w	r0, [sl], #4
 800b922:	f853 0b04 	ldr.w	r0, [r3], #4
 800b926:	459c      	cmp	ip, r3
 800b928:	fa20 f00e 	lsr.w	r0, r0, lr
 800b92c:	d814      	bhi.n	800b958 <__lshift+0x94>
 800b92e:	6048      	str	r0, [r1, #4]
 800b930:	b108      	cbz	r0, 800b936 <__lshift+0x72>
 800b932:	f109 0502 	add.w	r5, r9, #2
 800b936:	3d01      	subs	r5, #1
 800b938:	4638      	mov	r0, r7
 800b93a:	f8c8 5010 	str.w	r5, [r8, #16]
 800b93e:	4621      	mov	r1, r4
 800b940:	f7ff fdf5 	bl	800b52e <_Bfree>
 800b944:	4640      	mov	r0, r8
 800b946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b94a:	3101      	adds	r1, #1
 800b94c:	005b      	lsls	r3, r3, #1
 800b94e:	e7c7      	b.n	800b8e0 <__lshift+0x1c>
 800b950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b954:	3301      	adds	r3, #1
 800b956:	e7cd      	b.n	800b8f4 <__lshift+0x30>
 800b958:	4651      	mov	r1, sl
 800b95a:	e7dc      	b.n	800b916 <__lshift+0x52>
 800b95c:	3904      	subs	r1, #4
 800b95e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b962:	f841 2f04 	str.w	r2, [r1, #4]!
 800b966:	459c      	cmp	ip, r3
 800b968:	d8f9      	bhi.n	800b95e <__lshift+0x9a>
 800b96a:	e7e4      	b.n	800b936 <__lshift+0x72>

0800b96c <__mcmp>:
 800b96c:	6903      	ldr	r3, [r0, #16]
 800b96e:	690a      	ldr	r2, [r1, #16]
 800b970:	1a9b      	subs	r3, r3, r2
 800b972:	b530      	push	{r4, r5, lr}
 800b974:	d10c      	bne.n	800b990 <__mcmp+0x24>
 800b976:	0092      	lsls	r2, r2, #2
 800b978:	3014      	adds	r0, #20
 800b97a:	3114      	adds	r1, #20
 800b97c:	1884      	adds	r4, r0, r2
 800b97e:	4411      	add	r1, r2
 800b980:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b984:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b988:	4295      	cmp	r5, r2
 800b98a:	d003      	beq.n	800b994 <__mcmp+0x28>
 800b98c:	d305      	bcc.n	800b99a <__mcmp+0x2e>
 800b98e:	2301      	movs	r3, #1
 800b990:	4618      	mov	r0, r3
 800b992:	bd30      	pop	{r4, r5, pc}
 800b994:	42a0      	cmp	r0, r4
 800b996:	d3f3      	bcc.n	800b980 <__mcmp+0x14>
 800b998:	e7fa      	b.n	800b990 <__mcmp+0x24>
 800b99a:	f04f 33ff 	mov.w	r3, #4294967295
 800b99e:	e7f7      	b.n	800b990 <__mcmp+0x24>

0800b9a0 <__mdiff>:
 800b9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9a4:	460d      	mov	r5, r1
 800b9a6:	4607      	mov	r7, r0
 800b9a8:	4611      	mov	r1, r2
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	4614      	mov	r4, r2
 800b9ae:	f7ff ffdd 	bl	800b96c <__mcmp>
 800b9b2:	1e06      	subs	r6, r0, #0
 800b9b4:	d108      	bne.n	800b9c8 <__mdiff+0x28>
 800b9b6:	4631      	mov	r1, r6
 800b9b8:	4638      	mov	r0, r7
 800b9ba:	f7ff fd84 	bl	800b4c6 <_Balloc>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c8:	bfa4      	itt	ge
 800b9ca:	4623      	movge	r3, r4
 800b9cc:	462c      	movge	r4, r5
 800b9ce:	4638      	mov	r0, r7
 800b9d0:	6861      	ldr	r1, [r4, #4]
 800b9d2:	bfa6      	itte	ge
 800b9d4:	461d      	movge	r5, r3
 800b9d6:	2600      	movge	r6, #0
 800b9d8:	2601      	movlt	r6, #1
 800b9da:	f7ff fd74 	bl	800b4c6 <_Balloc>
 800b9de:	692b      	ldr	r3, [r5, #16]
 800b9e0:	60c6      	str	r6, [r0, #12]
 800b9e2:	6926      	ldr	r6, [r4, #16]
 800b9e4:	f105 0914 	add.w	r9, r5, #20
 800b9e8:	f104 0214 	add.w	r2, r4, #20
 800b9ec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b9f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b9f4:	f100 0514 	add.w	r5, r0, #20
 800b9f8:	f04f 0e00 	mov.w	lr, #0
 800b9fc:	f852 ab04 	ldr.w	sl, [r2], #4
 800ba00:	f859 4b04 	ldr.w	r4, [r9], #4
 800ba04:	fa1e f18a 	uxtah	r1, lr, sl
 800ba08:	b2a3      	uxth	r3, r4
 800ba0a:	1ac9      	subs	r1, r1, r3
 800ba0c:	0c23      	lsrs	r3, r4, #16
 800ba0e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ba12:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ba16:	b289      	uxth	r1, r1
 800ba18:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ba1c:	45c8      	cmp	r8, r9
 800ba1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ba22:	4694      	mov	ip, r2
 800ba24:	f845 3b04 	str.w	r3, [r5], #4
 800ba28:	d8e8      	bhi.n	800b9fc <__mdiff+0x5c>
 800ba2a:	45bc      	cmp	ip, r7
 800ba2c:	d304      	bcc.n	800ba38 <__mdiff+0x98>
 800ba2e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ba32:	b183      	cbz	r3, 800ba56 <__mdiff+0xb6>
 800ba34:	6106      	str	r6, [r0, #16]
 800ba36:	e7c5      	b.n	800b9c4 <__mdiff+0x24>
 800ba38:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ba3c:	fa1e f381 	uxtah	r3, lr, r1
 800ba40:	141a      	asrs	r2, r3, #16
 800ba42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba4c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ba50:	f845 3b04 	str.w	r3, [r5], #4
 800ba54:	e7e9      	b.n	800ba2a <__mdiff+0x8a>
 800ba56:	3e01      	subs	r6, #1
 800ba58:	e7e9      	b.n	800ba2e <__mdiff+0x8e>
	...

0800ba5c <__ulp>:
 800ba5c:	4b12      	ldr	r3, [pc, #72]	; (800baa8 <__ulp+0x4c>)
 800ba5e:	ee10 2a90 	vmov	r2, s1
 800ba62:	401a      	ands	r2, r3
 800ba64:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	dd04      	ble.n	800ba76 <__ulp+0x1a>
 800ba6c:	2000      	movs	r0, #0
 800ba6e:	4619      	mov	r1, r3
 800ba70:	ec41 0b10 	vmov	d0, r0, r1
 800ba74:	4770      	bx	lr
 800ba76:	425b      	negs	r3, r3
 800ba78:	151b      	asrs	r3, r3, #20
 800ba7a:	2b13      	cmp	r3, #19
 800ba7c:	f04f 0000 	mov.w	r0, #0
 800ba80:	f04f 0100 	mov.w	r1, #0
 800ba84:	dc04      	bgt.n	800ba90 <__ulp+0x34>
 800ba86:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ba8a:	fa42 f103 	asr.w	r1, r2, r3
 800ba8e:	e7ef      	b.n	800ba70 <__ulp+0x14>
 800ba90:	3b14      	subs	r3, #20
 800ba92:	2b1e      	cmp	r3, #30
 800ba94:	f04f 0201 	mov.w	r2, #1
 800ba98:	bfda      	itte	le
 800ba9a:	f1c3 031f 	rsble	r3, r3, #31
 800ba9e:	fa02 f303 	lslle.w	r3, r2, r3
 800baa2:	4613      	movgt	r3, r2
 800baa4:	4618      	mov	r0, r3
 800baa6:	e7e3      	b.n	800ba70 <__ulp+0x14>
 800baa8:	7ff00000 	.word	0x7ff00000

0800baac <__b2d>:
 800baac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baae:	6905      	ldr	r5, [r0, #16]
 800bab0:	f100 0714 	add.w	r7, r0, #20
 800bab4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bab8:	1f2e      	subs	r6, r5, #4
 800baba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800babe:	4620      	mov	r0, r4
 800bac0:	f7ff fdc5 	bl	800b64e <__hi0bits>
 800bac4:	f1c0 0320 	rsb	r3, r0, #32
 800bac8:	280a      	cmp	r0, #10
 800baca:	600b      	str	r3, [r1, #0]
 800bacc:	f8df c074 	ldr.w	ip, [pc, #116]	; 800bb44 <__b2d+0x98>
 800bad0:	dc14      	bgt.n	800bafc <__b2d+0x50>
 800bad2:	f1c0 0e0b 	rsb	lr, r0, #11
 800bad6:	fa24 f10e 	lsr.w	r1, r4, lr
 800bada:	42b7      	cmp	r7, r6
 800badc:	ea41 030c 	orr.w	r3, r1, ip
 800bae0:	bf34      	ite	cc
 800bae2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bae6:	2100      	movcs	r1, #0
 800bae8:	3015      	adds	r0, #21
 800baea:	fa04 f000 	lsl.w	r0, r4, r0
 800baee:	fa21 f10e 	lsr.w	r1, r1, lr
 800baf2:	ea40 0201 	orr.w	r2, r0, r1
 800baf6:	ec43 2b10 	vmov	d0, r2, r3
 800bafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bafc:	42b7      	cmp	r7, r6
 800bafe:	bf3a      	itte	cc
 800bb00:	f1a5 0608 	subcc.w	r6, r5, #8
 800bb04:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bb08:	2100      	movcs	r1, #0
 800bb0a:	380b      	subs	r0, #11
 800bb0c:	d015      	beq.n	800bb3a <__b2d+0x8e>
 800bb0e:	4084      	lsls	r4, r0
 800bb10:	f1c0 0520 	rsb	r5, r0, #32
 800bb14:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800bb18:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800bb1c:	42be      	cmp	r6, r7
 800bb1e:	fa21 fc05 	lsr.w	ip, r1, r5
 800bb22:	ea44 030c 	orr.w	r3, r4, ip
 800bb26:	bf8c      	ite	hi
 800bb28:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bb2c:	2400      	movls	r4, #0
 800bb2e:	fa01 f000 	lsl.w	r0, r1, r0
 800bb32:	40ec      	lsrs	r4, r5
 800bb34:	ea40 0204 	orr.w	r2, r0, r4
 800bb38:	e7dd      	b.n	800baf6 <__b2d+0x4a>
 800bb3a:	ea44 030c 	orr.w	r3, r4, ip
 800bb3e:	460a      	mov	r2, r1
 800bb40:	e7d9      	b.n	800baf6 <__b2d+0x4a>
 800bb42:	bf00      	nop
 800bb44:	3ff00000 	.word	0x3ff00000

0800bb48 <__d2b>:
 800bb48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb4c:	460e      	mov	r6, r1
 800bb4e:	2101      	movs	r1, #1
 800bb50:	ec59 8b10 	vmov	r8, r9, d0
 800bb54:	4615      	mov	r5, r2
 800bb56:	f7ff fcb6 	bl	800b4c6 <_Balloc>
 800bb5a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bb5e:	4607      	mov	r7, r0
 800bb60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb64:	bb34      	cbnz	r4, 800bbb4 <__d2b+0x6c>
 800bb66:	9301      	str	r3, [sp, #4]
 800bb68:	f1b8 0300 	subs.w	r3, r8, #0
 800bb6c:	d027      	beq.n	800bbbe <__d2b+0x76>
 800bb6e:	a802      	add	r0, sp, #8
 800bb70:	f840 3d08 	str.w	r3, [r0, #-8]!
 800bb74:	f7ff fd8a 	bl	800b68c <__lo0bits>
 800bb78:	9900      	ldr	r1, [sp, #0]
 800bb7a:	b1f0      	cbz	r0, 800bbba <__d2b+0x72>
 800bb7c:	9a01      	ldr	r2, [sp, #4]
 800bb7e:	f1c0 0320 	rsb	r3, r0, #32
 800bb82:	fa02 f303 	lsl.w	r3, r2, r3
 800bb86:	430b      	orrs	r3, r1
 800bb88:	40c2      	lsrs	r2, r0
 800bb8a:	617b      	str	r3, [r7, #20]
 800bb8c:	9201      	str	r2, [sp, #4]
 800bb8e:	9b01      	ldr	r3, [sp, #4]
 800bb90:	61bb      	str	r3, [r7, #24]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	bf14      	ite	ne
 800bb96:	2102      	movne	r1, #2
 800bb98:	2101      	moveq	r1, #1
 800bb9a:	6139      	str	r1, [r7, #16]
 800bb9c:	b1c4      	cbz	r4, 800bbd0 <__d2b+0x88>
 800bb9e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bba2:	4404      	add	r4, r0
 800bba4:	6034      	str	r4, [r6, #0]
 800bba6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bbaa:	6028      	str	r0, [r5, #0]
 800bbac:	4638      	mov	r0, r7
 800bbae:	b003      	add	sp, #12
 800bbb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbb8:	e7d5      	b.n	800bb66 <__d2b+0x1e>
 800bbba:	6179      	str	r1, [r7, #20]
 800bbbc:	e7e7      	b.n	800bb8e <__d2b+0x46>
 800bbbe:	a801      	add	r0, sp, #4
 800bbc0:	f7ff fd64 	bl	800b68c <__lo0bits>
 800bbc4:	9b01      	ldr	r3, [sp, #4]
 800bbc6:	617b      	str	r3, [r7, #20]
 800bbc8:	2101      	movs	r1, #1
 800bbca:	6139      	str	r1, [r7, #16]
 800bbcc:	3020      	adds	r0, #32
 800bbce:	e7e5      	b.n	800bb9c <__d2b+0x54>
 800bbd0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bbd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bbd8:	6030      	str	r0, [r6, #0]
 800bbda:	6918      	ldr	r0, [r3, #16]
 800bbdc:	f7ff fd37 	bl	800b64e <__hi0bits>
 800bbe0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bbe4:	e7e1      	b.n	800bbaa <__d2b+0x62>

0800bbe6 <__ratio>:
 800bbe6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbea:	4688      	mov	r8, r1
 800bbec:	4669      	mov	r1, sp
 800bbee:	4681      	mov	r9, r0
 800bbf0:	f7ff ff5c 	bl	800baac <__b2d>
 800bbf4:	a901      	add	r1, sp, #4
 800bbf6:	4640      	mov	r0, r8
 800bbf8:	ec57 6b10 	vmov	r6, r7, d0
 800bbfc:	f7ff ff56 	bl	800baac <__b2d>
 800bc00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc04:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bc08:	eba3 0c02 	sub.w	ip, r3, r2
 800bc0c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bc10:	1a9b      	subs	r3, r3, r2
 800bc12:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bc16:	ec5b ab10 	vmov	sl, fp, d0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	bfce      	itee	gt
 800bc1e:	463a      	movgt	r2, r7
 800bc20:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bc24:	465a      	movle	r2, fp
 800bc26:	4659      	mov	r1, fp
 800bc28:	463d      	mov	r5, r7
 800bc2a:	bfd4      	ite	le
 800bc2c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800bc30:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800bc34:	4630      	mov	r0, r6
 800bc36:	ee10 2a10 	vmov	r2, s0
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4629      	mov	r1, r5
 800bc3e:	f7f4 fe25 	bl	800088c <__aeabi_ddiv>
 800bc42:	ec41 0b10 	vmov	d0, r0, r1
 800bc46:	b003      	add	sp, #12
 800bc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc4c <__copybits>:
 800bc4c:	3901      	subs	r1, #1
 800bc4e:	b510      	push	{r4, lr}
 800bc50:	1149      	asrs	r1, r1, #5
 800bc52:	6914      	ldr	r4, [r2, #16]
 800bc54:	3101      	adds	r1, #1
 800bc56:	f102 0314 	add.w	r3, r2, #20
 800bc5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc62:	42a3      	cmp	r3, r4
 800bc64:	4602      	mov	r2, r0
 800bc66:	d303      	bcc.n	800bc70 <__copybits+0x24>
 800bc68:	2300      	movs	r3, #0
 800bc6a:	428a      	cmp	r2, r1
 800bc6c:	d305      	bcc.n	800bc7a <__copybits+0x2e>
 800bc6e:	bd10      	pop	{r4, pc}
 800bc70:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc74:	f840 2b04 	str.w	r2, [r0], #4
 800bc78:	e7f3      	b.n	800bc62 <__copybits+0x16>
 800bc7a:	f842 3b04 	str.w	r3, [r2], #4
 800bc7e:	e7f4      	b.n	800bc6a <__copybits+0x1e>

0800bc80 <__any_on>:
 800bc80:	f100 0214 	add.w	r2, r0, #20
 800bc84:	6900      	ldr	r0, [r0, #16]
 800bc86:	114b      	asrs	r3, r1, #5
 800bc88:	4298      	cmp	r0, r3
 800bc8a:	b510      	push	{r4, lr}
 800bc8c:	db11      	blt.n	800bcb2 <__any_on+0x32>
 800bc8e:	dd0a      	ble.n	800bca6 <__any_on+0x26>
 800bc90:	f011 011f 	ands.w	r1, r1, #31
 800bc94:	d007      	beq.n	800bca6 <__any_on+0x26>
 800bc96:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bc9a:	fa24 f001 	lsr.w	r0, r4, r1
 800bc9e:	fa00 f101 	lsl.w	r1, r0, r1
 800bca2:	428c      	cmp	r4, r1
 800bca4:	d10b      	bne.n	800bcbe <__any_on+0x3e>
 800bca6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d803      	bhi.n	800bcb6 <__any_on+0x36>
 800bcae:	2000      	movs	r0, #0
 800bcb0:	bd10      	pop	{r4, pc}
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	e7f7      	b.n	800bca6 <__any_on+0x26>
 800bcb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bcba:	2900      	cmp	r1, #0
 800bcbc:	d0f5      	beq.n	800bcaa <__any_on+0x2a>
 800bcbe:	2001      	movs	r0, #1
 800bcc0:	e7f6      	b.n	800bcb0 <__any_on+0x30>

0800bcc2 <_calloc_r>:
 800bcc2:	b538      	push	{r3, r4, r5, lr}
 800bcc4:	fb02 f401 	mul.w	r4, r2, r1
 800bcc8:	4621      	mov	r1, r4
 800bcca:	f000 f857 	bl	800bd7c <_malloc_r>
 800bcce:	4605      	mov	r5, r0
 800bcd0:	b118      	cbz	r0, 800bcda <_calloc_r+0x18>
 800bcd2:	4622      	mov	r2, r4
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	f7fc fd35 	bl	8008744 <memset>
 800bcda:	4628      	mov	r0, r5
 800bcdc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bce0 <_free_r>:
 800bce0:	b538      	push	{r3, r4, r5, lr}
 800bce2:	4605      	mov	r5, r0
 800bce4:	2900      	cmp	r1, #0
 800bce6:	d045      	beq.n	800bd74 <_free_r+0x94>
 800bce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcec:	1f0c      	subs	r4, r1, #4
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	bfb8      	it	lt
 800bcf2:	18e4      	addlt	r4, r4, r3
 800bcf4:	f000 fa36 	bl	800c164 <__malloc_lock>
 800bcf8:	4a1f      	ldr	r2, [pc, #124]	; (800bd78 <_free_r+0x98>)
 800bcfa:	6813      	ldr	r3, [r2, #0]
 800bcfc:	4610      	mov	r0, r2
 800bcfe:	b933      	cbnz	r3, 800bd0e <_free_r+0x2e>
 800bd00:	6063      	str	r3, [r4, #4]
 800bd02:	6014      	str	r4, [r2, #0]
 800bd04:	4628      	mov	r0, r5
 800bd06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd0a:	f000 ba2c 	b.w	800c166 <__malloc_unlock>
 800bd0e:	42a3      	cmp	r3, r4
 800bd10:	d90c      	bls.n	800bd2c <_free_r+0x4c>
 800bd12:	6821      	ldr	r1, [r4, #0]
 800bd14:	1862      	adds	r2, r4, r1
 800bd16:	4293      	cmp	r3, r2
 800bd18:	bf04      	itt	eq
 800bd1a:	681a      	ldreq	r2, [r3, #0]
 800bd1c:	685b      	ldreq	r3, [r3, #4]
 800bd1e:	6063      	str	r3, [r4, #4]
 800bd20:	bf04      	itt	eq
 800bd22:	1852      	addeq	r2, r2, r1
 800bd24:	6022      	streq	r2, [r4, #0]
 800bd26:	6004      	str	r4, [r0, #0]
 800bd28:	e7ec      	b.n	800bd04 <_free_r+0x24>
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	685a      	ldr	r2, [r3, #4]
 800bd2e:	b10a      	cbz	r2, 800bd34 <_free_r+0x54>
 800bd30:	42a2      	cmp	r2, r4
 800bd32:	d9fa      	bls.n	800bd2a <_free_r+0x4a>
 800bd34:	6819      	ldr	r1, [r3, #0]
 800bd36:	1858      	adds	r0, r3, r1
 800bd38:	42a0      	cmp	r0, r4
 800bd3a:	d10b      	bne.n	800bd54 <_free_r+0x74>
 800bd3c:	6820      	ldr	r0, [r4, #0]
 800bd3e:	4401      	add	r1, r0
 800bd40:	1858      	adds	r0, r3, r1
 800bd42:	4282      	cmp	r2, r0
 800bd44:	6019      	str	r1, [r3, #0]
 800bd46:	d1dd      	bne.n	800bd04 <_free_r+0x24>
 800bd48:	6810      	ldr	r0, [r2, #0]
 800bd4a:	6852      	ldr	r2, [r2, #4]
 800bd4c:	605a      	str	r2, [r3, #4]
 800bd4e:	4401      	add	r1, r0
 800bd50:	6019      	str	r1, [r3, #0]
 800bd52:	e7d7      	b.n	800bd04 <_free_r+0x24>
 800bd54:	d902      	bls.n	800bd5c <_free_r+0x7c>
 800bd56:	230c      	movs	r3, #12
 800bd58:	602b      	str	r3, [r5, #0]
 800bd5a:	e7d3      	b.n	800bd04 <_free_r+0x24>
 800bd5c:	6820      	ldr	r0, [r4, #0]
 800bd5e:	1821      	adds	r1, r4, r0
 800bd60:	428a      	cmp	r2, r1
 800bd62:	bf04      	itt	eq
 800bd64:	6811      	ldreq	r1, [r2, #0]
 800bd66:	6852      	ldreq	r2, [r2, #4]
 800bd68:	6062      	str	r2, [r4, #4]
 800bd6a:	bf04      	itt	eq
 800bd6c:	1809      	addeq	r1, r1, r0
 800bd6e:	6021      	streq	r1, [r4, #0]
 800bd70:	605c      	str	r4, [r3, #4]
 800bd72:	e7c7      	b.n	800bd04 <_free_r+0x24>
 800bd74:	bd38      	pop	{r3, r4, r5, pc}
 800bd76:	bf00      	nop
 800bd78:	20000210 	.word	0x20000210

0800bd7c <_malloc_r>:
 800bd7c:	b570      	push	{r4, r5, r6, lr}
 800bd7e:	1ccd      	adds	r5, r1, #3
 800bd80:	f025 0503 	bic.w	r5, r5, #3
 800bd84:	3508      	adds	r5, #8
 800bd86:	2d0c      	cmp	r5, #12
 800bd88:	bf38      	it	cc
 800bd8a:	250c      	movcc	r5, #12
 800bd8c:	2d00      	cmp	r5, #0
 800bd8e:	4606      	mov	r6, r0
 800bd90:	db01      	blt.n	800bd96 <_malloc_r+0x1a>
 800bd92:	42a9      	cmp	r1, r5
 800bd94:	d903      	bls.n	800bd9e <_malloc_r+0x22>
 800bd96:	230c      	movs	r3, #12
 800bd98:	6033      	str	r3, [r6, #0]
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	bd70      	pop	{r4, r5, r6, pc}
 800bd9e:	f000 f9e1 	bl	800c164 <__malloc_lock>
 800bda2:	4a21      	ldr	r2, [pc, #132]	; (800be28 <_malloc_r+0xac>)
 800bda4:	6814      	ldr	r4, [r2, #0]
 800bda6:	4621      	mov	r1, r4
 800bda8:	b991      	cbnz	r1, 800bdd0 <_malloc_r+0x54>
 800bdaa:	4c20      	ldr	r4, [pc, #128]	; (800be2c <_malloc_r+0xb0>)
 800bdac:	6823      	ldr	r3, [r4, #0]
 800bdae:	b91b      	cbnz	r3, 800bdb8 <_malloc_r+0x3c>
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	f000 f98f 	bl	800c0d4 <_sbrk_r>
 800bdb6:	6020      	str	r0, [r4, #0]
 800bdb8:	4629      	mov	r1, r5
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f000 f98a 	bl	800c0d4 <_sbrk_r>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d124      	bne.n	800be0e <_malloc_r+0x92>
 800bdc4:	230c      	movs	r3, #12
 800bdc6:	6033      	str	r3, [r6, #0]
 800bdc8:	4630      	mov	r0, r6
 800bdca:	f000 f9cc 	bl	800c166 <__malloc_unlock>
 800bdce:	e7e4      	b.n	800bd9a <_malloc_r+0x1e>
 800bdd0:	680b      	ldr	r3, [r1, #0]
 800bdd2:	1b5b      	subs	r3, r3, r5
 800bdd4:	d418      	bmi.n	800be08 <_malloc_r+0x8c>
 800bdd6:	2b0b      	cmp	r3, #11
 800bdd8:	d90f      	bls.n	800bdfa <_malloc_r+0x7e>
 800bdda:	600b      	str	r3, [r1, #0]
 800bddc:	50cd      	str	r5, [r1, r3]
 800bdde:	18cc      	adds	r4, r1, r3
 800bde0:	4630      	mov	r0, r6
 800bde2:	f000 f9c0 	bl	800c166 <__malloc_unlock>
 800bde6:	f104 000b 	add.w	r0, r4, #11
 800bdea:	1d23      	adds	r3, r4, #4
 800bdec:	f020 0007 	bic.w	r0, r0, #7
 800bdf0:	1ac3      	subs	r3, r0, r3
 800bdf2:	d0d3      	beq.n	800bd9c <_malloc_r+0x20>
 800bdf4:	425a      	negs	r2, r3
 800bdf6:	50e2      	str	r2, [r4, r3]
 800bdf8:	e7d0      	b.n	800bd9c <_malloc_r+0x20>
 800bdfa:	428c      	cmp	r4, r1
 800bdfc:	684b      	ldr	r3, [r1, #4]
 800bdfe:	bf16      	itet	ne
 800be00:	6063      	strne	r3, [r4, #4]
 800be02:	6013      	streq	r3, [r2, #0]
 800be04:	460c      	movne	r4, r1
 800be06:	e7eb      	b.n	800bde0 <_malloc_r+0x64>
 800be08:	460c      	mov	r4, r1
 800be0a:	6849      	ldr	r1, [r1, #4]
 800be0c:	e7cc      	b.n	800bda8 <_malloc_r+0x2c>
 800be0e:	1cc4      	adds	r4, r0, #3
 800be10:	f024 0403 	bic.w	r4, r4, #3
 800be14:	42a0      	cmp	r0, r4
 800be16:	d005      	beq.n	800be24 <_malloc_r+0xa8>
 800be18:	1a21      	subs	r1, r4, r0
 800be1a:	4630      	mov	r0, r6
 800be1c:	f000 f95a 	bl	800c0d4 <_sbrk_r>
 800be20:	3001      	adds	r0, #1
 800be22:	d0cf      	beq.n	800bdc4 <_malloc_r+0x48>
 800be24:	6025      	str	r5, [r4, #0]
 800be26:	e7db      	b.n	800bde0 <_malloc_r+0x64>
 800be28:	20000210 	.word	0x20000210
 800be2c:	20000214 	.word	0x20000214

0800be30 <__ssputs_r>:
 800be30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be34:	688e      	ldr	r6, [r1, #8]
 800be36:	429e      	cmp	r6, r3
 800be38:	4682      	mov	sl, r0
 800be3a:	460c      	mov	r4, r1
 800be3c:	4690      	mov	r8, r2
 800be3e:	4699      	mov	r9, r3
 800be40:	d837      	bhi.n	800beb2 <__ssputs_r+0x82>
 800be42:	898a      	ldrh	r2, [r1, #12]
 800be44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be48:	d031      	beq.n	800beae <__ssputs_r+0x7e>
 800be4a:	6825      	ldr	r5, [r4, #0]
 800be4c:	6909      	ldr	r1, [r1, #16]
 800be4e:	1a6f      	subs	r7, r5, r1
 800be50:	6965      	ldr	r5, [r4, #20]
 800be52:	2302      	movs	r3, #2
 800be54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be58:	fb95 f5f3 	sdiv	r5, r5, r3
 800be5c:	f109 0301 	add.w	r3, r9, #1
 800be60:	443b      	add	r3, r7
 800be62:	429d      	cmp	r5, r3
 800be64:	bf38      	it	cc
 800be66:	461d      	movcc	r5, r3
 800be68:	0553      	lsls	r3, r2, #21
 800be6a:	d530      	bpl.n	800bece <__ssputs_r+0x9e>
 800be6c:	4629      	mov	r1, r5
 800be6e:	f7ff ff85 	bl	800bd7c <_malloc_r>
 800be72:	4606      	mov	r6, r0
 800be74:	b950      	cbnz	r0, 800be8c <__ssputs_r+0x5c>
 800be76:	230c      	movs	r3, #12
 800be78:	f8ca 3000 	str.w	r3, [sl]
 800be7c:	89a3      	ldrh	r3, [r4, #12]
 800be7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be82:	81a3      	strh	r3, [r4, #12]
 800be84:	f04f 30ff 	mov.w	r0, #4294967295
 800be88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be8c:	463a      	mov	r2, r7
 800be8e:	6921      	ldr	r1, [r4, #16]
 800be90:	f7ff fb0e 	bl	800b4b0 <memcpy>
 800be94:	89a3      	ldrh	r3, [r4, #12]
 800be96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be9e:	81a3      	strh	r3, [r4, #12]
 800bea0:	6126      	str	r6, [r4, #16]
 800bea2:	6165      	str	r5, [r4, #20]
 800bea4:	443e      	add	r6, r7
 800bea6:	1bed      	subs	r5, r5, r7
 800bea8:	6026      	str	r6, [r4, #0]
 800beaa:	60a5      	str	r5, [r4, #8]
 800beac:	464e      	mov	r6, r9
 800beae:	454e      	cmp	r6, r9
 800beb0:	d900      	bls.n	800beb4 <__ssputs_r+0x84>
 800beb2:	464e      	mov	r6, r9
 800beb4:	4632      	mov	r2, r6
 800beb6:	4641      	mov	r1, r8
 800beb8:	6820      	ldr	r0, [r4, #0]
 800beba:	f000 f93a 	bl	800c132 <memmove>
 800bebe:	68a3      	ldr	r3, [r4, #8]
 800bec0:	1b9b      	subs	r3, r3, r6
 800bec2:	60a3      	str	r3, [r4, #8]
 800bec4:	6823      	ldr	r3, [r4, #0]
 800bec6:	441e      	add	r6, r3
 800bec8:	6026      	str	r6, [r4, #0]
 800beca:	2000      	movs	r0, #0
 800becc:	e7dc      	b.n	800be88 <__ssputs_r+0x58>
 800bece:	462a      	mov	r2, r5
 800bed0:	f000 f94a 	bl	800c168 <_realloc_r>
 800bed4:	4606      	mov	r6, r0
 800bed6:	2800      	cmp	r0, #0
 800bed8:	d1e2      	bne.n	800bea0 <__ssputs_r+0x70>
 800beda:	6921      	ldr	r1, [r4, #16]
 800bedc:	4650      	mov	r0, sl
 800bede:	f7ff feff 	bl	800bce0 <_free_r>
 800bee2:	e7c8      	b.n	800be76 <__ssputs_r+0x46>

0800bee4 <_svfiprintf_r>:
 800bee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee8:	461d      	mov	r5, r3
 800beea:	898b      	ldrh	r3, [r1, #12]
 800beec:	061f      	lsls	r7, r3, #24
 800beee:	b09d      	sub	sp, #116	; 0x74
 800bef0:	4680      	mov	r8, r0
 800bef2:	460c      	mov	r4, r1
 800bef4:	4616      	mov	r6, r2
 800bef6:	d50f      	bpl.n	800bf18 <_svfiprintf_r+0x34>
 800bef8:	690b      	ldr	r3, [r1, #16]
 800befa:	b96b      	cbnz	r3, 800bf18 <_svfiprintf_r+0x34>
 800befc:	2140      	movs	r1, #64	; 0x40
 800befe:	f7ff ff3d 	bl	800bd7c <_malloc_r>
 800bf02:	6020      	str	r0, [r4, #0]
 800bf04:	6120      	str	r0, [r4, #16]
 800bf06:	b928      	cbnz	r0, 800bf14 <_svfiprintf_r+0x30>
 800bf08:	230c      	movs	r3, #12
 800bf0a:	f8c8 3000 	str.w	r3, [r8]
 800bf0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf12:	e0c8      	b.n	800c0a6 <_svfiprintf_r+0x1c2>
 800bf14:	2340      	movs	r3, #64	; 0x40
 800bf16:	6163      	str	r3, [r4, #20]
 800bf18:	2300      	movs	r3, #0
 800bf1a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf1c:	2320      	movs	r3, #32
 800bf1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf22:	2330      	movs	r3, #48	; 0x30
 800bf24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf28:	9503      	str	r5, [sp, #12]
 800bf2a:	f04f 0b01 	mov.w	fp, #1
 800bf2e:	4637      	mov	r7, r6
 800bf30:	463d      	mov	r5, r7
 800bf32:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bf36:	b10b      	cbz	r3, 800bf3c <_svfiprintf_r+0x58>
 800bf38:	2b25      	cmp	r3, #37	; 0x25
 800bf3a:	d13e      	bne.n	800bfba <_svfiprintf_r+0xd6>
 800bf3c:	ebb7 0a06 	subs.w	sl, r7, r6
 800bf40:	d00b      	beq.n	800bf5a <_svfiprintf_r+0x76>
 800bf42:	4653      	mov	r3, sl
 800bf44:	4632      	mov	r2, r6
 800bf46:	4621      	mov	r1, r4
 800bf48:	4640      	mov	r0, r8
 800bf4a:	f7ff ff71 	bl	800be30 <__ssputs_r>
 800bf4e:	3001      	adds	r0, #1
 800bf50:	f000 80a4 	beq.w	800c09c <_svfiprintf_r+0x1b8>
 800bf54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf56:	4453      	add	r3, sl
 800bf58:	9309      	str	r3, [sp, #36]	; 0x24
 800bf5a:	783b      	ldrb	r3, [r7, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f000 809d 	beq.w	800c09c <_svfiprintf_r+0x1b8>
 800bf62:	2300      	movs	r3, #0
 800bf64:	f04f 32ff 	mov.w	r2, #4294967295
 800bf68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf6c:	9304      	str	r3, [sp, #16]
 800bf6e:	9307      	str	r3, [sp, #28]
 800bf70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf74:	931a      	str	r3, [sp, #104]	; 0x68
 800bf76:	462f      	mov	r7, r5
 800bf78:	2205      	movs	r2, #5
 800bf7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bf7e:	4850      	ldr	r0, [pc, #320]	; (800c0c0 <_svfiprintf_r+0x1dc>)
 800bf80:	f7f4 f94e 	bl	8000220 <memchr>
 800bf84:	9b04      	ldr	r3, [sp, #16]
 800bf86:	b9d0      	cbnz	r0, 800bfbe <_svfiprintf_r+0xda>
 800bf88:	06d9      	lsls	r1, r3, #27
 800bf8a:	bf44      	itt	mi
 800bf8c:	2220      	movmi	r2, #32
 800bf8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bf92:	071a      	lsls	r2, r3, #28
 800bf94:	bf44      	itt	mi
 800bf96:	222b      	movmi	r2, #43	; 0x2b
 800bf98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bf9c:	782a      	ldrb	r2, [r5, #0]
 800bf9e:	2a2a      	cmp	r2, #42	; 0x2a
 800bfa0:	d015      	beq.n	800bfce <_svfiprintf_r+0xea>
 800bfa2:	9a07      	ldr	r2, [sp, #28]
 800bfa4:	462f      	mov	r7, r5
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	250a      	movs	r5, #10
 800bfaa:	4639      	mov	r1, r7
 800bfac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfb0:	3b30      	subs	r3, #48	; 0x30
 800bfb2:	2b09      	cmp	r3, #9
 800bfb4:	d94d      	bls.n	800c052 <_svfiprintf_r+0x16e>
 800bfb6:	b1b8      	cbz	r0, 800bfe8 <_svfiprintf_r+0x104>
 800bfb8:	e00f      	b.n	800bfda <_svfiprintf_r+0xf6>
 800bfba:	462f      	mov	r7, r5
 800bfbc:	e7b8      	b.n	800bf30 <_svfiprintf_r+0x4c>
 800bfbe:	4a40      	ldr	r2, [pc, #256]	; (800c0c0 <_svfiprintf_r+0x1dc>)
 800bfc0:	1a80      	subs	r0, r0, r2
 800bfc2:	fa0b f000 	lsl.w	r0, fp, r0
 800bfc6:	4318      	orrs	r0, r3
 800bfc8:	9004      	str	r0, [sp, #16]
 800bfca:	463d      	mov	r5, r7
 800bfcc:	e7d3      	b.n	800bf76 <_svfiprintf_r+0x92>
 800bfce:	9a03      	ldr	r2, [sp, #12]
 800bfd0:	1d11      	adds	r1, r2, #4
 800bfd2:	6812      	ldr	r2, [r2, #0]
 800bfd4:	9103      	str	r1, [sp, #12]
 800bfd6:	2a00      	cmp	r2, #0
 800bfd8:	db01      	blt.n	800bfde <_svfiprintf_r+0xfa>
 800bfda:	9207      	str	r2, [sp, #28]
 800bfdc:	e004      	b.n	800bfe8 <_svfiprintf_r+0x104>
 800bfde:	4252      	negs	r2, r2
 800bfe0:	f043 0302 	orr.w	r3, r3, #2
 800bfe4:	9207      	str	r2, [sp, #28]
 800bfe6:	9304      	str	r3, [sp, #16]
 800bfe8:	783b      	ldrb	r3, [r7, #0]
 800bfea:	2b2e      	cmp	r3, #46	; 0x2e
 800bfec:	d10c      	bne.n	800c008 <_svfiprintf_r+0x124>
 800bfee:	787b      	ldrb	r3, [r7, #1]
 800bff0:	2b2a      	cmp	r3, #42	; 0x2a
 800bff2:	d133      	bne.n	800c05c <_svfiprintf_r+0x178>
 800bff4:	9b03      	ldr	r3, [sp, #12]
 800bff6:	1d1a      	adds	r2, r3, #4
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	9203      	str	r2, [sp, #12]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	bfb8      	it	lt
 800c000:	f04f 33ff 	movlt.w	r3, #4294967295
 800c004:	3702      	adds	r7, #2
 800c006:	9305      	str	r3, [sp, #20]
 800c008:	4d2e      	ldr	r5, [pc, #184]	; (800c0c4 <_svfiprintf_r+0x1e0>)
 800c00a:	7839      	ldrb	r1, [r7, #0]
 800c00c:	2203      	movs	r2, #3
 800c00e:	4628      	mov	r0, r5
 800c010:	f7f4 f906 	bl	8000220 <memchr>
 800c014:	b138      	cbz	r0, 800c026 <_svfiprintf_r+0x142>
 800c016:	2340      	movs	r3, #64	; 0x40
 800c018:	1b40      	subs	r0, r0, r5
 800c01a:	fa03 f000 	lsl.w	r0, r3, r0
 800c01e:	9b04      	ldr	r3, [sp, #16]
 800c020:	4303      	orrs	r3, r0
 800c022:	3701      	adds	r7, #1
 800c024:	9304      	str	r3, [sp, #16]
 800c026:	7839      	ldrb	r1, [r7, #0]
 800c028:	4827      	ldr	r0, [pc, #156]	; (800c0c8 <_svfiprintf_r+0x1e4>)
 800c02a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c02e:	2206      	movs	r2, #6
 800c030:	1c7e      	adds	r6, r7, #1
 800c032:	f7f4 f8f5 	bl	8000220 <memchr>
 800c036:	2800      	cmp	r0, #0
 800c038:	d038      	beq.n	800c0ac <_svfiprintf_r+0x1c8>
 800c03a:	4b24      	ldr	r3, [pc, #144]	; (800c0cc <_svfiprintf_r+0x1e8>)
 800c03c:	bb13      	cbnz	r3, 800c084 <_svfiprintf_r+0x1a0>
 800c03e:	9b03      	ldr	r3, [sp, #12]
 800c040:	3307      	adds	r3, #7
 800c042:	f023 0307 	bic.w	r3, r3, #7
 800c046:	3308      	adds	r3, #8
 800c048:	9303      	str	r3, [sp, #12]
 800c04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c04c:	444b      	add	r3, r9
 800c04e:	9309      	str	r3, [sp, #36]	; 0x24
 800c050:	e76d      	b.n	800bf2e <_svfiprintf_r+0x4a>
 800c052:	fb05 3202 	mla	r2, r5, r2, r3
 800c056:	2001      	movs	r0, #1
 800c058:	460f      	mov	r7, r1
 800c05a:	e7a6      	b.n	800bfaa <_svfiprintf_r+0xc6>
 800c05c:	2300      	movs	r3, #0
 800c05e:	3701      	adds	r7, #1
 800c060:	9305      	str	r3, [sp, #20]
 800c062:	4619      	mov	r1, r3
 800c064:	250a      	movs	r5, #10
 800c066:	4638      	mov	r0, r7
 800c068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c06c:	3a30      	subs	r2, #48	; 0x30
 800c06e:	2a09      	cmp	r2, #9
 800c070:	d903      	bls.n	800c07a <_svfiprintf_r+0x196>
 800c072:	2b00      	cmp	r3, #0
 800c074:	d0c8      	beq.n	800c008 <_svfiprintf_r+0x124>
 800c076:	9105      	str	r1, [sp, #20]
 800c078:	e7c6      	b.n	800c008 <_svfiprintf_r+0x124>
 800c07a:	fb05 2101 	mla	r1, r5, r1, r2
 800c07e:	2301      	movs	r3, #1
 800c080:	4607      	mov	r7, r0
 800c082:	e7f0      	b.n	800c066 <_svfiprintf_r+0x182>
 800c084:	ab03      	add	r3, sp, #12
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	4622      	mov	r2, r4
 800c08a:	4b11      	ldr	r3, [pc, #68]	; (800c0d0 <_svfiprintf_r+0x1ec>)
 800c08c:	a904      	add	r1, sp, #16
 800c08e:	4640      	mov	r0, r8
 800c090:	f7fc fbf4 	bl	800887c <_printf_float>
 800c094:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c098:	4681      	mov	r9, r0
 800c09a:	d1d6      	bne.n	800c04a <_svfiprintf_r+0x166>
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	065b      	lsls	r3, r3, #25
 800c0a0:	f53f af35 	bmi.w	800bf0e <_svfiprintf_r+0x2a>
 800c0a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0a6:	b01d      	add	sp, #116	; 0x74
 800c0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ac:	ab03      	add	r3, sp, #12
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	4622      	mov	r2, r4
 800c0b2:	4b07      	ldr	r3, [pc, #28]	; (800c0d0 <_svfiprintf_r+0x1ec>)
 800c0b4:	a904      	add	r1, sp, #16
 800c0b6:	4640      	mov	r0, r8
 800c0b8:	f7fc fe96 	bl	8008de8 <_printf_i>
 800c0bc:	e7ea      	b.n	800c094 <_svfiprintf_r+0x1b0>
 800c0be:	bf00      	nop
 800c0c0:	0800c3ac 	.word	0x0800c3ac
 800c0c4:	0800c3b2 	.word	0x0800c3b2
 800c0c8:	0800c3b6 	.word	0x0800c3b6
 800c0cc:	0800887d 	.word	0x0800887d
 800c0d0:	0800be31 	.word	0x0800be31

0800c0d4 <_sbrk_r>:
 800c0d4:	b538      	push	{r3, r4, r5, lr}
 800c0d6:	4c06      	ldr	r4, [pc, #24]	; (800c0f0 <_sbrk_r+0x1c>)
 800c0d8:	2300      	movs	r3, #0
 800c0da:	4605      	mov	r5, r0
 800c0dc:	4608      	mov	r0, r1
 800c0de:	6023      	str	r3, [r4, #0]
 800c0e0:	f7f6 fd70 	bl	8002bc4 <_sbrk>
 800c0e4:	1c43      	adds	r3, r0, #1
 800c0e6:	d102      	bne.n	800c0ee <_sbrk_r+0x1a>
 800c0e8:	6823      	ldr	r3, [r4, #0]
 800c0ea:	b103      	cbz	r3, 800c0ee <_sbrk_r+0x1a>
 800c0ec:	602b      	str	r3, [r5, #0]
 800c0ee:	bd38      	pop	{r3, r4, r5, pc}
 800c0f0:	200005b4 	.word	0x200005b4

0800c0f4 <strncmp>:
 800c0f4:	b510      	push	{r4, lr}
 800c0f6:	b16a      	cbz	r2, 800c114 <strncmp+0x20>
 800c0f8:	3901      	subs	r1, #1
 800c0fa:	1884      	adds	r4, r0, r2
 800c0fc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c100:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c104:	4293      	cmp	r3, r2
 800c106:	d103      	bne.n	800c110 <strncmp+0x1c>
 800c108:	42a0      	cmp	r0, r4
 800c10a:	d001      	beq.n	800c110 <strncmp+0x1c>
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d1f5      	bne.n	800c0fc <strncmp+0x8>
 800c110:	1a98      	subs	r0, r3, r2
 800c112:	bd10      	pop	{r4, pc}
 800c114:	4610      	mov	r0, r2
 800c116:	e7fc      	b.n	800c112 <strncmp+0x1e>

0800c118 <__ascii_wctomb>:
 800c118:	b149      	cbz	r1, 800c12e <__ascii_wctomb+0x16>
 800c11a:	2aff      	cmp	r2, #255	; 0xff
 800c11c:	bf85      	ittet	hi
 800c11e:	238a      	movhi	r3, #138	; 0x8a
 800c120:	6003      	strhi	r3, [r0, #0]
 800c122:	700a      	strbls	r2, [r1, #0]
 800c124:	f04f 30ff 	movhi.w	r0, #4294967295
 800c128:	bf98      	it	ls
 800c12a:	2001      	movls	r0, #1
 800c12c:	4770      	bx	lr
 800c12e:	4608      	mov	r0, r1
 800c130:	4770      	bx	lr

0800c132 <memmove>:
 800c132:	4288      	cmp	r0, r1
 800c134:	b510      	push	{r4, lr}
 800c136:	eb01 0302 	add.w	r3, r1, r2
 800c13a:	d807      	bhi.n	800c14c <memmove+0x1a>
 800c13c:	1e42      	subs	r2, r0, #1
 800c13e:	4299      	cmp	r1, r3
 800c140:	d00a      	beq.n	800c158 <memmove+0x26>
 800c142:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c146:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c14a:	e7f8      	b.n	800c13e <memmove+0xc>
 800c14c:	4283      	cmp	r3, r0
 800c14e:	d9f5      	bls.n	800c13c <memmove+0xa>
 800c150:	1881      	adds	r1, r0, r2
 800c152:	1ad2      	subs	r2, r2, r3
 800c154:	42d3      	cmn	r3, r2
 800c156:	d100      	bne.n	800c15a <memmove+0x28>
 800c158:	bd10      	pop	{r4, pc}
 800c15a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c15e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c162:	e7f7      	b.n	800c154 <memmove+0x22>

0800c164 <__malloc_lock>:
 800c164:	4770      	bx	lr

0800c166 <__malloc_unlock>:
 800c166:	4770      	bx	lr

0800c168 <_realloc_r>:
 800c168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16a:	4607      	mov	r7, r0
 800c16c:	4614      	mov	r4, r2
 800c16e:	460e      	mov	r6, r1
 800c170:	b921      	cbnz	r1, 800c17c <_realloc_r+0x14>
 800c172:	4611      	mov	r1, r2
 800c174:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c178:	f7ff be00 	b.w	800bd7c <_malloc_r>
 800c17c:	b922      	cbnz	r2, 800c188 <_realloc_r+0x20>
 800c17e:	f7ff fdaf 	bl	800bce0 <_free_r>
 800c182:	4625      	mov	r5, r4
 800c184:	4628      	mov	r0, r5
 800c186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c188:	f000 f814 	bl	800c1b4 <_malloc_usable_size_r>
 800c18c:	42a0      	cmp	r0, r4
 800c18e:	d20f      	bcs.n	800c1b0 <_realloc_r+0x48>
 800c190:	4621      	mov	r1, r4
 800c192:	4638      	mov	r0, r7
 800c194:	f7ff fdf2 	bl	800bd7c <_malloc_r>
 800c198:	4605      	mov	r5, r0
 800c19a:	2800      	cmp	r0, #0
 800c19c:	d0f2      	beq.n	800c184 <_realloc_r+0x1c>
 800c19e:	4631      	mov	r1, r6
 800c1a0:	4622      	mov	r2, r4
 800c1a2:	f7ff f985 	bl	800b4b0 <memcpy>
 800c1a6:	4631      	mov	r1, r6
 800c1a8:	4638      	mov	r0, r7
 800c1aa:	f7ff fd99 	bl	800bce0 <_free_r>
 800c1ae:	e7e9      	b.n	800c184 <_realloc_r+0x1c>
 800c1b0:	4635      	mov	r5, r6
 800c1b2:	e7e7      	b.n	800c184 <_realloc_r+0x1c>

0800c1b4 <_malloc_usable_size_r>:
 800c1b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1b8:	1f18      	subs	r0, r3, #4
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	bfbc      	itt	lt
 800c1be:	580b      	ldrlt	r3, [r1, r0]
 800c1c0:	18c0      	addlt	r0, r0, r3
 800c1c2:	4770      	bx	lr

0800c1c4 <_init>:
 800c1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1c6:	bf00      	nop
 800c1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ca:	bc08      	pop	{r3}
 800c1cc:	469e      	mov	lr, r3
 800c1ce:	4770      	bx	lr

0800c1d0 <_fini>:
 800c1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1d2:	bf00      	nop
 800c1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1d6:	bc08      	pop	{r3}
 800c1d8:	469e      	mov	lr, r3
 800c1da:	4770      	bx	lr
