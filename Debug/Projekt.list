
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000becc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  0800c0a0  0800c0a0  0001c0a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c378  0800c378  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c378  0800c378  0001c378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c380  0800c380  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c380  0800c380  0001c380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c384  0800c384  0001c384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  200001ec  0800c574  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  0800c574  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ade2  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a82  00000000  00000000  0003affe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016b0  00000000  00000000  0003ea80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a8  00000000  00000000  00040130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029c23  00000000  00000000  000415d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000185a2  00000000  00000000  0006b1fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fbde0  00000000  00000000  0008379d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f4  00000000  00000000  0017f57d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aa0  00000000  00000000  0017f674  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c084 	.word	0x0800c084

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0800c084 	.word	0x0800c084

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fda:	4b28      	ldr	r3, [pc, #160]	; (800107c <MX_ADC1_Init+0xb4>)
 8000fdc:	4a28      	ldr	r2, [pc, #160]	; (8001080 <MX_ADC1_Init+0xb8>)
 8000fde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000fe0:	4b26      	ldr	r3, [pc, #152]	; (800107c <MX_ADC1_Init+0xb4>)
 8000fe2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fe6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe8:	4b24      	ldr	r3, [pc, #144]	; (800107c <MX_ADC1_Init+0xb4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <MX_ADC1_Init+0xb4>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <MX_ADC1_Init+0xb4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <MX_ADC1_Init+0xb4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001002:	4b1e      	ldr	r3, [pc, #120]	; (800107c <MX_ADC1_Init+0xb4>)
 8001004:	2200      	movs	r2, #0
 8001006:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <MX_ADC1_Init+0xb4>)
 800100a:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <MX_ADC1_Init+0xbc>)
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_ADC1_Init+0xb4>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <MX_ADC1_Init+0xb4>)
 8001016:	2202      	movs	r2, #2
 8001018:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_ADC1_Init+0xb4>)
 800101c:	2201      	movs	r2, #1
 800101e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <MX_ADC1_Init+0xb4>)
 8001024:	2200      	movs	r2, #0
 8001026:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001028:	4814      	ldr	r0, [pc, #80]	; (800107c <MX_ADC1_Init+0xb4>)
 800102a:	f002 f9e3 	bl	80033f4 <HAL_ADC_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001034:	f001 fc82 	bl	800293c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001038:	230c      	movs	r3, #12
 800103a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800103c:	2301      	movs	r3, #1
 800103e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001040:	2307      	movs	r3, #7
 8001042:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001044:	463b      	mov	r3, r7
 8001046:	4619      	mov	r1, r3
 8001048:	480c      	ldr	r0, [pc, #48]	; (800107c <MX_ADC1_Init+0xb4>)
 800104a:	f002 fa17 	bl	800347c <HAL_ADC_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001054:	f001 fc72 	bl	800293c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001058:	2306      	movs	r3, #6
 800105a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800105c:	2302      	movs	r3, #2
 800105e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001060:	463b      	mov	r3, r7
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_ADC1_Init+0xb4>)
 8001066:	f002 fa09 	bl	800347c <HAL_ADC_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001070:	f001 fc64 	bl	800293c <Error_Handler>
  }

}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000218 	.word	0x20000218
 8001080:	40012000 	.word	0x40012000
 8001084:	0f000001 	.word	0x0f000001

08001088 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a39      	ldr	r2, [pc, #228]	; (800118c <HAL_ADC_MspInit+0x104>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d16b      	bne.n	8001182 <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010aa:	4b39      	ldr	r3, [pc, #228]	; (8001190 <HAL_ADC_MspInit+0x108>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	4a38      	ldr	r2, [pc, #224]	; (8001190 <HAL_ADC_MspInit+0x108>)
 80010b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b36      	ldr	r3, [pc, #216]	; (8001190 <HAL_ADC_MspInit+0x108>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	4b33      	ldr	r3, [pc, #204]	; (8001190 <HAL_ADC_MspInit+0x108>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a32      	ldr	r2, [pc, #200]	; (8001190 <HAL_ADC_MspInit+0x108>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b30      	ldr	r3, [pc, #192]	; (8001190 <HAL_ADC_MspInit+0x108>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <HAL_ADC_MspInit+0x108>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a2c      	ldr	r2, [pc, #176]	; (8001190 <HAL_ADC_MspInit+0x108>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <HAL_ADC_MspInit+0x108>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = POT1_AIN_Pin;
 80010f2:	2304      	movs	r3, #4
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f6:	2303      	movs	r3, #3
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT1_AIN_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4823      	ldr	r0, [pc, #140]	; (8001194 <HAL_ADC_MspInit+0x10c>)
 8001106:	f003 f8e5 	bl	80042d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT2_AIN_Pin;
 800110a:	2340      	movs	r3, #64	; 0x40
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT2_AIN_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	481e      	ldr	r0, [pc, #120]	; (8001198 <HAL_ADC_MspInit+0x110>)
 800111e:	f003 f8d9 	bl	80042d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_ADC_MspInit+0x114>)
 8001124:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <HAL_ADC_MspInit+0x118>)
 8001126:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <HAL_ADC_MspInit+0x114>)
 800112a:	2200      	movs	r2, #0
 800112c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <HAL_ADC_MspInit+0x114>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_ADC_MspInit+0x114>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <HAL_ADC_MspInit+0x114>)
 800113c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001140:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_ADC_MspInit+0x114>)
 8001144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001148:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_ADC_MspInit+0x114>)
 800114c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001150:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_ADC_MspInit+0x114>)
 8001154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001158:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_ADC_MspInit+0x114>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_ADC_MspInit+0x114>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001166:	480d      	ldr	r0, [pc, #52]	; (800119c <HAL_ADC_MspInit+0x114>)
 8001168:	f002 fdaa 	bl	8003cc0 <HAL_DMA_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8001172:	f001 fbe3 	bl	800293c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_ADC_MspInit+0x114>)
 800117a:	639a      	str	r2, [r3, #56]	; 0x38
 800117c:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_ADC_MspInit+0x114>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	; 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40012000 	.word	0x40012000
 8001190:	40023800 	.word	0x40023800
 8001194:	40020800 	.word	0x40020800
 8001198:	40020000 	.word	0x40020000
 800119c:	20000260 	.word	0x20000260
 80011a0:	40026410 	.word	0x40026410

080011a4 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4603      	mov	r3, r0
 80011b0:	73fb      	strb	r3, [r7, #15]
 80011b2:	4613      	mov	r3, r2
 80011b4:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 fb36 	bl	8001828 <null_ptr_check>
 80011bc:	4603      	mov	r3, r0
 80011be:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 80011c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d11c      	bne.n	8001202 <bmp280_get_regs+0x5e>
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d019      	beq.n	8001202 <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	789b      	ldrb	r3, [r3, #2]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d103      	bne.n	80011de <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011dc:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685c      	ldr	r4, [r3, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7858      	ldrb	r0, [r3, #1]
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	7bf9      	ldrb	r1, [r7, #15]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	47a0      	blx	r4
 80011f0:	4603      	mov	r3, r0
 80011f2:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 80011f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d004      	beq.n	8001206 <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 80011fc:	23fc      	movs	r3, #252	; 0xfc
 80011fe:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8001200:	e001      	b.n	8001206 <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001202:	23ff      	movs	r3, #255	; 0xff
 8001204:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001206:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800120a:	4618      	mov	r0, r3
 800120c:	371c      	adds	r7, #28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd90      	pop	{r4, r7, pc}

08001212 <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8001212:	b590      	push	{r4, r7, lr}
 8001214:	b089      	sub	sp, #36	; 0x24
 8001216:	af00      	add	r7, sp, #0
 8001218:	60f8      	str	r0, [r7, #12]
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4613      	mov	r3, r2
 8001220:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b04      	cmp	r3, #4
 8001226:	d901      	bls.n	800122c <bmp280_set_regs+0x1a>
    {
        len = 4;
 8001228:	2304      	movs	r3, #4
 800122a:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 800122c:	6838      	ldr	r0, [r7, #0]
 800122e:	f000 fafb 	bl	8001828 <null_ptr_check>
 8001232:	4603      	mov	r3, r0
 8001234:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001236:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d14d      	bne.n	80012da <bmp280_set_regs+0xc8>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d04a      	beq.n	80012da <bmp280_set_regs+0xc8>
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d047      	beq.n	80012da <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d041      	beq.n	80012d4 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	789b      	ldrb	r3, [r3, #2]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d114      	bne.n	8001288 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800125e:	2300      	movs	r3, #0
 8001260:	76fb      	strb	r3, [r7, #27]
 8001262:	e00d      	b.n	8001280 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001264:	7efb      	ldrb	r3, [r7, #27]
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	4413      	add	r3, r2
 800126a:	781a      	ldrb	r2, [r3, #0]
 800126c:	7efb      	ldrb	r3, [r7, #27]
 800126e:	68f9      	ldr	r1, [r7, #12]
 8001270:	440b      	add	r3, r1
 8001272:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800127a:	7efb      	ldrb	r3, [r7, #27]
 800127c:	3301      	adds	r3, #1
 800127e:	76fb      	strb	r3, [r7, #27]
 8001280:	7efa      	ldrb	r2, [r7, #27]
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	429a      	cmp	r2, r3
 8001286:	d3ed      	bcc.n	8001264 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d90d      	bls.n	80012aa <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f107 0110 	add.w	r1, r7, #16
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 fae6 	bl	8001868 <interleave_data>
                temp_len = ((len * 2) - 1);
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	83bb      	strh	r3, [r7, #28]
 80012a8:	e001      	b.n	80012ae <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689c      	ldr	r4, [r3, #8]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	7858      	ldrb	r0, [r3, #1]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	7819      	ldrb	r1, [r3, #0]
 80012ba:	8bbb      	ldrh	r3, [r7, #28]
 80012bc:	f107 0210 	add.w	r2, r7, #16
 80012c0:	47a0      	blx	r4
 80012c2:	4603      	mov	r3, r0
 80012c4:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 80012c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d008      	beq.n	80012e0 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 80012ce:	23fc      	movs	r3, #252	; 0xfc
 80012d0:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 80012d2:	e005      	b.n	80012e0 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 80012d4:	23fd      	movs	r3, #253	; 0xfd
 80012d6:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 80012d8:	e002      	b.n	80012e0 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80012da:	23ff      	movs	r3, #255	; 0xff
 80012dc:	77fb      	strb	r3, [r7, #31]
 80012de:	e000      	b.n	80012e2 <bmp280_set_regs+0xd0>
        if (len != 0)
 80012e0:	bf00      	nop
    }

    return rslt;
 80012e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}

080012ee <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 80012f6:	23e0      	movs	r3, #224	; 0xe0
 80012f8:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 80012fa:	23b6      	movs	r3, #182	; 0xb6
 80012fc:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 fa92 	bl	8001828 <null_ptr_check>
 8001304:	4603      	mov	r3, r0
 8001306:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10d      	bne.n	800132c <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001310:	f107 010d 	add.w	r1, r7, #13
 8001314:	f107 000e 	add.w	r0, r7, #14
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f7ff ff79 	bl	8001212 <bmp280_set_regs>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	2002      	movs	r0, #2
 800132a:	4798      	blx	r3
    }

    return rslt;
 800132c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8001340:	2305      	movs	r3, #5
 8001342:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 fa6f 	bl	8001828 <null_ptr_check>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 800134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d150      	bne.n	80013f8 <bmp280_init+0xc0>
    {
        while (try_count)
 8001356:	e02d      	b.n	80013b4 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	20d0      	movs	r0, #208	; 0xd0
 8001360:	f7ff ff20 	bl	80011a4 <bmp280_get_regs>
 8001364:	4603      	mov	r3, r0
 8001366:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 8001368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d11a      	bne.n	80013a6 <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 8001374:	2b56      	cmp	r3, #86	; 0x56
 8001376:	d007      	beq.n	8001388 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b57      	cmp	r3, #87	; 0x57
 800137e:	d003      	beq.n	8001388 <bmp280_init+0x50>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b58      	cmp	r3, #88	; 0x58
 8001386:	d10e      	bne.n	80013a6 <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ffb0 	bl	80012ee <bmp280_soft_reset>
 800138e:	4603      	mov	r3, r0
 8001390:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d110      	bne.n	80013bc <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fa8f 	bl	80018be <get_calib_param>
 80013a0:	4603      	mov	r3, r0
 80013a2:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80013a4:	e00a      	b.n	80013bc <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	200a      	movs	r0, #10
 80013ac:	4798      	blx	r3
            --try_count;
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 80013b4:	7bbb      	ldrb	r3, [r7, #14]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1ce      	bne.n	8001358 <bmp280_init+0x20>
 80013ba:	e000      	b.n	80013be <bmp280_init+0x86>
                break;
 80013bc:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 80013be:	7bbb      	ldrb	r3, [r7, #14]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 80013c4:	23fe      	movs	r3, #254	; 0xfe
 80013c6:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 80013c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d113      	bne.n	80013f8 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 80013f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800140e:	2300      	movs	r3, #0
 8001410:	733b      	strb	r3, [r7, #12]
 8001412:	2300      	movs	r3, #0
 8001414:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8001416:	6838      	ldr	r0, [r7, #0]
 8001418:	f000 fa06 	bl	8001828 <null_ptr_check>
 800141c:	4603      	mov	r3, r0
 800141e:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8001420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d137      	bne.n	8001498 <bmp280_get_config+0x94>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d034      	beq.n	8001498 <bmp280_get_config+0x94>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 800142e:	f107 010c 	add.w	r1, r7, #12
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2202      	movs	r2, #2
 8001436:	20f4      	movs	r0, #244	; 0xf4
 8001438:	f7ff feb4 	bl	80011a4 <bmp280_get_regs>
 800143c:	4603      	mov	r3, r0
 800143e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d129      	bne.n	800149c <bmp280_get_config+0x98>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 8001448:	7b3b      	ldrb	r3, [r7, #12]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	b2da      	uxtb	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 8001452:	7b3b      	ldrb	r3, [r7, #12]
 8001454:	109b      	asrs	r3, r3, #2
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	b2da      	uxtb	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 8001462:	7b7b      	ldrb	r3, [r7, #13]
 8001464:	095b      	lsrs	r3, r3, #5
 8001466:	b2da      	uxtb	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 800146c:	7b7b      	ldrb	r3, [r7, #13]
 800146e:	109b      	asrs	r3, r3, #2
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	b2da      	uxtb	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 800147c:	7b7b      	ldrb	r3, [r7, #13]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	b2da      	uxtb	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	332c      	adds	r3, #44	; 0x2c
 800148e:	6810      	ldr	r0, [r2, #0]
 8001490:	6018      	str	r0, [r3, #0]
 8001492:	7912      	ldrb	r2, [r2, #4]
 8001494:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 8001496:	e001      	b.n	800149c <bmp280_get_config+0x98>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001498:	23ff      	movs	r3, #255	; 0xff
 800149a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800149c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 fa9e 	bl	80019f8 <conf_sensor>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	6039      	str	r1, [r7, #0]
 80014d0:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80014d2:	6838      	ldr	r0, [r7, #0]
 80014d4:	f000 f9a8 	bl	8001828 <null_ptr_check>
 80014d8:	4603      	mov	r3, r0
 80014da:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 80014dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d109      	bne.n	80014f8 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 fa82 	bl	80019f8 <conf_sensor>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	809a      	strh	r2, [r3, #4]

    rslt = null_ptr_check(dev);
 8001518:	6838      	ldr	r0, [r7, #0]
 800151a:	f000 f985 	bl	8001828 <null_ptr_check>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d133      	bne.n	8001592 <bmp280_get_uncomp_data+0x8e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d030      	beq.n	8001592 <bmp280_get_uncomp_data+0x8e>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8001530:	f107 0108 	add.w	r1, r7, #8
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	2206      	movs	r2, #6
 8001538:	20f7      	movs	r0, #247	; 0xf7
 800153a:	f7ff fe33 	bl	80011a4 <bmp280_get_regs>
 800153e:	4603      	mov	r3, r0
 8001540:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d120      	bne.n	800158c <bmp280_get_uncomp_data+0x88>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 800154a:	7a3b      	ldrb	r3, [r7, #8]
 800154c:	031a      	lsls	r2, r3, #12
 800154e:	7a7b      	ldrb	r3, [r7, #9]
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	4313      	orrs	r3, r2
 8001554:	7aba      	ldrb	r2, [r7, #10]
 8001556:	0912      	lsrs	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 8001560:	7afb      	ldrb	r3, [r7, #11]
 8001562:	031a      	lsls	r2, r3, #12
 8001564:	7b3b      	ldrb	r3, [r7, #12]
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	4313      	orrs	r3, r2
 800156a:	7b7a      	ldrb	r2, [r7, #13]
 800156c:	0912      	lsrs	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4619      	mov	r1, r3
 8001580:	4610      	mov	r0, r2
 8001582:	f000 faf3 	bl	8001b6c <st_check_boundaries>
 8001586:	4603      	mov	r3, r0
 8001588:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 800158a:	e004      	b.n	8001596 <bmp280_get_uncomp_data+0x92>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 800158c:	23f3      	movs	r3, #243	; 0xf3
 800158e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001590:	e001      	b.n	8001596 <bmp280_get_uncomp_data+0x92>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001592:	23ff      	movs	r3, #255	; 0xff
 8001594:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <bmp280_get_comp_temp_32bit>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_temp_32bit(int32_t *comp_temp, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b088      	sub	sp, #32
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f93a 	bl	8001828 <null_ptr_check>
 80015b4:	4603      	mov	r3, r0
 80015b6:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 80015b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d150      	bne.n	8001662 <bmp280_get_comp_temp_32bit+0xc0>
    {
        var1 =
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	da00      	bge.n	80015c8 <bmp280_get_comp_temp_32bit+0x26>
 80015c6:	3307      	adds	r3, #7
 80015c8:	10db      	asrs	r3, r3, #3
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	8a1b      	ldrh	r3, [r3, #16]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80015da:	fb02 f303 	mul.w	r3, r2, r3
        var1 =
 80015de:	2b00      	cmp	r3, #0
 80015e0:	da01      	bge.n	80015e6 <bmp280_get_comp_temp_32bit+0x44>
 80015e2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80015e6:	12db      	asrs	r3, r3, #11
 80015e8:	61bb      	str	r3, [r7, #24]
            2048;
        var2 =
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	da00      	bge.n	80015f2 <bmp280_get_comp_temp_32bit+0x50>
 80015f0:	330f      	adds	r3, #15
 80015f2:	111b      	asrs	r3, r3, #4
 80015f4:	461a      	mov	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	8a1b      	ldrh	r3, [r3, #16]
 80015fa:	1ad2      	subs	r2, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	da00      	bge.n	8001604 <bmp280_get_comp_temp_32bit+0x62>
 8001602:	330f      	adds	r3, #15
 8001604:	111b      	asrs	r3, r3, #4
 8001606:	4619      	mov	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	8a1b      	ldrh	r3, [r3, #16]
 800160c:	1acb      	subs	r3, r1, r3
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 800160e:	fb03 f302 	mul.w	r3, r3, r2
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8001612:	2b00      	cmp	r3, #0
 8001614:	da01      	bge.n	800161a <bmp280_get_comp_temp_32bit+0x78>
 8001616:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800161a:	131b      	asrs	r3, r3, #12
 800161c:	461a      	mov	r2, r3
             ((int32_t) dev->calib_param.dig_t3)) /
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8001624:	fb03 f302 	mul.w	r3, r3, r2
        var2 =
 8001628:	2b00      	cmp	r3, #0
 800162a:	da03      	bge.n	8001634 <bmp280_get_comp_temp_32bit+0x92>
 800162c:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001630:	441a      	add	r2, r3
 8001632:	4613      	mov	r3, r2
 8001634:	139b      	asrs	r3, r3, #14
 8001636:	617b      	str	r3, [r7, #20]
            16384;
        dev->calib_param.t_fine = var1 + var2;
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	441a      	add	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	3380      	adds	r3, #128	; 0x80
 800164e:	2b00      	cmp	r3, #0
 8001650:	da00      	bge.n	8001654 <bmp280_get_comp_temp_32bit+0xb2>
 8001652:	33ff      	adds	r3, #255	; 0xff
 8001654:	121b      	asrs	r3, r3, #8
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	601a      	str	r2, [r3, #0]
        rslt = BMP280_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	77fb      	strb	r3, [r7, #31]
 8001660:	e004      	b.n	800166c <bmp280_get_comp_temp_32bit+0xca>
    }
    else
    {
        *comp_temp = 0;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
        rslt = BMP280_E_32BIT_COMP_TEMP;
 8001668:	23f2      	movs	r3, #242	; 0xf2
 800166a:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800166c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <bmp280_get_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
int8_t bmp280_get_comp_temp_double(double *temperature, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 8001678:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800167c:	b08a      	sub	sp, #40	; 0x28
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f8ce 	bl	8001828 <null_ptr_check>
 800168c:	4603      	mov	r3, r0
 800168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001692:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001696:	2b00      	cmp	r3, #0
 8001698:	f040 80ac 	bne.w	80017f4 <bmp280_get_comp_temp_double+0x17c>
    {
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800169c:	68b8      	ldr	r0, [r7, #8]
 800169e:	f7fe ff61 	bl	8000564 <__aeabi_i2d>
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b5c      	ldr	r3, [pc, #368]	; (8001818 <bmp280_get_comp_temp_double+0x1a0>)
 80016a8:	f7ff f8f0 	bl	800088c <__aeabi_ddiv>
 80016ac:	4603      	mov	r3, r0
 80016ae:	460c      	mov	r4, r1
 80016b0:	4625      	mov	r5, r4
 80016b2:	461c      	mov	r4, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	8a1b      	ldrh	r3, [r3, #16]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff43 	bl	8000544 <__aeabi_ui2d>
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	4b56      	ldr	r3, [pc, #344]	; (800181c <bmp280_get_comp_temp_double+0x1a4>)
 80016c4:	f7ff f8e2 	bl	800088c <__aeabi_ddiv>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7fe fdfa 	bl	80002c8 <__aeabi_dsub>
 80016d4:	4603      	mov	r3, r0
 80016d6:	460c      	mov	r4, r1
 80016d8:	4625      	mov	r5, r4
 80016da:	461c      	mov	r4, r3
               ((double) dev->calib_param.dig_t2);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff3e 	bl	8000564 <__aeabi_i2d>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80016ec:	4620      	mov	r0, r4
 80016ee:	4629      	mov	r1, r5
 80016f0:	f7fe ffa2 	bl	8000638 <__aeabi_dmul>
 80016f4:	4603      	mov	r3, r0
 80016f6:	460c      	mov	r4, r1
 80016f8:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 =
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80016fc:	68b8      	ldr	r0, [r7, #8]
 80016fe:	f7fe ff31 	bl	8000564 <__aeabi_i2d>
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800170a:	f7ff f8bf 	bl	800088c <__aeabi_ddiv>
 800170e:	4603      	mov	r3, r0
 8001710:	460c      	mov	r4, r1
 8001712:	4625      	mov	r5, r4
 8001714:	461c      	mov	r4, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	8a1b      	ldrh	r3, [r3, #16]
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe ff12 	bl	8000544 <__aeabi_ui2d>
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	4b3e      	ldr	r3, [pc, #248]	; (8001820 <bmp280_get_comp_temp_double+0x1a8>)
 8001726:	f7ff f8b1 	bl	800088c <__aeabi_ddiv>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4620      	mov	r0, r4
 8001730:	4629      	mov	r1, r5
 8001732:	f7fe fdc9 	bl	80002c8 <__aeabi_dsub>
 8001736:	4603      	mov	r3, r0
 8001738:	460c      	mov	r4, r1
 800173a:	4625      	mov	r5, r4
 800173c:	461c      	mov	r4, r3
             (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 800173e:	68b8      	ldr	r0, [r7, #8]
 8001740:	f7fe ff10 	bl	8000564 <__aeabi_i2d>
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800174c:	f7ff f89e 	bl	800088c <__aeabi_ddiv>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4690      	mov	r8, r2
 8001756:	4699      	mov	r9, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	8a1b      	ldrh	r3, [r3, #16]
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fef1 	bl	8000544 <__aeabi_ui2d>
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <bmp280_get_comp_temp_double+0x1a8>)
 8001768:	f7ff f890 	bl	800088c <__aeabi_ddiv>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4640      	mov	r0, r8
 8001772:	4649      	mov	r1, r9
 8001774:	f7fe fda8 	bl	80002c8 <__aeabi_dsub>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 800177c:	4620      	mov	r0, r4
 800177e:	4629      	mov	r1, r5
 8001780:	f7fe ff5a 	bl	8000638 <__aeabi_dmul>
 8001784:	4603      	mov	r3, r0
 8001786:	460c      	mov	r4, r1
 8001788:	4625      	mov	r5, r4
 800178a:	461c      	mov	r4, r3
            ((double) dev->calib_param.dig_t3);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fee6 	bl	8000564 <__aeabi_i2d>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
        var2 =
 800179c:	4620      	mov	r0, r4
 800179e:	4629      	mov	r1, r5
 80017a0:	f7fe ff4a 	bl	8000638 <__aeabi_dmul>
 80017a4:	4603      	mov	r3, r0
 80017a6:	460c      	mov	r4, r1
 80017a8:	e9c7 3404 	strd	r3, r4, [r7, #16]
        dev->calib_param.t_fine = (int32_t) (var1 + var2);
 80017ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017b4:	f7fe fd8a 	bl	80002cc <__adddf3>
 80017b8:	4603      	mov	r3, r0
 80017ba:	460c      	mov	r4, r1
 80017bc:	4618      	mov	r0, r3
 80017be:	4621      	mov	r1, r4
 80017c0:	f7ff f9ea 	bl	8000b98 <__aeabi_d2iz>
 80017c4:	4602      	mov	r2, r0
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28
        *temperature = ((var1 + var2) / 5120.0);
 80017ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017d2:	f7fe fd7b 	bl	80002cc <__adddf3>
 80017d6:	4603      	mov	r3, r0
 80017d8:	460c      	mov	r4, r1
 80017da:	4618      	mov	r0, r3
 80017dc:	4621      	mov	r1, r4
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <bmp280_get_comp_temp_double+0x1ac>)
 80017e4:	f7ff f852 	bl	800088c <__aeabi_ddiv>
 80017e8:	4603      	mov	r3, r0
 80017ea:	460c      	mov	r4, r1
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	e9c2 3400 	strd	r3, r4, [r2]
 80017f2:	e009      	b.n	8001808 <bmp280_get_comp_temp_double+0x190>
    }
    else
    {
        *temperature = 0;
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	f04f 0400 	mov.w	r4, #0
 80017fe:	e9c2 3400 	strd	r3, r4, [r2]
        rslt = BMP280_E_DOUBLE_COMP_TEMP;
 8001802:	23ef      	movs	r3, #239	; 0xef
 8001804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8001808:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800180c:	4618      	mov	r0, r3
 800180e:	3728      	adds	r7, #40	; 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001816:	bf00      	nop
 8001818:	40d00000 	.word	0x40d00000
 800181c:	40900000 	.word	0x40900000
 8001820:	40c00000 	.word	0x40c00000
 8001824:	40b40000 	.word	0x40b40000

08001828 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00b      	beq.n	800184e <null_ptr_check+0x26>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d007      	beq.n	800184e <null_ptr_check+0x26>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <null_ptr_check+0x26>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 800184e:	23ff      	movs	r3, #255	; 0xff
 8001850:	73fb      	strb	r3, [r7, #15]
 8001852:	e001      	b.n	8001858 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8001876:	2301      	movs	r3, #1
 8001878:	75fb      	strb	r3, [r7, #23]
 800187a:	e016      	b.n	80018aa <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800187c:	7dfb      	ldrb	r3, [r7, #23]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	441a      	add	r2, r3
 8001882:	7dfb      	ldrb	r3, [r7, #23]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	3b01      	subs	r3, #1
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	440b      	add	r3, r1
 800188c:	7812      	ldrb	r2, [r2, #0]
 800188e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001890:	7dfb      	ldrb	r3, [r7, #23]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	441a      	add	r2, r3
 8001896:	7dfb      	ldrb	r3, [r7, #23]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4619      	mov	r1, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	440b      	add	r3, r1
 80018a0:	7812      	ldrb	r2, [r2, #0]
 80018a2:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	3301      	adds	r3, #1
 80018a8:	75fb      	strb	r3, [r7, #23]
 80018aa:	7dfa      	ldrb	r2, [r7, #23]
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d3e4      	bcc.n	800187c <interleave_data+0x14>
    }
}
 80018b2:	bf00      	nop
 80018b4:	371c      	adds	r7, #28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b08a      	sub	sp, #40	; 0x28
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	615a      	str	r2, [r3, #20]

    rslt = null_ptr_check(dev);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ffa5 	bl	8001828 <null_ptr_check>
 80018de:	4603      	mov	r3, r0
 80018e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 80018e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d17f      	bne.n	80019ec <get_calib_param+0x12e>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 80018ec:	f107 010c 	add.w	r1, r7, #12
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2218      	movs	r2, #24
 80018f4:	2088      	movs	r0, #136	; 0x88
 80018f6:	f7ff fc55 	bl	80011a4 <bmp280_get_regs>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8001900:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001904:	2b00      	cmp	r3, #0
 8001906:	d171      	bne.n	80019ec <get_calib_param+0x12e>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8001908:	7b7b      	ldrb	r3, [r7, #13]
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	b21a      	sxth	r2, r3
 800190e:	7b3b      	ldrb	r3, [r7, #12]
 8001910:	b21b      	sxth	r3, r3
 8001912:	4313      	orrs	r3, r2
 8001914:	b21b      	sxth	r3, r3
 8001916:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	b21a      	sxth	r2, r3
 8001922:	7bbb      	ldrb	r3, [r7, #14]
 8001924:	b21b      	sxth	r3, r3
 8001926:	4313      	orrs	r3, r2
 8001928:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 800192e:	7c7b      	ldrb	r3, [r7, #17]
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	b21a      	sxth	r2, r3
 8001934:	7c3b      	ldrb	r3, [r7, #16]
 8001936:	b21b      	sxth	r3, r3
 8001938:	4313      	orrs	r3, r2
 800193a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8001940:	7cfb      	ldrb	r3, [r7, #19]
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	b21a      	sxth	r2, r3
 8001946:	7cbb      	ldrb	r3, [r7, #18]
 8001948:	b21b      	sxth	r3, r3
 800194a:	4313      	orrs	r3, r2
 800194c:	b21b      	sxth	r3, r3
 800194e:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8001954:	7d7b      	ldrb	r3, [r7, #21]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	b21a      	sxth	r2, r3
 800195a:	7d3b      	ldrb	r3, [r7, #20]
 800195c:	b21b      	sxth	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8001966:	7dfb      	ldrb	r3, [r7, #23]
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	b21a      	sxth	r2, r3
 800196c:	7dbb      	ldrb	r3, [r7, #22]
 800196e:	b21b      	sxth	r3, r3
 8001970:	4313      	orrs	r3, r2
 8001972:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8001978:	7e7b      	ldrb	r3, [r7, #25]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	b21a      	sxth	r2, r3
 800197e:	7e3b      	ldrb	r3, [r7, #24]
 8001980:	b21b      	sxth	r3, r3
 8001982:	4313      	orrs	r3, r2
 8001984:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 800198a:	7efb      	ldrb	r3, [r7, #27]
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	b21a      	sxth	r2, r3
 8001990:	7ebb      	ldrb	r3, [r7, #26]
 8001992:	b21b      	sxth	r3, r3
 8001994:	4313      	orrs	r3, r2
 8001996:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 800199c:	7f7b      	ldrb	r3, [r7, #29]
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	b21a      	sxth	r2, r3
 80019a2:	7f3b      	ldrb	r3, [r7, #28]
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	4313      	orrs	r3, r2
 80019a8:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 80019ae:	7ffb      	ldrb	r3, [r7, #31]
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	b21a      	sxth	r2, r3
 80019b4:	7fbb      	ldrb	r3, [r7, #30]
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	4313      	orrs	r3, r2
 80019ba:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 80019c0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	b21a      	sxth	r2, r3
 80019c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	4313      	orrs	r3, r2
 80019d0:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 80019d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	b21a      	sxth	r2, r3
 80019de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	4313      	orrs	r3, r2
 80019e6:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 80019ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3728      	adds	r7, #40	; 0x28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001a06:	2300      	movs	r3, #0
 8001a08:	753b      	strb	r3, [r7, #20]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	757b      	strb	r3, [r7, #21]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8001a0e:	4b56      	ldr	r3, [pc, #344]	; (8001b68 <conf_sensor+0x170>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff07 	bl	8001828 <null_ptr_check>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8001a1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 8095 	bne.w	8001b52 <conf_sensor+0x15a>
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 8091 	beq.w	8001b52 <conf_sensor+0x15a>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8001a30:	f107 0114 	add.w	r1, r7, #20
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2202      	movs	r2, #2
 8001a38:	20f4      	movs	r0, #244	; 0xf4
 8001a3a:	f7ff fbb3 	bl	80011a4 <bmp280_get_regs>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8001a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f040 8086 	bne.w	8001b58 <conf_sensor+0x160>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fc4e 	bl	80012ee <bmp280_soft_reset>
 8001a52:	4603      	mov	r3, r0
 8001a54:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8001a56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d17c      	bne.n	8001b58 <conf_sensor+0x160>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 8001a5e:	7d3b      	ldrb	r3, [r7, #20]
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	b25a      	sxtb	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	015b      	lsls	r3, r3, #5
 8001a6e:	b25b      	sxtb	r3, r3
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b25b      	sxtb	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8001a78:	7d3b      	ldrb	r3, [r7, #20]
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	f023 031c 	bic.w	r3, r3, #28
 8001a80:	b25a      	sxtb	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	785b      	ldrb	r3, [r3, #1]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	b25b      	sxtb	r3, r3
 8001a8a:	f003 031c 	and.w	r3, r3, #28
 8001a8e:	b25b      	sxtb	r3, r3
 8001a90:	4313      	orrs	r3, r2
 8001a92:	b25b      	sxtb	r3, r3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8001a98:	7d7b      	ldrb	r3, [r7, #21]
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	b25a      	sxtb	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	789b      	ldrb	r3, [r3, #2]
 8001aa6:	015b      	lsls	r3, r3, #5
 8001aa8:	b25b      	sxtb	r3, r3
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b25b      	sxtb	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 8001ab2:	7d7b      	ldrb	r3, [r7, #21]
 8001ab4:	b25b      	sxtb	r3, r3
 8001ab6:	f023 031c 	bic.w	r3, r3, #28
 8001aba:	b25a      	sxtb	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	78db      	ldrb	r3, [r3, #3]
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	b25b      	sxtb	r3, r3
 8001ac4:	f003 031c 	and.w	r3, r3, #28
 8001ac8:	b25b      	sxtb	r3, r3
 8001aca:	4313      	orrs	r3, r2
 8001acc:	b25b      	sxtb	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 8001ad2:	7d7b      	ldrb	r3, [r7, #21]
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	b25a      	sxtb	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	791b      	ldrb	r3, [r3, #4]
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	b25b      	sxtb	r3, r3
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8001af0:	f107 0114 	add.w	r1, r7, #20
 8001af4:	f107 0010 	add.w	r0, r7, #16
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f7ff fb89 	bl	8001212 <bmp280_set_regs>
 8001b00:	4603      	mov	r3, r0
 8001b02:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8001b04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d125      	bne.n	8001b58 <conf_sensor+0x160>
                {
                    dev->conf = *conf;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	332c      	adds	r3, #44	; 0x2c
 8001b12:	6810      	ldr	r0, [r2, #0]
 8001b14:	6018      	str	r0, [r3, #0]
 8001b16:	7912      	ldrb	r2, [r2, #4]
 8001b18:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d01b      	beq.n	8001b58 <conf_sensor+0x160>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8001b20:	7d3b      	ldrb	r3, [r7, #20]
 8001b22:	b25b      	sxtb	r3, r3
 8001b24:	f023 0303 	bic.w	r3, r3, #3
 8001b28:	b25a      	sxtb	r2, r3
 8001b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	b25b      	sxtb	r3, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b25b      	sxtb	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 8001b3c:	f107 0114 	add.w	r1, r7, #20
 8001b40:	f107 0010 	add.w	r0, r7, #16
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f7ff fb63 	bl	8001212 <bmp280_set_regs>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8001b50:	e002      	b.n	8001b58 <conf_sensor+0x160>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001b52:	23ff      	movs	r3, #255	; 0xff
 8001b54:	75fb      	strb	r3, [r7, #23]
 8001b56:	e000      	b.n	8001b5a <conf_sensor+0x162>
        if (rslt == BMP280_OK)
 8001b58:	bf00      	nop
    }

    return rslt;
 8001b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	0800c0a0 	.word	0x0800c0a0

08001b6c <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	dd03      	ble.n	8001b88 <st_check_boundaries+0x1c>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a15      	ldr	r2, [pc, #84]	; (8001bd8 <st_check_boundaries+0x6c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	dd09      	ble.n	8001b9c <st_check_boundaries+0x30>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	dd03      	ble.n	8001b96 <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	4a11      	ldr	r2, [pc, #68]	; (8001bd8 <st_check_boundaries+0x6c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	dd02      	ble.n	8001b9c <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001b96:	23f4      	movs	r3, #244	; 0xf4
 8001b98:	73fb      	strb	r3, [r7, #15]
 8001b9a:	e015      	b.n	8001bc8 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	dd03      	ble.n	8001baa <st_check_boundaries+0x3e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <st_check_boundaries+0x6c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	dd02      	ble.n	8001bb0 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 8001baa:	23f6      	movs	r3, #246	; 0xf6
 8001bac:	73fb      	strb	r3, [r7, #15]
 8001bae:	e00b      	b.n	8001bc8 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	dd03      	ble.n	8001bbe <st_check_boundaries+0x52>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <st_check_boundaries+0x6c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	dd02      	ble.n	8001bc4 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8001bbe:	23f5      	movs	r3, #245	; 0xf5
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	e001      	b.n	8001bc8 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	000fffef 	.word	0x000fffef

08001bdc <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001be2:	463b      	mov	r3, r7
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001bea:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <MX_DAC_Init+0x4c>)
 8001bec:	4a0f      	ldr	r2, [pc, #60]	; (8001c2c <MX_DAC_Init+0x50>)
 8001bee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001bf0:	480d      	ldr	r0, [pc, #52]	; (8001c28 <MX_DAC_Init+0x4c>)
 8001bf2:	f001 ff98 	bl	8003b26 <HAL_DAC_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001bfc:	f000 fe9e 	bl	800293c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001c08:	463b      	mov	r3, r7
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4806      	ldr	r0, [pc, #24]	; (8001c28 <MX_DAC_Init+0x4c>)
 8001c10:	f001 ffff 	bl	8003c12 <HAL_DAC_ConfigChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001c1a:	f000 fe8f 	bl	800293c <Error_Handler>
  }

}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000320 	.word	0x20000320
 8001c2c:	40007400 	.word	0x40007400

08001c30 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a32      	ldr	r2, [pc, #200]	; (8001d18 <HAL_DAC_MspInit+0xe8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d15d      	bne.n	8001d0e <HAL_DAC_MspInit+0xde>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001c52:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <HAL_DAC_MspInit+0xec>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a31      	ldr	r2, [pc, #196]	; (8001d1c <HAL_DAC_MspInit+0xec>)
 8001c58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <HAL_DAC_MspInit+0xec>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	4b2c      	ldr	r3, [pc, #176]	; (8001d1c <HAL_DAC_MspInit+0xec>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a2b      	ldr	r2, [pc, #172]	; (8001d1c <HAL_DAC_MspInit+0xec>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <HAL_DAC_MspInit+0xec>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = OSC_AOUT_Pin;
 8001c82:	2310      	movs	r3, #16
 8001c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c86:	2303      	movs	r3, #3
 8001c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OSC_AOUT_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4822      	ldr	r0, [pc, #136]	; (8001d20 <HAL_DAC_MspInit+0xf0>)
 8001c96:	f002 fb1d 	bl	80042d4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001c9a:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001c9c:	4a22      	ldr	r2, [pc, #136]	; (8001d28 <HAL_DAC_MspInit+0xf8>)
 8001c9e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001ca2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001ca6:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001caa:	2240      	movs	r2, #64	; 0x40
 8001cac:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cba:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001cbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cc2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001cc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cca:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001cd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cda:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001ce2:	4810      	ldr	r0, [pc, #64]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001ce4:	f001 ffec 	bl	8003cc0 <HAL_DMA_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 8001cee:	f000 fe25 	bl	800293c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <HAL_DAC_MspInit+0xf4>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2100      	movs	r1, #0
 8001d02:	2036      	movs	r0, #54	; 0x36
 8001d04:	f001 fed9 	bl	8003aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d08:	2036      	movs	r0, #54	; 0x36
 8001d0a:	f001 fef2 	bl	8003af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3728      	adds	r7, #40	; 0x28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40007400 	.word	0x40007400
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020000 	.word	0x40020000
 8001d24:	200002c0 	.word	0x200002c0
 8001d28:	40026088 	.word	0x40026088

08001d2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <MX_DMA_Init+0x60>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a15      	ldr	r2, [pc, #84]	; (8001d8c <MX_DMA_Init+0x60>)
 8001d38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <MX_DMA_Init+0x60>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <MX_DMA_Init+0x60>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a0f      	ldr	r2, [pc, #60]	; (8001d8c <MX_DMA_Init+0x60>)
 8001d50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <MX_DMA_Init+0x60>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	2010      	movs	r0, #16
 8001d68:	f001 fea7 	bl	8003aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d6c:	2010      	movs	r0, #16
 8001d6e:	f001 fec0 	bl	8003af2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	2038      	movs	r0, #56	; 0x38
 8001d78:	f001 fe9f 	bl	8003aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d7c:	2038      	movs	r0, #56	; 0x38
 8001d7e:	f001 feb8 	bl	8003af2 <HAL_NVIC_EnableIRQ>

}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800

08001d90 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08e      	sub	sp, #56	; 0x38
 8001d94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001da6:	4bb3      	ldr	r3, [pc, #716]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4ab2      	ldr	r2, [pc, #712]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001dac:	f043 0310 	orr.w	r3, r3, #16
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4bb0      	ldr	r3, [pc, #704]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	623b      	str	r3, [r7, #32]
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbe:	4bad      	ldr	r3, [pc, #692]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4aac      	ldr	r2, [pc, #688]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4baa      	ldr	r3, [pc, #680]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dd6:	4ba7      	ldr	r3, [pc, #668]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4aa6      	ldr	r2, [pc, #664]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001ddc:	f043 0320 	orr.w	r3, r3, #32
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4ba4      	ldr	r3, [pc, #656]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dee:	4ba1      	ldr	r3, [pc, #644]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4aa0      	ldr	r2, [pc, #640]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b9e      	ldr	r3, [pc, #632]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	4b9b      	ldr	r3, [pc, #620]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a9a      	ldr	r2, [pc, #616]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b98      	ldr	r3, [pc, #608]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	4b95      	ldr	r3, [pc, #596]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a94      	ldr	r2, [pc, #592]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b92      	ldr	r3, [pc, #584]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e36:	4b8f      	ldr	r3, [pc, #572]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a8e      	ldr	r2, [pc, #568]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b8c      	ldr	r3, [pc, #560]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4e:	4b89      	ldr	r3, [pc, #548]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a88      	ldr	r2, [pc, #544]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e54:	f043 0308 	orr.w	r3, r3, #8
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b86      	ldr	r3, [pc, #536]	; (8002074 <MX_GPIO_Init+0x2e4>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS2_Pin|BMP280_CS1_Pin, GPIO_PIN_SET);
 8001e66:	2201      	movs	r2, #1
 8001e68:	2118      	movs	r1, #24
 8001e6a:	4883      	ldr	r0, [pc, #524]	; (8002078 <MX_GPIO_Init+0x2e8>)
 8001e6c:	f002 fbdc 	bl	8004628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DISP_F_Pin|DISP_E_Pin|DISP_2_Pin|DISP_1_Pin
 8001e70:	2200      	movs	r2, #0
 8001e72:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8001e76:	4881      	ldr	r0, [pc, #516]	; (800207c <MX_GPIO_Init+0x2ec>)
 8001e78:	f002 fbd6 	bl	8004628 <HAL_GPIO_WritePin>
                          |DISP_3_Pin|DISP_D_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISP_H_Pin|LCD_RS_Pin|LAMP_TRIAC_Pin, GPIO_PIN_RESET);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2149      	movs	r1, #73	; 0x49
 8001e80:	487f      	ldr	r0, [pc, #508]	; (8002080 <MX_GPIO_Init+0x2f0>)
 8001e82:	f002 fbd1 	bl	8004628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2108      	movs	r1, #8
 8001e8a:	487e      	ldr	r0, [pc, #504]	; (8002084 <MX_GPIO_Init+0x2f4>)
 8001e8c:	f002 fbcc 	bl	8004628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 8001e90:	2200      	movs	r2, #0
 8001e92:	f644 4181 	movw	r1, #19585	; 0x4c81
 8001e96:	487c      	ldr	r0, [pc, #496]	; (8002088 <MX_GPIO_Init+0x2f8>)
 8001e98:	f002 fbc6 	bl	8004628 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISP_A_Pin|DISP_4_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2143      	movs	r1, #67	; 0x43
 8001ea0:	487a      	ldr	r0, [pc, #488]	; (800208c <MX_GPIO_Init+0x2fc>)
 8001ea2:	f002 fbc1 	bl	8004628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1EX_GPIO_Port, LD1EX_Pin, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eac:	4872      	ldr	r0, [pc, #456]	; (8002078 <MX_GPIO_Init+0x2e8>)
 8001eae:	f002 fbbb 	bl	8004628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISP_C_Pin|DISP_B_Pin|DISP_G_Pin|LCD_D4_Pin
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	21fb      	movs	r1, #251	; 0xfb
 8001eb6:	4876      	ldr	r0, [pc, #472]	; (8002090 <MX_GPIO_Init+0x300>)
 8001eb8:	f002 fbb6 	bl	8004628 <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP280_CS2_Pin|BMP280_CS1_Pin;
 8001ebc:	2318      	movs	r3, #24
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4869      	ldr	r0, [pc, #420]	; (8002078 <MX_GPIO_Init+0x2e8>)
 8001ed4:	f002 f9fe 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ede:	4b6d      	ldr	r3, [pc, #436]	; (8002094 <MX_GPIO_Init+0x304>)
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eea:	4619      	mov	r1, r3
 8001eec:	4864      	ldr	r0, [pc, #400]	; (8002080 <MX_GPIO_Init+0x2f0>)
 8001eee:	f002 f9f1 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = DISP_F_Pin|DISP_E_Pin|DISP_D_Pin;
 8001ef2:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ef8:	2311      	movs	r3, #17
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001efc:	2301      	movs	r3, #1
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f08:	4619      	mov	r1, r3
 8001f0a:	485c      	ldr	r0, [pc, #368]	; (800207c <MX_GPIO_Init+0x2ec>)
 8001f0c:	f002 f9e2 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = DISP_2_Pin|DISP_1_Pin|DISP_3_Pin;
 8001f10:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f16:	2301      	movs	r3, #1
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f26:	4619      	mov	r1, r3
 8001f28:	4854      	ldr	r0, [pc, #336]	; (800207c <MX_GPIO_Init+0x2ec>)
 8001f2a:	f002 f9d3 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISP_H_Pin;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f32:	2311      	movs	r3, #17
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DISP_H_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f42:	4619      	mov	r1, r3
 8001f44:	484e      	ldr	r0, [pc, #312]	; (8002080 <MX_GPIO_Init+0x2f0>)
 8001f46:	f002 f9c5 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f4a:	2332      	movs	r3, #50	; 0x32
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f56:	2303      	movs	r3, #3
 8001f58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f5a:	230b      	movs	r3, #11
 8001f5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f62:	4619      	mov	r1, r3
 8001f64:	4846      	ldr	r0, [pc, #280]	; (8002080 <MX_GPIO_Init+0x2f0>)
 8001f66:	f002 f9b5 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7e:	4619      	mov	r1, r3
 8001f80:	483f      	ldr	r0, [pc, #252]	; (8002080 <MX_GPIO_Init+0x2f0>)
 8001f82:	f002 f9a7 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001f86:	2306      	movs	r3, #6
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f96:	230b      	movs	r3, #11
 8001f98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4838      	ldr	r0, [pc, #224]	; (8002084 <MX_GPIO_Init+0x2f4>)
 8001fa2:	f002 f997 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001faa:	2301      	movs	r3, #1
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8001fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4831      	ldr	r0, [pc, #196]	; (8002084 <MX_GPIO_Init+0x2f4>)
 8001fbe:	f002 f989 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX1_Btn_Pin;
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fc6:	4b34      	ldr	r3, [pc, #208]	; (8002098 <MX_GPIO_Init+0x308>)
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EX1_Btn_GPIO_Port, &GPIO_InitStruct);
 8001fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	482b      	ldr	r0, [pc, #172]	; (8002084 <MX_GPIO_Init+0x2f4>)
 8001fd6:	f002 f97d 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 8001fda:	f644 4381 	movw	r3, #19585	; 0x4c81
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4825      	ldr	r0, [pc, #148]	; (8002088 <MX_GPIO_Init+0x2f8>)
 8001ff4:	f002 f96e 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX2_Btn_Pin;
 8001ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ffe:	4b25      	ldr	r3, [pc, #148]	; (8002094 <MX_GPIO_Init+0x304>)
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EX2_Btn_GPIO_Port, &GPIO_InitStruct);
 8002006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200a:	4619      	mov	r1, r3
 800200c:	481b      	ldr	r0, [pc, #108]	; (800207c <MX_GPIO_Init+0x2ec>)
 800200e:	f002 f961 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISP_A_Pin;
 8002012:	2301      	movs	r3, #1
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002016:	2311      	movs	r3, #17
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800201a:	2301      	movs	r3, #1
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DISP_A_GPIO_Port, &GPIO_InitStruct);
 8002022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002026:	4619      	mov	r1, r3
 8002028:	4818      	ldr	r0, [pc, #96]	; (800208c <MX_GPIO_Init+0x2fc>)
 800202a:	f002 f953 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = DISP_4_Pin|USB_PowerSwitchOn_Pin;
 800202e:	2342      	movs	r3, #66	; 0x42
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002032:	2301      	movs	r3, #1
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800203e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002042:	4619      	mov	r1, r3
 8002044:	4811      	ldr	r0, [pc, #68]	; (800208c <MX_GPIO_Init+0x2fc>)
 8002046:	f002 f945 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1EX_Pin;
 800204a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD1EX_GPIO_Port, &GPIO_InitStruct);
 800205c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002060:	4619      	mov	r1, r3
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <MX_GPIO_Init+0x2e8>)
 8002064:	f002 f936 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	e014      	b.n	800209c <MX_GPIO_Init+0x30c>
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800
 8002078:	40021000 	.word	0x40021000
 800207c:	40021400 	.word	0x40021400
 8002080:	40020800 	.word	0x40020800
 8002084:	40020000 	.word	0x40020000
 8002088:	40020400 	.word	0x40020400
 800208c:	40021800 	.word	0x40021800
 8002090:	40020c00 	.word	0x40020c00
 8002094:	10110000 	.word	0x10110000
 8002098:	10210000 	.word	0x10210000
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020a6:	230b      	movs	r3, #11
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80020aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ae:	4619      	mov	r1, r3
 80020b0:	4851      	ldr	r0, [pc, #324]	; (80021f8 <MX_GPIO_Init+0x468>)
 80020b2:	f002 f90f 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 80020b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020bc:	4b4f      	ldr	r3, [pc, #316]	; (80021fc <MX_GPIO_Init+0x46c>)
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 80020c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c8:	4619      	mov	r1, r3
 80020ca:	484b      	ldr	r0, [pc, #300]	; (80021f8 <MX_GPIO_Init+0x468>)
 80020cc:	f002 f902 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 80020d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020d6:	4b4a      	ldr	r3, [pc, #296]	; (8002200 <MX_GPIO_Init+0x470>)
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e2:	4619      	mov	r1, r3
 80020e4:	4847      	ldr	r0, [pc, #284]	; (8002204 <MX_GPIO_Init+0x474>)
 80020e6:	f002 f8f5 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 80020ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 80020f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fc:	4619      	mov	r1, r3
 80020fe:	4841      	ldr	r0, [pc, #260]	; (8002204 <MX_GPIO_Init+0x474>)
 8002100:	f002 f8e8 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002108:	2300      	movs	r3, #0
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002114:	4619      	mov	r1, r3
 8002116:	483c      	ldr	r0, [pc, #240]	; (8002208 <MX_GPIO_Init+0x478>)
 8002118:	f002 f8dc 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 800211c:	2340      	movs	r3, #64	; 0x40
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002120:	2301      	movs	r3, #1
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002128:	2302      	movs	r3, #2
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002130:	4619      	mov	r1, r3
 8002132:	4836      	ldr	r0, [pc, #216]	; (800220c <MX_GPIO_Init+0x47c>)
 8002134:	f002 f8ce 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002138:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002146:	2303      	movs	r3, #3
 8002148:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800214a:	230a      	movs	r3, #10
 800214c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002152:	4619      	mov	r1, r3
 8002154:	482e      	ldr	r0, [pc, #184]	; (8002210 <MX_GPIO_Init+0x480>)
 8002156:	f002 f8bd 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800215a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002160:	2300      	movs	r3, #0
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216c:	4619      	mov	r1, r3
 800216e:	4828      	ldr	r0, [pc, #160]	; (8002210 <MX_GPIO_Init+0x480>)
 8002170:	f002 f8b0 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DISP_C_Pin|DISP_B_Pin|DISP_G_Pin;
 8002174:	230b      	movs	r3, #11
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002178:	2311      	movs	r3, #17
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800217c:	2301      	movs	r3, #1
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002188:	4619      	mov	r1, r3
 800218a:	481e      	ldr	r0, [pc, #120]	; (8002204 <MX_GPIO_Init+0x474>)
 800218c:	f002 f8a2 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 8002190:	23f0      	movs	r3, #240	; 0xf0
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002194:	2301      	movs	r3, #1
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a4:	4619      	mov	r1, r3
 80021a6:	4817      	ldr	r0, [pc, #92]	; (8002204 <MX_GPIO_Init+0x474>)
 80021a8:	f002 f894 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80021ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ba:	2303      	movs	r3, #3
 80021bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021be:	230b      	movs	r3, #11
 80021c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c6:	4619      	mov	r1, r3
 80021c8:	480f      	ldr	r0, [pc, #60]	; (8002208 <MX_GPIO_Init+0x478>)
 80021ca:	f002 f883 	bl	80042d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	2017      	movs	r0, #23
 80021d4:	f001 fc71 	bl	8003aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80021d8:	2017      	movs	r0, #23
 80021da:	f001 fc8a 	bl	8003af2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	2028      	movs	r0, #40	; 0x28
 80021e4:	f001 fc69 	bl	8003aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021e8:	2028      	movs	r0, #40	; 0x28
 80021ea:	f001 fc82 	bl	8003af2 <HAL_NVIC_EnableIRQ>

}
 80021ee:	bf00      	nop
 80021f0:	3738      	adds	r7, #56	; 0x38
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40020400 	.word	0x40020400
 80021fc:	10110000 	.word	0x10110000
 8002200:	10210000 	.word	0x10210000
 8002204:	40020c00 	.word	0x40020c00
 8002208:	40021800 	.word	0x40021800
 800220c:	40020800 	.word	0x40020800
 8002210:	40020000 	.word	0x40020000

08002214 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <MX_I2C1_Init+0x74>)
 800221a:	4a1c      	ldr	r2, [pc, #112]	; (800228c <MX_I2C1_Init+0x78>)
 800221c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <MX_I2C1_Init+0x74>)
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <MX_I2C1_Init+0x7c>)
 8002222:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <MX_I2C1_Init+0x74>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <MX_I2C1_Init+0x74>)
 800222c:	2201      	movs	r2, #1
 800222e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002230:	4b15      	ldr	r3, [pc, #84]	; (8002288 <MX_I2C1_Init+0x74>)
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <MX_I2C1_Init+0x74>)
 8002238:	2200      	movs	r2, #0
 800223a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <MX_I2C1_Init+0x74>)
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_I2C1_Init+0x74>)
 8002244:	2200      	movs	r2, #0
 8002246:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <MX_I2C1_Init+0x74>)
 800224a:	2200      	movs	r2, #0
 800224c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800224e:	480e      	ldr	r0, [pc, #56]	; (8002288 <MX_I2C1_Init+0x74>)
 8002250:	f002 fa28 	bl	80046a4 <HAL_I2C_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800225a:	f000 fb6f 	bl	800293c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800225e:	2100      	movs	r1, #0
 8002260:	4809      	ldr	r0, [pc, #36]	; (8002288 <MX_I2C1_Init+0x74>)
 8002262:	f002 faaf 	bl	80047c4 <HAL_I2CEx_ConfigAnalogFilter>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800226c:	f000 fb66 	bl	800293c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002270:	2100      	movs	r1, #0
 8002272:	4805      	ldr	r0, [pc, #20]	; (8002288 <MX_I2C1_Init+0x74>)
 8002274:	f002 faf1 	bl	800485a <HAL_I2CEx_ConfigDigitalFilter>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800227e:	f000 fb5d 	bl	800293c <Error_Handler>
  }

}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000334 	.word	0x20000334
 800228c:	40005400 	.word	0x40005400
 8002290:	20404768 	.word	0x20404768

08002294 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a17      	ldr	r2, [pc, #92]	; (8002310 <HAL_I2C_MspInit+0x7c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d128      	bne.n	8002308 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <HAL_I2C_MspInit+0x80>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a16      	ldr	r2, [pc, #88]	; (8002314 <HAL_I2C_MspInit+0x80>)
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b14      	ldr	r3, [pc, #80]	; (8002314 <HAL_I2C_MspInit+0x80>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 80022ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d4:	2312      	movs	r3, #18
 80022d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d8:	2301      	movs	r3, #1
 80022da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022dc:	2303      	movs	r3, #3
 80022de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022e0:	2304      	movs	r3, #4
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	4619      	mov	r1, r3
 80022ea:	480b      	ldr	r0, [pc, #44]	; (8002318 <HAL_I2C_MspInit+0x84>)
 80022ec:	f001 fff2 	bl	80042d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_I2C_MspInit+0x80>)
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	4a07      	ldr	r2, [pc, #28]	; (8002314 <HAL_I2C_MspInit+0x80>)
 80022f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022fa:	6413      	str	r3, [r2, #64]	; 0x40
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_I2C_MspInit+0x80>)
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002308:	bf00      	nop
 800230a:	3728      	adds	r7, #40	; 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40005400 	.word	0x40005400
 8002314:	40023800 	.word	0x40023800
 8002318:	40020400 	.word	0x40020400

0800231c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void  HAL_UART_RxCpltCallback(UART_HandleTypeDef  *huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a17      	ldr	r2, [pc, #92]	; (8002388 <HAL_UART_RxCpltCallback+0x6c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d122      	bne.n	8002374 <HAL_UART_RxCpltCallback+0x58>
	{
		temporary = ((int)rx_buffer [2] - 48) +   ((int)rx_buffer [1] - 48)*10 + ((int)rx_buffer [0] - 48)*100;
 800232e:	4b17      	ldr	r3, [pc, #92]	; (800238c <HAL_UART_RxCpltCallback+0x70>)
 8002330:	789b      	ldrb	r3, [r3, #2]
 8002332:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <HAL_UART_RxCpltCallback+0x70>)
 8002338:	785b      	ldrb	r3, [r3, #1]
 800233a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	18ca      	adds	r2, r1, r3
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <HAL_UART_RxCpltCallback+0x70>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	3b30      	subs	r3, #48	; 0x30
 800234e:	2164      	movs	r1, #100	; 0x64
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <HAL_UART_RxCpltCallback+0x74>)
 8002358:	6013      	str	r3, [r2, #0]
		inc = temporary*10;
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <HAL_UART_RxCpltCallback+0x74>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_UART_RxCpltCallback+0x78>)
 8002370:	edc3 7a00 	vstr	s15, [r3]
	}
	HAL_UART_Receive_IT   (&huart3  , (uint8_t*) rx_buffer  , 3); //Zadawanie wypełnienia  PWM do tranzystora [0 3.3V]
 8002374:	2203      	movs	r2, #3
 8002376:	4905      	ldr	r1, [pc, #20]	; (800238c <HAL_UART_RxCpltCallback+0x70>)
 8002378:	4807      	ldr	r0, [pc, #28]	; (8002398 <HAL_UART_RxCpltCallback+0x7c>)
 800237a:	f005 fa25 	bl	80077c8 <HAL_UART_Receive_IT>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40004800 	.word	0x40004800
 800238c:	20000380 	.word	0x20000380
 8002390:	20000388 	.word	0x20000388
 8002394:	20000000 	.word	0x20000000
 8002398:	20000534 	.word	0x20000534

0800239c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800239c:	b5b0      	push	{r4, r5, r7, lr}
 800239e:	b0a2      	sub	sp, #136	; 0x88
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
struct bmp280_dev bmp280_1 = {
 80023a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023a6:	2234      	movs	r2, #52	; 0x34
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f006 f92c 	bl	8008608 <memset>
 80023b0:	2301      	movs	r3, #1
 80023b2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80023b6:	4b9c      	ldr	r3, [pc, #624]	; (8002628 <main+0x28c>)
 80023b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80023ba:	4b9c      	ldr	r3, [pc, #624]	; (800262c <main+0x290>)
 80023bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023be:	4b9c      	ldr	r3, [pc, #624]	; (8002630 <main+0x294>)
 80023c0:	653b      	str	r3, [r7, #80]	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023c2:	f000 ff98 	bl	80032f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023c6:	f000 f94d 	bl	8002664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023ca:	f7ff fce1 	bl	8001d90 <MX_GPIO_Init>
  MX_DMA_Init();
 80023ce:	f7ff fcad 	bl	8001d2c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80023d2:	f000 feeb 	bl	80031ac <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80023d6:	f000 fc31 	bl	8002c3c <MX_TIM2_Init>
  MX_TIM3_Init();
 80023da:	f000 fc85 	bl	8002ce8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80023de:	f000 fd1b 	bl	8002e18 <MX_TIM4_Init>
  MX_I2C1_Init();
 80023e2:	f7ff ff17 	bl	8002214 <MX_I2C1_Init>
  MX_SPI4_Init();
 80023e6:	f000 fab1 	bl	800294c <MX_SPI4_Init>
  MX_ADC1_Init();
 80023ea:	f7fe fded 	bl	8000fc8 <MX_ADC1_Init>
  MX_DAC_Init();
 80023ee:	f7ff fbf5 	bl	8001bdc <MX_DAC_Init>
  MX_TIM6_Init();
 80023f2:	f000 fd65 	bl	8002ec0 <MX_TIM6_Init>
  MX_TIM7_Init();
 80023f6:	f000 fd99 	bl	8002f2c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT   (&huart3  , (uint8_t*) rx_buffer  , 3);
 80023fa:	2203      	movs	r2, #3
 80023fc:	498d      	ldr	r1, [pc, #564]	; (8002634 <main+0x298>)
 80023fe:	488e      	ldr	r0, [pc, #568]	; (8002638 <main+0x29c>)
 8002400:	f005 f9e2 	bl	80077c8 <HAL_UART_Receive_IT>


  HAL_StatusTypeDef tx_status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

  HAL_TIM_Base_Init(&htim3); // Inicjalizacja timera 3 odpowiedzialnego za PWM
 800240a:	488c      	ldr	r0, [pc, #560]	; (800263c <main+0x2a0>)
 800240c:	f004 f884 	bl	8006518 <HAL_TIM_Base_Init>

  //Initialize BMP280 sensor
  int8_t rslt;
  struct bmp280_config conf;

  rslt = bmp280_init(&bmp280_1);
 8002410:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe ff8f 	bl	8001338 <bmp280_init>
 800241a:	4603      	mov	r3, r0
 800241c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp280_get_config(&conf, &bmp280_1);
 8002420:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002424:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe ffea 	bl	8001404 <bmp280_get_config>
 8002430:	4603      	mov	r3, r0
 8002432:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
  conf.filter = BMP280_FILTER_OFF;
 8002436:	2300      	movs	r3, #0
 8002438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  /* Temperature oversampling set at 4x */
  conf.os_temp = BMP280_OS_1X;
 800243c:	2301      	movs	r3, #1
 800243e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  /* Pressure over sampling none (disabling pressure measurement) */
  conf.os_pres = BMP280_OS_1X;
 8002442:	2301      	movs	r3, #1
 8002444:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

  /* Setting the output data rate as 4HZ(250ms) */
  conf.odr = BMP280_ODR_1000_MS;
 8002448:	2305      	movs	r3, #5
 800244a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

  rslt = bmp280_set_config(&conf, &bmp280_1);
 800244e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff f825 	bl	80014a8 <bmp280_set_config>
 800245e:	4603      	mov	r3, r0
 8002460:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

  rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp280_1);
 8002464:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002468:	4619      	mov	r1, r3
 800246a:	2003      	movs	r0, #3
 800246c:	f7ff f82b 	bl	80014c6 <bmp280_set_power_mode>
 8002470:	4603      	mov	r3, r0
 8002472:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
  char str[4];

 // HAL_TIM_Base_Start(&htim3);
  //__HAL_TIM_SET_AUTORELOAD  (&htim3  , 999);

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Start PWM
 8002476:	210c      	movs	r1, #12
 8002478:	4870      	ldr	r0, [pc, #448]	; (800263c <main+0x2a0>)
 800247a:	f004 f8ad 	bl	80065d8 <HAL_TIM_PWM_Start>

  arm_pid_instance_f32 PID;

  PID.Kp = K_P_CMSIS;
 800247e:	4b70      	ldr	r3, [pc, #448]	; (8002640 <main+0x2a4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	61bb      	str	r3, [r7, #24]
  PID.Ki = K_I_CMSIS;
 8002484:	4b6f      	ldr	r3, [pc, #444]	; (8002644 <main+0x2a8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	61fb      	str	r3, [r7, #28]
  PID.Kd = K_D_CMSIS;
 800248a:	4b6f      	ldr	r3, [pc, #444]	; (8002648 <main+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	623b      	str	r3, [r7, #32]

  arm_pid_init_f32(&PID, 1); //Inicjalizacja PID
 8002490:	463b      	mov	r3, r7
 8002492:	2101      	movs	r1, #1
 8002494:	4618      	mov	r0, r3
 8002496:	f006 f86b 	bl	8008570 <arm_pid_init_f32>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Read BMP280 sensor
      /* Reading the raw data from sensor */
      rslt = bmp280_get_uncomp_data(&bmp280_1_data, &bmp280_1);
 800249a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800249e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff f82d 	bl	8001504 <bmp280_get_uncomp_data>
 80024aa:	4603      	mov	r3, r0
 80024ac:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

      /* Getting the 32 bit compensated temperature */
      rslt = bmp280_get_comp_temp_32bit(&temp32, bmp280_1_data.uncomp_temp, &bmp280_1);
 80024b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80024b2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80024b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f871 	bl	80015a2 <bmp280_get_comp_temp_32bit>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

      /* Getting the compensated temperature as floating point value */
      rslt = bmp280_get_comp_temp_double(&temp, bmp280_1_data.uncomp_temp, &bmp280_1);
 80024c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80024c8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80024cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff f8d1 	bl	8001678 <bmp280_get_comp_temp_double>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

      /* Sleep time between measurements = BMP280_ODR_250_MS */
       bmp280_1.delay_ms(1000);
 80024dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024e2:	4798      	blx	r3

       pid_error = temp - inc; //blad
 80024e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024e8:	4b58      	ldr	r3, [pc, #352]	; (800264c <main+0x2b0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe f84b 	bl	8000588 <__aeabi_f2d>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4620      	mov	r0, r4
 80024f8:	4629      	mov	r1, r5
 80024fa:	f7fd fee5 	bl	80002c8 <__aeabi_dsub>
 80024fe:	4603      	mov	r3, r0
 8002500:	460c      	mov	r4, r1
 8002502:	4618      	mov	r0, r3
 8002504:	4621      	mov	r1, r4
 8002506:	f7fe fb8f 	bl	8000c28 <__aeabi_d2f>
 800250a:	4602      	mov	r2, r0
 800250c:	4b50      	ldr	r3, [pc, #320]	; (8002650 <main+0x2b4>)
 800250e:	601a      	str	r2, [r3, #0]
       pid_error_abs = abs(pid_error);
 8002510:	4b4f      	ldr	r3, [pc, #316]	; (8002650 <main+0x2b4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe f837 	bl	8000588 <__aeabi_f2d>
 800251a:	4603      	mov	r3, r0
 800251c:	460c      	mov	r4, r1
 800251e:	ec44 3b10 	vmov	d0, r3, r4
 8002522:	f006 f843 	bl	80085ac <abs>
 8002526:	ee07 0a90 	vmov	s15, r0
 800252a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800252e:	4b49      	ldr	r3, [pc, #292]	; (8002654 <main+0x2b8>)
 8002530:	edc3 7a00 	vstr	s15, [r3]
       duty = arm_pid_f32(&PID, pid_error_abs); //wypelnienie PWM
 8002534:	4b47      	ldr	r3, [pc, #284]	; (8002654 <main+0x2b8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	463a      	mov	r2, r7
 800253a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800253e:	67fb      	str	r3, [r7, #124]	; 0x7c
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002540:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002544:	ed93 7a00 	vldr	s14, [r3]
 8002548:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800254c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002550:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002554:	edd3 6a01 	vldr	s13, [r3, #4]
 8002558:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800255c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002560:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002564:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002568:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800256c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002570:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002574:	edd3 7a04 	vldr	s15, [r3, #16]
 8002578:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800257c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002580:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002584:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800258c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    /* Update state */
    S->state[1] = S->state[0];
 8002590:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800259a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800259c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80025a2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80025a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80025aa:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80025ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ae:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <main+0x2bc>)
 80025b0:	6013      	str	r3, [r2, #0]

       if (duty > 100) {
 80025b2:	4b29      	ldr	r3, [pc, #164]	; (8002658 <main+0x2bc>)
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800265c <main+0x2c0>
 80025bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c4:	dd03      	ble.n	80025ce <main+0x232>
                       duty = 100;
 80025c6:	4b24      	ldr	r3, [pc, #144]	; (8002658 <main+0x2bc>)
 80025c8:	4a25      	ldr	r2, [pc, #148]	; (8002660 <main+0x2c4>)
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	e00b      	b.n	80025e6 <main+0x24a>
                   } else if (duty < 0) {
 80025ce:	4b22      	ldr	r3, [pc, #136]	; (8002658 <main+0x2bc>)
 80025d0:	edd3 7a00 	vldr	s15, [r3]
 80025d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025dc:	d503      	bpl.n	80025e6 <main+0x24a>
                       duty = 0;
 80025de:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <main+0x2bc>)
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
                   }

       if (pid_error >0) {
 80025e6:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <main+0x2b4>)
 80025e8:	edd3 7a00 	vldr	s15, [r3]
 80025ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f4:	dd04      	ble.n	8002600 <main+0x264>
    	   //zalacz wntylator
    	   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0); //wylacz grzalke
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <main+0x2a0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2200      	movs	r2, #0
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40
 80025fe:	e74c      	b.n	800249a <main+0xfe>
       }
       else if(pid_error <0){
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <main+0x2b4>)
 8002602:	edd3 7a00 	vldr	s15, [r3]
 8002606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800260a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260e:	d509      	bpl.n	8002624 <main+0x288>
    	   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,duty); //zalacz grzalke
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <main+0x2bc>)
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <main+0x2a0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800261e:	ee17 2a90 	vmov	r2, s15
 8002622:	641a      	str	r2, [r3, #64]	; 0x40
  {
 8002624:	e739      	b.n	800249a <main+0xfe>
 8002626:	bf00      	nop
 8002628:	0800284d 	.word	0x0800284d
 800262c:	0800278d 	.word	0x0800278d
 8002630:	080033b1 	.word	0x080033b1
 8002634:	20000380 	.word	0x20000380
 8002638:	20000534 	.word	0x20000534
 800263c:	20000434 	.word	0x20000434
 8002640:	20000004 	.word	0x20000004
 8002644:	20000008 	.word	0x20000008
 8002648:	2000000c 	.word	0x2000000c
 800264c:	20000000 	.word	0x20000000
 8002650:	20000384 	.word	0x20000384
 8002654:	2000038c 	.word	0x2000038c
 8002658:	20000208 	.word	0x20000208
 800265c:	42c80000 	.word	0x42c80000
 8002660:	42c80000 	.word	0x42c80000

08002664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b0b4      	sub	sp, #208	; 0xd0
 8002668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800266a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800266e:	2230      	movs	r2, #48	; 0x30
 8002670:	2100      	movs	r1, #0
 8002672:	4618      	mov	r0, r3
 8002674:	f005 ffc8 	bl	8008608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002678:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002688:	f107 0308 	add.w	r3, r7, #8
 800268c:	2284      	movs	r2, #132	; 0x84
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f005 ffb9 	bl	8008608 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002696:	f002 f92d 	bl	80048f4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	4b3a      	ldr	r3, [pc, #232]	; (8002784 <SystemClock_Config+0x120>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a39      	ldr	r2, [pc, #228]	; (8002784 <SystemClock_Config+0x120>)
 80026a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
 80026a6:	4b37      	ldr	r3, [pc, #220]	; (8002784 <SystemClock_Config+0x120>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026b2:	4b35      	ldr	r3, [pc, #212]	; (8002788 <SystemClock_Config+0x124>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a34      	ldr	r2, [pc, #208]	; (8002788 <SystemClock_Config+0x124>)
 80026b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	4b32      	ldr	r3, [pc, #200]	; (8002788 <SystemClock_Config+0x124>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80026d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80026d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026d8:	2302      	movs	r3, #2
 80026da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026e6:	2304      	movs	r3, #4
 80026e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80026ec:	23d8      	movs	r3, #216	; 0xd8
 80026ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026f2:	2302      	movs	r3, #2
 80026f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80026f8:	2303      	movs	r3, #3
 80026fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002702:	4618      	mov	r0, r3
 8002704:	f002 f956 	bl	80049b4 <HAL_RCC_OscConfig>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800270e:	f000 f915 	bl	800293c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002712:	f002 f8ff 	bl	8004914 <HAL_PWREx_EnableOverDrive>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800271c:	f000 f90e 	bl	800293c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002720:	230f      	movs	r3, #15
 8002722:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002726:	2302      	movs	r3, #2
 8002728:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002732:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002736:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800273a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800273e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002742:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002746:	2107      	movs	r1, #7
 8002748:	4618      	mov	r0, r3
 800274a:	f002 fbd7 	bl	8004efc <HAL_RCC_ClockConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002754:	f000 f8f2 	bl	800293c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8002758:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 800275c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800275e:	2300      	movs	r3, #0
 8002760:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002762:	2300      	movs	r3, #0
 8002764:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002766:	f107 0308 	add.w	r3, r7, #8
 800276a:	4618      	mov	r0, r3
 800276c:	f002 fdbe 	bl	80052ec <HAL_RCCEx_PeriphCLKConfig>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8002776:	f000 f8e1 	bl	800293c <Error_Handler>
  }
}
 800277a:	bf00      	nop
 800277c:	37d0      	adds	r7, #208	; 0xd0
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800
 8002788:	40007000 	.word	0x40007000

0800278c <bmp280_spi_reg_write>:
 * @retval 0 -> Success
 * @retval >0 -> Failure Info
 *
 */
 int8_t bmp280_spi_reg_write ( uint8_t cs , uint8_t reg_addr , uint8_t * reg_data , uint16_t length )
 {
 800278c:	b580      	push	{r7, lr}
 800278e:	b08c      	sub	sp, #48	; 0x30
 8002790:	af00      	add	r7, sp, #0
 8002792:	603a      	str	r2, [r7, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
 800279a:	460b      	mov	r3, r1
 800279c:	71bb      	strb	r3, [r7, #6]
 800279e:	4613      	mov	r3, r2
 80027a0:	80bb      	strh	r3, [r7, #4]
 /* Implement the SPI write routine according to the target machine . */
 HAL_StatusTypeDef status = HAL_OK ;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 int32_t iError = BMP280_OK ;
 80027a8:	2300      	movs	r3, #0
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 uint8_t txarray [ BMP280_SPI_BUFFER_LEN ];
 uint8_t stringpos ;

 /* Copy register address and data to tx buffer */
 txarray [0] = reg_addr ;
 80027ac:	79bb      	ldrb	r3, [r7, #6]
 80027ae:	733b      	strb	r3, [r7, #12]
 for ( stringpos = 0; stringpos < length ; stringpos ++)
 80027b0:	2300      	movs	r3, #0
 80027b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027b6:	e011      	b.n	80027dc <bmp280_spi_reg_write+0x50>
 {
 txarray [ stringpos + BMP280_DATA_INDEX ] = reg_data [ stringpos ];
 80027b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	441a      	add	r2, r3
 80027c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027c4:	3301      	adds	r3, #1
 80027c6:	7812      	ldrb	r2, [r2, #0]
 80027c8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80027cc:	440b      	add	r3, r1
 80027ce:	f803 2c24 	strb.w	r2, [r3, #-36]
 for ( stringpos = 0; stringpos < length ; stringpos ++)
 80027d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027d6:	3301      	adds	r3, #1
 80027d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	88ba      	ldrh	r2, [r7, #4]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d8e7      	bhi.n	80027b8 <bmp280_spi_reg_write+0x2c>
 }
 // memcpy ( txarray + BMP280_DATA_INDEX , reg_data , length );

 /* Software slave selection procedure */
 if( cs == BMP280_CS1 )
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d104      	bne.n	80027f8 <bmp280_spi_reg_write+0x6c>
 HAL_GPIO_WritePin ( BMP280_CS1_GPIO_Port , BMP280_CS1_Pin , GPIO_PIN_RESET ) ;
 80027ee:	2200      	movs	r2, #0
 80027f0:	2110      	movs	r1, #16
 80027f2:	4814      	ldr	r0, [pc, #80]	; (8002844 <bmp280_spi_reg_write+0xb8>)
 80027f4:	f001 ff18 	bl	8004628 <HAL_GPIO_WritePin>

 /* Data exchange */
 status = HAL_SPI_Transmit ( BMP280_SPI , ( uint8_t *) (& txarray ) , length +1 , 100) ;
 80027f8:	88bb      	ldrh	r3, [r7, #4]
 80027fa:	3301      	adds	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	f107 010c 	add.w	r1, r7, #12
 8002802:	2364      	movs	r3, #100	; 0x64
 8002804:	4810      	ldr	r0, [pc, #64]	; (8002848 <bmp280_spi_reg_write+0xbc>)
 8002806:	f003 f9f1 	bl	8005bec <HAL_SPI_Transmit>
 800280a:	4603      	mov	r3, r0
 800280c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 while ( BMP280_SPI->State == HAL_SPI_STATE_BUSY ) {};
 8002810:	bf00      	nop
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <bmp280_spi_reg_write+0xbc>)
 8002814:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d0f9      	beq.n	8002812 <bmp280_spi_reg_write+0x86>

 /* Disable all slaves */
 HAL_GPIO_WritePin ( BMP280_CS1_GPIO_Port , BMP280_CS1_Pin , GPIO_PIN_SET ) ;
 800281e:	2201      	movs	r2, #1
 8002820:	2110      	movs	r1, #16
 8002822:	4808      	ldr	r0, [pc, #32]	; (8002844 <bmp280_spi_reg_write+0xb8>)
 8002824:	f001 ff00 	bl	8004628 <HAL_GPIO_WritePin>

 if ( status != HAL_OK )
 8002828:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <bmp280_spi_reg_write+0xaa>
 {
 // The BMP280 API calls for 0 return value as a success , and -1 returned as failure
 iError = ( -1) ;
 8002830:	f04f 33ff 	mov.w	r3, #4294967295
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
 }
 return ( int8_t ) iError ;
 8002836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002838:	b25b      	sxtb	r3, r3
 }
 800283a:	4618      	mov	r0, r3
 800283c:	3730      	adds	r7, #48	; 0x30
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000
 8002848:	20000390 	.word	0x20000390

0800284c <bmp280_spi_reg_read>:


 int8_t bmp280_spi_reg_read ( uint8_t cs , uint8_t reg_addr , uint8_t * reg_data , uint16_t length )
 {
 800284c:	b580      	push	{r7, lr}
 800284e:	b094      	sub	sp, #80	; 0x50
 8002850:	af02      	add	r7, sp, #8
 8002852:	603a      	str	r2, [r7, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
 800285a:	460b      	mov	r3, r1
 800285c:	71bb      	strb	r3, [r7, #6]
 800285e:	4613      	mov	r3, r2
 8002860:	80bb      	strh	r3, [r7, #4]
 /* Implement the SPI read routine according to the target machine . */
 HAL_StatusTypeDef status = HAL_OK ;
 8002862:	2300      	movs	r3, #0
 8002864:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 int32_t iError = BMP280_OK ;
 8002868:	2300      	movs	r3, #0
 800286a:	647b      	str	r3, [r7, #68]	; 0x44
 uint8_t txarray [ BMP280_SPI_BUFFER_LEN ] = {0 ,};
 800286c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
 800287c:	615a      	str	r2, [r3, #20]
 800287e:	619a      	str	r2, [r3, #24]
 uint8_t rxarray [ BMP280_SPI_BUFFER_LEN ] = {0 ,};
 8002880:	f107 0308 	add.w	r3, r7, #8
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
 8002890:	615a      	str	r2, [r3, #20]
 8002892:	619a      	str	r2, [r3, #24]
 uint8_t stringpos ;

 txarray [0] = reg_addr ;
 8002894:	79bb      	ldrb	r3, [r7, #6]
 8002896:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

 /* Software slave selection procedure */
 if( cs == BMP280_CS1 )
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d104      	bne.n	80028aa <bmp280_spi_reg_read+0x5e>
 HAL_GPIO_WritePin ( BMP280_CS1_GPIO_Port , BMP280_CS1_Pin , GPIO_PIN_RESET ) ;
 80028a0:	2200      	movs	r2, #0
 80028a2:	2110      	movs	r1, #16
 80028a4:	4823      	ldr	r0, [pc, #140]	; (8002934 <bmp280_spi_reg_read+0xe8>)
 80028a6:	f001 febf 	bl	8004628 <HAL_GPIO_WritePin>

 /* Data exchange */
 status = HAL_SPI_TransmitReceive ( BMP280_SPI , ( uint8_t *) (& txarray ) , ( uint8_t *) (&rxarray ) , length +1 , 5) ;
 80028aa:	88bb      	ldrh	r3, [r7, #4]
 80028ac:	3301      	adds	r3, #1
 80028ae:	b298      	uxth	r0, r3
 80028b0:	f107 0208 	add.w	r2, r7, #8
 80028b4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80028b8:	2305      	movs	r3, #5
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	4603      	mov	r3, r0
 80028be:	481e      	ldr	r0, [pc, #120]	; (8002938 <bmp280_spi_reg_read+0xec>)
 80028c0:	f003 fafa 	bl	8005eb8 <HAL_SPI_TransmitReceive>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 while ( BMP280_SPI-> State == HAL_SPI_STATE_BUSY ) {};
 80028ca:	bf00      	nop
 80028cc:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <bmp280_spi_reg_read+0xec>)
 80028ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d0f9      	beq.n	80028cc <bmp280_spi_reg_read+0x80>

 /* Disable all slaves */
 HAL_GPIO_WritePin ( BMP280_CS1_GPIO_Port , BMP280_CS1_Pin , GPIO_PIN_SET ) ;
 80028d8:	2201      	movs	r2, #1
 80028da:	2110      	movs	r1, #16
 80028dc:	4815      	ldr	r0, [pc, #84]	; (8002934 <bmp280_spi_reg_read+0xe8>)
 80028de:	f001 fea3 	bl	8004628 <HAL_GPIO_WritePin>

 /* Copy data from rx buffer */
 for ( stringpos = 0; stringpos < length ; stringpos ++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80028e8:	e011      	b.n	800290e <bmp280_spi_reg_read+0xc2>
 {
 reg_data [ stringpos ] = rxarray [ stringpos + BMP280_DATA_INDEX ];
 80028ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80028f4:	6839      	ldr	r1, [r7, #0]
 80028f6:	440b      	add	r3, r1
 80028f8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80028fc:	440a      	add	r2, r1
 80028fe:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 8002902:	701a      	strb	r2, [r3, #0]
 for ( stringpos = 0; stringpos < length ; stringpos ++)
 8002904:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002908:	3301      	adds	r3, #1
 800290a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800290e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002912:	b29b      	uxth	r3, r3
 8002914:	88ba      	ldrh	r2, [r7, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	d8e7      	bhi.n	80028ea <bmp280_spi_reg_read+0x9e>
 }
 // memcpy ( reg_data , rxarray + BMP280_DATA_INDEX , length );

 if ( status != HAL_OK )
 800291a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <bmp280_spi_reg_read+0xdc>
 {
 // The BME280 API calls for 0 return value as a success , and -1 returned as failure
 iError = ( -1) ;
 8002922:	f04f 33ff 	mov.w	r3, #4294967295
 8002926:	647b      	str	r3, [r7, #68]	; 0x44
 }

 return ( int8_t ) iError ;
 8002928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800292a:	b25b      	sxtb	r3, r3
 }
 800292c:	4618      	mov	r0, r3
 800292e:	3748      	adds	r7, #72	; 0x48
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000
 8002938:	20000390 	.word	0x20000390

0800293c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <MX_SPI4_Init+0x74>)
 8002952:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <MX_SPI4_Init+0x78>)
 8002954:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002956:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <MX_SPI4_Init+0x74>)
 8002958:	f44f 7282 	mov.w	r2, #260	; 0x104
 800295c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800295e:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <MX_SPI4_Init+0x74>)
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002964:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <MX_SPI4_Init+0x74>)
 8002966:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800296a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800296c:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <MX_SPI4_Init+0x74>)
 800296e:	2202      	movs	r2, #2
 8002970:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002972:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <MX_SPI4_Init+0x74>)
 8002974:	2201      	movs	r2, #1
 8002976:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <MX_SPI4_Init+0x74>)
 800297a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800297e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002980:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <MX_SPI4_Init+0x74>)
 8002982:	2218      	movs	r2, #24
 8002984:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002986:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <MX_SPI4_Init+0x74>)
 8002988:	2200      	movs	r2, #0
 800298a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <MX_SPI4_Init+0x74>)
 800298e:	2200      	movs	r2, #0
 8002990:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <MX_SPI4_Init+0x74>)
 8002994:	2200      	movs	r2, #0
 8002996:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002998:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <MX_SPI4_Init+0x74>)
 800299a:	2207      	movs	r2, #7
 800299c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800299e:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <MX_SPI4_Init+0x74>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <MX_SPI4_Init+0x74>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80029aa:	4805      	ldr	r0, [pc, #20]	; (80029c0 <MX_SPI4_Init+0x74>)
 80029ac:	f003 f88c 	bl	8005ac8 <HAL_SPI_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80029b6:	f7ff ffc1 	bl	800293c <Error_Handler>
  }

}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000390 	.word	0x20000390
 80029c4:	40013400 	.word	0x40013400

080029c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	; 0x28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a17      	ldr	r2, [pc, #92]	; (8002a44 <HAL_SPI_MspInit+0x7c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d127      	bne.n	8002a3a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80029ea:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <HAL_SPI_MspInit+0x80>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4a16      	ldr	r2, [pc, #88]	; (8002a48 <HAL_SPI_MspInit+0x80>)
 80029f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029f4:	6453      	str	r3, [r2, #68]	; 0x44
 80029f6:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <HAL_SPI_MspInit+0x80>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a02:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <HAL_SPI_MspInit+0x80>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a10      	ldr	r2, [pc, #64]	; (8002a48 <HAL_SPI_MspInit+0x80>)
 8002a08:	f043 0310 	orr.w	r3, r3, #16
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <HAL_SPI_MspInit+0x80>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP280_SCK_Pin|BMP280_MISO_Pin|BMP280_MOSI_Pin;
 8002a1a:	2364      	movs	r3, #100	; 0x64
 8002a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a26:	2303      	movs	r3, #3
 8002a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002a2a:	2305      	movs	r3, #5
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4619      	mov	r1, r3
 8002a34:	4805      	ldr	r0, [pc, #20]	; (8002a4c <HAL_SPI_MspInit+0x84>)
 8002a36:	f001 fc4d 	bl	80042d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	3728      	adds	r7, #40	; 0x28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40013400 	.word	0x40013400
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40021000 	.word	0x40021000

08002a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a56:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <HAL_MspInit+0x44>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a0e      	ldr	r2, [pc, #56]	; (8002a94 <HAL_MspInit+0x44>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <HAL_MspInit+0x44>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_MspInit+0x44>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	4a08      	ldr	r2, [pc, #32]	; (8002a94 <HAL_MspInit+0x44>)
 8002a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a78:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_MspInit+0x44>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800

08002a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a9c:	e7fe      	b.n	8002a9c <NMI_Handler+0x4>

08002a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa2:	e7fe      	b.n	8002aa2 <HardFault_Handler+0x4>

08002aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa8:	e7fe      	b.n	8002aa8 <MemManage_Handler+0x4>

08002aaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aae:	e7fe      	b.n	8002aae <BusFault_Handler+0x4>

08002ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <UsageFault_Handler+0x4>

08002ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae4:	f000 fc44 	bl	8003370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}

08002aec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002af0:	4802      	ldr	r0, [pc, #8]	; (8002afc <DMA1_Stream5_IRQHandler+0x10>)
 8002af2:	f001 f9b5 	bl	8003e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	200002c0 	.word	0x200002c0

08002b00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002b04:	2020      	movs	r0, #32
 8002b06:	f001 fda9 	bl	800465c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b14:	4802      	ldr	r0, [pc, #8]	; (8002b20 <TIM2_IRQHandler+0x10>)
 8002b16:	f003 fe7b 	bl	8006810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200004b4 	.word	0x200004b4

08002b24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b28:	4802      	ldr	r0, [pc, #8]	; (8002b34 <USART3_IRQHandler+0x10>)
 8002b2a:	f004 feef 	bl	800790c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000534 	.word	0x20000534

08002b38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002b3c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b40:	f001 fd8c 	bl	800465c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002b44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002b48:	f001 fd88 	bl	800465c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002b4c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b50:	f001 fd84 	bl	800465c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002b54:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002b58:	f001 fd80 	bl	800465c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002b64:	4803      	ldr	r0, [pc, #12]	; (8002b74 <TIM6_DAC_IRQHandler+0x14>)
 8002b66:	f001 f800 	bl	8003b6a <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002b6a:	4803      	ldr	r0, [pc, #12]	; (8002b78 <TIM6_DAC_IRQHandler+0x18>)
 8002b6c:	f003 fe50 	bl	8006810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b70:	bf00      	nop
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000320 	.word	0x20000320
 8002b78:	20000474 	.word	0x20000474

08002b7c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002b80:	4802      	ldr	r0, [pc, #8]	; (8002b8c <TIM7_IRQHandler+0x10>)
 8002b82:	f003 fe45 	bl	8006810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200004f4 	.word	0x200004f4

08002b90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b94:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <DMA2_Stream0_IRQHandler+0x10>)
 8002b96:	f001 f963 	bl	8003e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000260 	.word	0x20000260

08002ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bac:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <_sbrk+0x5c>)
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <_sbrk+0x60>)
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <_sbrk+0x64>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <_sbrk+0x64>)
 8002bc2:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <_sbrk+0x68>)
 8002bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <_sbrk+0x64>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d207      	bcs.n	8002be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bd4:	f005 fcee 	bl	80085b4 <__errno>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	230c      	movs	r3, #12
 8002bdc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002bde:	f04f 33ff 	mov.w	r3, #4294967295
 8002be2:	e009      	b.n	8002bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <_sbrk+0x64>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bea:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <_sbrk+0x64>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	4a05      	ldr	r2, [pc, #20]	; (8002c08 <_sbrk+0x64>)
 8002bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20050000 	.word	0x20050000
 8002c04:	00000400 	.word	0x00000400
 8002c08:	2000020c 	.word	0x2000020c
 8002c0c:	200005c0 	.word	0x200005c0

08002c10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c14:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <SystemInit+0x28>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1a:	4a07      	ldr	r2, [pc, #28]	; (8002c38 <SystemInit+0x28>)
 8002c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c24:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <SystemInit+0x28>)
 8002c26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c2a:	609a      	str	r2, [r3, #8]
#endif
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c42:	f107 0310 	add.w	r3, r7, #16
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	605a      	str	r2, [r3, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002c5a:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <MX_TIM2_Init+0xa8>)
 8002c5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8002c62:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <MX_TIM2_Init+0xa8>)
 8002c64:	226b      	movs	r2, #107	; 0x6b
 8002c66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c68:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <MX_TIM2_Init+0xa8>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <MX_TIM2_Init+0xa8>)
 8002c70:	f241 3287 	movw	r2, #4999	; 0x1387
 8002c74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c76:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <MX_TIM2_Init+0xa8>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c7c:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <MX_TIM2_Init+0xa8>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c82:	4818      	ldr	r0, [pc, #96]	; (8002ce4 <MX_TIM2_Init+0xa8>)
 8002c84:	f003 fc48 	bl	8006518 <HAL_TIM_Base_Init>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002c8e:	f7ff fe55 	bl	800293c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c98:	f107 0310 	add.w	r3, r7, #16
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4811      	ldr	r0, [pc, #68]	; (8002ce4 <MX_TIM2_Init+0xa8>)
 8002ca0:	f003 ffee 	bl	8006c80 <HAL_TIM_ConfigClockSource>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002caa:	f7ff fe47 	bl	800293c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8002cae:	2108      	movs	r1, #8
 8002cb0:	480c      	ldr	r0, [pc, #48]	; (8002ce4 <MX_TIM2_Init+0xa8>)
 8002cb2:	f003 fcd5 	bl	8006660 <HAL_TIM_OnePulse_Init>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002cbc:	f7ff fe3e 	bl	800293c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4805      	ldr	r0, [pc, #20]	; (8002ce4 <MX_TIM2_Init+0xa8>)
 8002cce:	f004 fc81 	bl	80075d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002cd8:	f7ff fe30 	bl	800293c <Error_Handler>
  }

}
 8002cdc:	bf00      	nop
 8002cde:	3720      	adds	r7, #32
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	200004b4 	.word	0x200004b4

08002ce8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08e      	sub	sp, #56	; 0x38
 8002cec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cfc:	f107 031c 	add.w	r3, r7, #28
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d08:	463b      	mov	r3, r7
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	605a      	str	r2, [r3, #4]
 8002d10:	609a      	str	r2, [r3, #8]
 8002d12:	60da      	str	r2, [r3, #12]
 8002d14:	611a      	str	r2, [r3, #16]
 8002d16:	615a      	str	r2, [r3, #20]
 8002d18:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <MX_TIM3_Init+0x128>)
 8002d1c:	4a3d      	ldr	r2, [pc, #244]	; (8002e14 <MX_TIM3_Init+0x12c>)
 8002d1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8002d20:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <MX_TIM3_Init+0x128>)
 8002d22:	226b      	movs	r2, #107	; 0x6b
 8002d24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d26:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <MX_TIM3_Init+0x128>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002d2c:	4b38      	ldr	r3, [pc, #224]	; (8002e10 <MX_TIM3_Init+0x128>)
 8002d2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d34:	4b36      	ldr	r3, [pc, #216]	; (8002e10 <MX_TIM3_Init+0x128>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d3a:	4b35      	ldr	r3, [pc, #212]	; (8002e10 <MX_TIM3_Init+0x128>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d40:	4833      	ldr	r0, [pc, #204]	; (8002e10 <MX_TIM3_Init+0x128>)
 8002d42:	f003 fbe9 	bl	8006518 <HAL_TIM_Base_Init>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002d4c:	f7ff fdf6 	bl	800293c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	482c      	ldr	r0, [pc, #176]	; (8002e10 <MX_TIM3_Init+0x128>)
 8002d5e:	f003 ff8f 	bl	8006c80 <HAL_TIM_ConfigClockSource>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002d68:	f7ff fde8 	bl	800293c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d6c:	4828      	ldr	r0, [pc, #160]	; (8002e10 <MX_TIM3_Init+0x128>)
 8002d6e:	f003 fbfe 	bl	800656e <HAL_TIM_PWM_Init>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002d78:	f7ff fde0 	bl	800293c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d84:	f107 031c 	add.w	r3, r7, #28
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4821      	ldr	r0, [pc, #132]	; (8002e10 <MX_TIM3_Init+0x128>)
 8002d8c:	f004 fc22 	bl	80075d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002d96:	f7ff fdd1 	bl	800293c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d9a:	2360      	movs	r3, #96	; 0x60
 8002d9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002daa:	463b      	mov	r3, r7
 8002dac:	2200      	movs	r2, #0
 8002dae:	4619      	mov	r1, r3
 8002db0:	4817      	ldr	r0, [pc, #92]	; (8002e10 <MX_TIM3_Init+0x128>)
 8002db2:	f003 fe4d 	bl	8006a50 <HAL_TIM_PWM_ConfigChannel>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002dbc:	f7ff fdbe 	bl	800293c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dc0:	463b      	mov	r3, r7
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4812      	ldr	r0, [pc, #72]	; (8002e10 <MX_TIM3_Init+0x128>)
 8002dc8:	f003 fe42 	bl	8006a50 <HAL_TIM_PWM_ConfigChannel>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002dd2:	f7ff fdb3 	bl	800293c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002dd6:	463b      	mov	r3, r7
 8002dd8:	2208      	movs	r2, #8
 8002dda:	4619      	mov	r1, r3
 8002ddc:	480c      	ldr	r0, [pc, #48]	; (8002e10 <MX_TIM3_Init+0x128>)
 8002dde:	f003 fe37 	bl	8006a50 <HAL_TIM_PWM_ConfigChannel>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002de8:	f7ff fda8 	bl	800293c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002dec:	463b      	mov	r3, r7
 8002dee:	220c      	movs	r2, #12
 8002df0:	4619      	mov	r1, r3
 8002df2:	4807      	ldr	r0, [pc, #28]	; (8002e10 <MX_TIM3_Init+0x128>)
 8002df4:	f003 fe2c 	bl	8006a50 <HAL_TIM_PWM_ConfigChannel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002dfe:	f7ff fd9d 	bl	800293c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002e02:	4803      	ldr	r0, [pc, #12]	; (8002e10 <MX_TIM3_Init+0x128>)
 8002e04:	f000 f97c 	bl	8003100 <HAL_TIM_MspPostInit>

}
 8002e08:	bf00      	nop
 8002e0a:	3738      	adds	r7, #56	; 0x38
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20000434 	.word	0x20000434
 8002e14:	40000400 	.word	0x40000400

08002e18 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08c      	sub	sp, #48	; 0x30
 8002e1c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e1e:	f107 030c 	add.w	r3, r7, #12
 8002e22:	2224      	movs	r2, #36	; 0x24
 8002e24:	2100      	movs	r1, #0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f005 fbee 	bl	8008608 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e2c:	463b      	mov	r3, r7
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	605a      	str	r2, [r3, #4]
 8002e34:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8002e36:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <MX_TIM4_Init+0xa0>)
 8002e38:	4a20      	ldr	r2, [pc, #128]	; (8002ebc <MX_TIM4_Init+0xa4>)
 8002e3a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8002e3c:	4b1e      	ldr	r3, [pc, #120]	; (8002eb8 <MX_TIM4_Init+0xa0>)
 8002e3e:	2203      	movs	r2, #3
 8002e40:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e42:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <MX_TIM4_Init+0xa0>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8002e48:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <MX_TIM4_Init+0xa0>)
 8002e4a:	2264      	movs	r2, #100	; 0x64
 8002e4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <MX_TIM4_Init+0xa0>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e54:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <MX_TIM4_Init+0xa0>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e62:	2301      	movs	r3, #1
 8002e64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e72:	2301      	movs	r3, #1
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e76:	2300      	movs	r3, #0
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002e7e:	f107 030c 	add.w	r3, r7, #12
 8002e82:	4619      	mov	r1, r3
 8002e84:	480c      	ldr	r0, [pc, #48]	; (8002eb8 <MX_TIM4_Init+0xa0>)
 8002e86:	f003 fc31 	bl	80066ec <HAL_TIM_Encoder_Init>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002e90:	f7ff fd54 	bl	800293c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e94:	2300      	movs	r3, #0
 8002e96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e9c:	463b      	mov	r3, r7
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <MX_TIM4_Init+0xa0>)
 8002ea2:	f004 fb97 	bl	80075d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002eac:	f7ff fd46 	bl	800293c <Error_Handler>
  }

}
 8002eb0:	bf00      	nop
 8002eb2:	3730      	adds	r7, #48	; 0x30
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	200003f4 	.word	0x200003f4
 8002ebc:	40000800 	.word	0x40000800

08002ec0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8002ed0:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <MX_TIM6_Init+0x64>)
 8002ed2:	4a15      	ldr	r2, [pc, #84]	; (8002f28 <MX_TIM6_Init+0x68>)
 8002ed4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 107;
 8002ed6:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <MX_TIM6_Init+0x64>)
 8002ed8:	226b      	movs	r2, #107	; 0x6b
 8002eda:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <MX_TIM6_Init+0x64>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <MX_TIM6_Init+0x64>)
 8002ee4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ee8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <MX_TIM6_Init+0x64>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002ef0:	480c      	ldr	r0, [pc, #48]	; (8002f24 <MX_TIM6_Init+0x64>)
 8002ef2:	f003 fb11 	bl	8006518 <HAL_TIM_Base_Init>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002efc:	f7ff fd1e 	bl	800293c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002f00:	2320      	movs	r3, #32
 8002f02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4805      	ldr	r0, [pc, #20]	; (8002f24 <MX_TIM6_Init+0x64>)
 8002f0e:	f004 fb61 	bl	80075d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002f18:	f7ff fd10 	bl	800293c <Error_Handler>
  }

}
 8002f1c:	bf00      	nop
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000474 	.word	0x20000474
 8002f28:	40001000 	.word	0x40001000

08002f2c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8002f3c:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <MX_TIM7_Init+0x64>)
 8002f3e:	4a15      	ldr	r2, [pc, #84]	; (8002f94 <MX_TIM7_Init+0x68>)
 8002f40:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 8002f42:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <MX_TIM7_Init+0x64>)
 8002f44:	226b      	movs	r2, #107	; 0x6b
 8002f46:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <MX_TIM7_Init+0x64>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <MX_TIM7_Init+0x64>)
 8002f50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f54:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f56:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <MX_TIM7_Init+0x64>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002f5c:	480c      	ldr	r0, [pc, #48]	; (8002f90 <MX_TIM7_Init+0x64>)
 8002f5e:	f003 fadb 	bl	8006518 <HAL_TIM_Base_Init>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002f68:	f7ff fce8 	bl	800293c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002f74:	1d3b      	adds	r3, r7, #4
 8002f76:	4619      	mov	r1, r3
 8002f78:	4805      	ldr	r0, [pc, #20]	; (8002f90 <MX_TIM7_Init+0x64>)
 8002f7a:	f004 fb2b 	bl	80075d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002f84:	f7ff fcda 	bl	800293c <Error_Handler>
  }

}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	200004f4 	.word	0x200004f4
 8002f94:	40001400 	.word	0x40001400

08002f98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa8:	d114      	bne.n	8002fd4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002faa:	4b2f      	ldr	r3, [pc, #188]	; (8003068 <HAL_TIM_Base_MspInit+0xd0>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a2e      	ldr	r2, [pc, #184]	; (8003068 <HAL_TIM_Base_MspInit+0xd0>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb6:	4b2c      	ldr	r3, [pc, #176]	; (8003068 <HAL_TIM_Base_MspInit+0xd0>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	201c      	movs	r0, #28
 8002fc8:	f000 fd77 	bl	8003aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fcc:	201c      	movs	r0, #28
 8002fce:	f000 fd90 	bl	8003af2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002fd2:	e044      	b.n	800305e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a24      	ldr	r2, [pc, #144]	; (800306c <HAL_TIM_Base_MspInit+0xd4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_TIM_Base_MspInit+0xd0>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	4a21      	ldr	r2, [pc, #132]	; (8003068 <HAL_TIM_Base_MspInit+0xd0>)
 8002fe4:	f043 0302 	orr.w	r3, r3, #2
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fea:	4b1f      	ldr	r3, [pc, #124]	; (8003068 <HAL_TIM_Base_MspInit+0xd0>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]
}
 8002ff6:	e032      	b.n	800305e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <HAL_TIM_Base_MspInit+0xd8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d114      	bne.n	800302c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003002:	4b19      	ldr	r3, [pc, #100]	; (8003068 <HAL_TIM_Base_MspInit+0xd0>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	4a18      	ldr	r2, [pc, #96]	; (8003068 <HAL_TIM_Base_MspInit+0xd0>)
 8003008:	f043 0310 	orr.w	r3, r3, #16
 800300c:	6413      	str	r3, [r2, #64]	; 0x40
 800300e:	4b16      	ldr	r3, [pc, #88]	; (8003068 <HAL_TIM_Base_MspInit+0xd0>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800301a:	2200      	movs	r2, #0
 800301c:	2100      	movs	r1, #0
 800301e:	2036      	movs	r0, #54	; 0x36
 8003020:	f000 fd4b 	bl	8003aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003024:	2036      	movs	r0, #54	; 0x36
 8003026:	f000 fd64 	bl	8003af2 <HAL_NVIC_EnableIRQ>
}
 800302a:	e018      	b.n	800305e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a10      	ldr	r2, [pc, #64]	; (8003074 <HAL_TIM_Base_MspInit+0xdc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d113      	bne.n	800305e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <HAL_TIM_Base_MspInit+0xd0>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	4a0b      	ldr	r2, [pc, #44]	; (8003068 <HAL_TIM_Base_MspInit+0xd0>)
 800303c:	f043 0320 	orr.w	r3, r3, #32
 8003040:	6413      	str	r3, [r2, #64]	; 0x40
 8003042:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_TIM_Base_MspInit+0xd0>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800304e:	2200      	movs	r2, #0
 8003050:	2100      	movs	r1, #0
 8003052:	2037      	movs	r0, #55	; 0x37
 8003054:	f000 fd31 	bl	8003aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003058:	2037      	movs	r0, #55	; 0x37
 800305a:	f000 fd4a 	bl	8003af2 <HAL_NVIC_EnableIRQ>
}
 800305e:	bf00      	nop
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40023800 	.word	0x40023800
 800306c:	40000400 	.word	0x40000400
 8003070:	40001000 	.word	0x40001000
 8003074:	40001400 	.word	0x40001400

08003078 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	; 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a17      	ldr	r2, [pc, #92]	; (80030f4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d128      	bne.n	80030ec <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800309a:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <HAL_TIM_Encoder_MspInit+0x80>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	4a16      	ldr	r2, [pc, #88]	; (80030f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80030a0:	f043 0304 	orr.w	r3, r3, #4
 80030a4:	6413      	str	r3, [r2, #64]	; 0x40
 80030a6:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b2:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a10      	ldr	r2, [pc, #64]	; (80030f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80030b8:	f043 0308 	orr.w	r3, r3, #8
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_TIM_DT_Pin|ENC_TIM_CLK_Pin;
 80030ca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80030ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d0:	2302      	movs	r3, #2
 80030d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d8:	2300      	movs	r3, #0
 80030da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030dc:	2302      	movs	r3, #2
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	4619      	mov	r1, r3
 80030e6:	4805      	ldr	r0, [pc, #20]	; (80030fc <HAL_TIM_Encoder_MspInit+0x84>)
 80030e8:	f001 f8f4 	bl	80042d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80030ec:	bf00      	nop
 80030ee:	3728      	adds	r7, #40	; 0x28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40000800 	.word	0x40000800
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40020c00 	.word	0x40020c00

08003100 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	; 0x28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003108:	f107 0314 	add.w	r3, r7, #20
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1f      	ldr	r2, [pc, #124]	; (800319c <HAL_TIM_MspPostInit+0x9c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d138      	bne.n	8003194 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003122:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <HAL_TIM_MspPostInit+0xa0>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a1e      	ldr	r2, [pc, #120]	; (80031a0 <HAL_TIM_MspPostInit+0xa0>)
 8003128:	f043 0302 	orr.w	r3, r3, #2
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b1c      	ldr	r3, [pc, #112]	; (80031a0 <HAL_TIM_MspPostInit+0xa0>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800313a:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <HAL_TIM_MspPostInit+0xa0>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <HAL_TIM_MspPostInit+0xa0>)
 8003140:	f043 0304 	orr.w	r3, r3, #4
 8003144:	6313      	str	r3, [r2, #48]	; 0x30
 8003146:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <HAL_TIM_MspPostInit+0xa0>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TM3_PWM_CH4_Pin|LED_RGB_CH_R_Pin;
 8003152:	2312      	movs	r3, #18
 8003154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003156:	2302      	movs	r3, #2
 8003158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315e:	2300      	movs	r3, #0
 8003160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003162:	2302      	movs	r3, #2
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003166:	f107 0314 	add.w	r3, r7, #20
 800316a:	4619      	mov	r1, r3
 800316c:	480d      	ldr	r0, [pc, #52]	; (80031a4 <HAL_TIM_MspPostInit+0xa4>)
 800316e:	f001 f8b1 	bl	80042d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_RGB_CH_G_Pin|LED_RGB_CH_B_Pin;
 8003172:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003180:	2300      	movs	r3, #0
 8003182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003184:	2302      	movs	r3, #2
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003188:	f107 0314 	add.w	r3, r7, #20
 800318c:	4619      	mov	r1, r3
 800318e:	4806      	ldr	r0, [pc, #24]	; (80031a8 <HAL_TIM_MspPostInit+0xa8>)
 8003190:	f001 f8a0 	bl	80042d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003194:	bf00      	nop
 8003196:	3728      	adds	r7, #40	; 0x28
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40000400 	.word	0x40000400
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40020400 	.word	0x40020400
 80031a8:	40020800 	.word	0x40020800

080031ac <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80031b0:	4b14      	ldr	r3, [pc, #80]	; (8003204 <MX_USART3_UART_Init+0x58>)
 80031b2:	4a15      	ldr	r2, [pc, #84]	; (8003208 <MX_USART3_UART_Init+0x5c>)
 80031b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80031b6:	4b13      	ldr	r3, [pc, #76]	; (8003204 <MX_USART3_UART_Init+0x58>)
 80031b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <MX_USART3_UART_Init+0x58>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <MX_USART3_UART_Init+0x58>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031ca:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <MX_USART3_UART_Init+0x58>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <MX_USART3_UART_Init+0x58>)
 80031d2:	220c      	movs	r2, #12
 80031d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031d6:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <MX_USART3_UART_Init+0x58>)
 80031d8:	2200      	movs	r2, #0
 80031da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <MX_USART3_UART_Init+0x58>)
 80031de:	2200      	movs	r2, #0
 80031e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031e2:	4b08      	ldr	r3, [pc, #32]	; (8003204 <MX_USART3_UART_Init+0x58>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <MX_USART3_UART_Init+0x58>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031ee:	4805      	ldr	r0, [pc, #20]	; (8003204 <MX_USART3_UART_Init+0x58>)
 80031f0:	f004 fa9c 	bl	800772c <HAL_UART_Init>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80031fa:	f7ff fb9f 	bl	800293c <Error_Handler>
  }

}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000534 	.word	0x20000534
 8003208:	40004800 	.word	0x40004800

0800320c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003214:	f107 0314 	add.w	r3, r7, #20
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1b      	ldr	r2, [pc, #108]	; (8003298 <HAL_UART_MspInit+0x8c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d130      	bne.n	8003290 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800322e:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_UART_MspInit+0x90>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a1a      	ldr	r2, [pc, #104]	; (800329c <HAL_UART_MspInit+0x90>)
 8003234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003238:	6413      	str	r3, [r2, #64]	; 0x40
 800323a:	4b18      	ldr	r3, [pc, #96]	; (800329c <HAL_UART_MspInit+0x90>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003246:	4b15      	ldr	r3, [pc, #84]	; (800329c <HAL_UART_MspInit+0x90>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	4a14      	ldr	r2, [pc, #80]	; (800329c <HAL_UART_MspInit+0x90>)
 800324c:	f043 0308 	orr.w	r3, r3, #8
 8003250:	6313      	str	r3, [r2, #48]	; 0x30
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <HAL_UART_MspInit+0x90>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800325e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003264:	2302      	movs	r3, #2
 8003266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800326c:	2303      	movs	r3, #3
 800326e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003270:	2307      	movs	r3, #7
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003274:	f107 0314 	add.w	r3, r7, #20
 8003278:	4619      	mov	r1, r3
 800327a:	4809      	ldr	r0, [pc, #36]	; (80032a0 <HAL_UART_MspInit+0x94>)
 800327c:	f001 f82a 	bl	80042d4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003280:	2200      	movs	r2, #0
 8003282:	2100      	movs	r1, #0
 8003284:	2027      	movs	r0, #39	; 0x27
 8003286:	f000 fc18 	bl	8003aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800328a:	2027      	movs	r0, #39	; 0x27
 800328c:	f000 fc31 	bl	8003af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003290:	bf00      	nop
 8003292:	3728      	adds	r7, #40	; 0x28
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40004800 	.word	0x40004800
 800329c:	40023800 	.word	0x40023800
 80032a0:	40020c00 	.word	0x40020c00

080032a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032aa:	e003      	b.n	80032b4 <LoopCopyDataInit>

080032ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032b2:	3104      	adds	r1, #4

080032b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032b4:	480b      	ldr	r0, [pc, #44]	; (80032e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032b6:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032bc:	d3f6      	bcc.n	80032ac <CopyDataInit>
  ldr  r2, =_sbss
 80032be:	4a0b      	ldr	r2, [pc, #44]	; (80032ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032c0:	e002      	b.n	80032c8 <LoopFillZerobss>

080032c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032c4:	f842 3b04 	str.w	r3, [r2], #4

080032c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032c8:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032cc:	d3f9      	bcc.n	80032c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032ce:	f7ff fc9f 	bl	8002c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032d2:	f005 f975 	bl	80085c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032d6:	f7ff f861 	bl	800239c <main>
  bx  lr    
 80032da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032dc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80032e0:	0800c388 	.word	0x0800c388
  ldr  r0, =_sdata
 80032e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032e8:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 80032ec:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 80032f0:	200005bc 	.word	0x200005bc

080032f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032f4:	e7fe      	b.n	80032f4 <ADC_IRQHandler>

080032f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032fa:	2003      	movs	r0, #3
 80032fc:	f000 fbd2 	bl	8003aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003300:	2000      	movs	r0, #0
 8003302:	f000 f805 	bl	8003310 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003306:	f7ff fba3 	bl	8002a50 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003318:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_InitTick+0x54>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_InitTick+0x58>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	4619      	mov	r1, r3
 8003322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003326:	fbb3 f3f1 	udiv	r3, r3, r1
 800332a:	fbb2 f3f3 	udiv	r3, r2, r3
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fbed 	bl	8003b0e <HAL_SYSTICK_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e00e      	b.n	800335c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b0f      	cmp	r3, #15
 8003342:	d80a      	bhi.n	800335a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003344:	2200      	movs	r2, #0
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	f000 fbb5 	bl	8003aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003350:	4a06      	ldr	r2, [pc, #24]	; (800336c <HAL_InitTick+0x5c>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e000      	b.n	800335c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20000010 	.word	0x20000010
 8003368:	20000018 	.word	0x20000018
 800336c:	20000014 	.word	0x20000014

08003370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_IncTick+0x20>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_IncTick+0x24>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4413      	add	r3, r2
 8003380:	4a04      	ldr	r2, [pc, #16]	; (8003394 <HAL_IncTick+0x24>)
 8003382:	6013      	str	r3, [r2, #0]
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	20000018 	.word	0x20000018
 8003394:	200005b4 	.word	0x200005b4

08003398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return uwTick;
 800339c:	4b03      	ldr	r3, [pc, #12]	; (80033ac <HAL_GetTick+0x14>)
 800339e:	681b      	ldr	r3, [r3, #0]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	200005b4 	.word	0x200005b4

080033b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033b8:	f7ff ffee 	bl	8003398 <HAL_GetTick>
 80033bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d005      	beq.n	80033d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ca:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <HAL_Delay+0x40>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033d6:	bf00      	nop
 80033d8:	f7ff ffde 	bl	8003398 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d8f7      	bhi.n	80033d8 <HAL_Delay+0x28>
  {
  }
}
 80033e8:	bf00      	nop
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20000018 	.word	0x20000018

080033f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e031      	b.n	800346e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fd fe38 	bl	8001088 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b00      	cmp	r3, #0
 8003430:	d116      	bne.n	8003460 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003436:	4b10      	ldr	r3, [pc, #64]	; (8003478 <HAL_ADC_Init+0x84>)
 8003438:	4013      	ands	r3, r2
 800343a:	f043 0202 	orr.w	r2, r3, #2
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f964 	bl	8003710 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f023 0303 	bic.w	r3, r3, #3
 8003456:	f043 0201 	orr.w	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
 800345e:	e001      	b.n	8003464 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800346c:	7bfb      	ldrb	r3, [r7, #15]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	ffffeefd 	.word	0xffffeefd

0800347c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x1c>
 8003494:	2302      	movs	r3, #2
 8003496:	e12a      	b.n	80036ee <HAL_ADC_ConfigChannel+0x272>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b09      	cmp	r3, #9
 80034a6:	d93a      	bls.n	800351e <HAL_ADC_ConfigChannel+0xa2>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034b0:	d035      	beq.n	800351e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68d9      	ldr	r1, [r3, #12]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	4613      	mov	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4413      	add	r3, r2
 80034c6:	3b1e      	subs	r3, #30
 80034c8:	2207      	movs	r2, #7
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43da      	mvns	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	400a      	ands	r2, r1
 80034d6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a87      	ldr	r2, [pc, #540]	; (80036fc <HAL_ADC_ConfigChannel+0x280>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10a      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68d9      	ldr	r1, [r3, #12]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	061a      	lsls	r2, r3, #24
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034f6:	e035      	b.n	8003564 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68d9      	ldr	r1, [r3, #12]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	b29b      	uxth	r3, r3
 8003508:	4618      	mov	r0, r3
 800350a:	4603      	mov	r3, r0
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	4403      	add	r3, r0
 8003510:	3b1e      	subs	r3, #30
 8003512:	409a      	lsls	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800351c:	e022      	b.n	8003564 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6919      	ldr	r1, [r3, #16]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	4613      	mov	r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4413      	add	r3, r2
 8003532:	2207      	movs	r2, #7
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43da      	mvns	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	400a      	ands	r2, r1
 8003540:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6919      	ldr	r1, [r3, #16]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	4618      	mov	r0, r3
 8003554:	4603      	mov	r3, r0
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4403      	add	r3, r0
 800355a:	409a      	lsls	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b06      	cmp	r3, #6
 800356a:	d824      	bhi.n	80035b6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	3b05      	subs	r3, #5
 800357e:	221f      	movs	r2, #31
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43da      	mvns	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	400a      	ands	r2, r1
 800358c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	b29b      	uxth	r3, r3
 800359a:	4618      	mov	r0, r3
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	3b05      	subs	r3, #5
 80035a8:	fa00 f203 	lsl.w	r2, r0, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	635a      	str	r2, [r3, #52]	; 0x34
 80035b4:	e04c      	b.n	8003650 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b0c      	cmp	r3, #12
 80035bc:	d824      	bhi.n	8003608 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	3b23      	subs	r3, #35	; 0x23
 80035d0:	221f      	movs	r2, #31
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43da      	mvns	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	400a      	ands	r2, r1
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	4618      	mov	r0, r3
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	3b23      	subs	r3, #35	; 0x23
 80035fa:	fa00 f203 	lsl.w	r2, r0, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
 8003606:	e023      	b.n	8003650 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	3b41      	subs	r3, #65	; 0x41
 800361a:	221f      	movs	r2, #31
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	43da      	mvns	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	400a      	ands	r2, r1
 8003628:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	b29b      	uxth	r3, r3
 8003636:	4618      	mov	r0, r3
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	3b41      	subs	r3, #65	; 0x41
 8003644:	fa00 f203 	lsl.w	r2, r0, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a2a      	ldr	r2, [pc, #168]	; (8003700 <HAL_ADC_ConfigChannel+0x284>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d10a      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x1f4>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003662:	d105      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003664:	4b27      	ldr	r3, [pc, #156]	; (8003704 <HAL_ADC_ConfigChannel+0x288>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4a26      	ldr	r2, [pc, #152]	; (8003704 <HAL_ADC_ConfigChannel+0x288>)
 800366a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800366e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a22      	ldr	r2, [pc, #136]	; (8003700 <HAL_ADC_ConfigChannel+0x284>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d109      	bne.n	800368e <HAL_ADC_ConfigChannel+0x212>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b12      	cmp	r3, #18
 8003680:	d105      	bne.n	800368e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003682:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_ADC_ConfigChannel+0x288>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	4a1f      	ldr	r2, [pc, #124]	; (8003704 <HAL_ADC_ConfigChannel+0x288>)
 8003688:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800368c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1b      	ldr	r2, [pc, #108]	; (8003700 <HAL_ADC_ConfigChannel+0x284>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d125      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x268>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a17      	ldr	r2, [pc, #92]	; (80036fc <HAL_ADC_ConfigChannel+0x280>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d003      	beq.n	80036aa <HAL_ADC_ConfigChannel+0x22e>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b11      	cmp	r3, #17
 80036a8:	d11c      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80036aa:	4b16      	ldr	r3, [pc, #88]	; (8003704 <HAL_ADC_ConfigChannel+0x288>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	4a15      	ldr	r2, [pc, #84]	; (8003704 <HAL_ADC_ConfigChannel+0x288>)
 80036b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036b4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a10      	ldr	r2, [pc, #64]	; (80036fc <HAL_ADC_ConfigChannel+0x280>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d111      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80036c0:	4b11      	ldr	r3, [pc, #68]	; (8003708 <HAL_ADC_ConfigChannel+0x28c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a11      	ldr	r2, [pc, #68]	; (800370c <HAL_ADC_ConfigChannel+0x290>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	0c9a      	lsrs	r2, r3, #18
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80036d6:	e002      	b.n	80036de <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3b01      	subs	r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1f9      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	10000012 	.word	0x10000012
 8003700:	40012000 	.word	0x40012000
 8003704:	40012300 	.word	0x40012300
 8003708:	20000010 	.word	0x20000010
 800370c:	431bde83 	.word	0x431bde83

08003710 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003718:	4b78      	ldr	r3, [pc, #480]	; (80038fc <ADC_Init+0x1ec>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	4a77      	ldr	r2, [pc, #476]	; (80038fc <ADC_Init+0x1ec>)
 800371e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003722:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003724:	4b75      	ldr	r3, [pc, #468]	; (80038fc <ADC_Init+0x1ec>)
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4973      	ldr	r1, [pc, #460]	; (80038fc <ADC_Init+0x1ec>)
 800372e:	4313      	orrs	r3, r2
 8003730:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003740:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	021a      	lsls	r2, r3, #8
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003786:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6899      	ldr	r1, [r3, #8]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	4a58      	ldr	r2, [pc, #352]	; (8003900 <ADC_Init+0x1f0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d022      	beq.n	80037ea <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6899      	ldr	r1, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6899      	ldr	r1, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	e00f      	b.n	800380a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003808:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0202 	bic.w	r2, r2, #2
 8003818:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6899      	ldr	r1, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	005a      	lsls	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01b      	beq.n	8003870 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003846:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003856:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6859      	ldr	r1, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	3b01      	subs	r3, #1
 8003864:	035a      	lsls	r2, r3, #13
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	e007      	b.n	8003880 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800387e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800388e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	3b01      	subs	r3, #1
 800389c:	051a      	lsls	r2, r3, #20
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6899      	ldr	r1, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038c2:	025a      	lsls	r2, r3, #9
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6899      	ldr	r1, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	029a      	lsls	r2, r3, #10
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	609a      	str	r2, [r3, #8]
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	40012300 	.word	0x40012300
 8003900:	0f000001 	.word	0x0f000001

08003904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <__NVIC_SetPriorityGrouping+0x40>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003920:	4013      	ands	r3, r2
 8003922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <__NVIC_SetPriorityGrouping+0x44>)
 800392e:	4313      	orrs	r3, r2
 8003930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003932:	4a04      	ldr	r2, [pc, #16]	; (8003944 <__NVIC_SetPriorityGrouping+0x40>)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	60d3      	str	r3, [r2, #12]
}
 8003938:	bf00      	nop
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000ed00 	.word	0xe000ed00
 8003948:	05fa0000 	.word	0x05fa0000

0800394c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003950:	4b04      	ldr	r3, [pc, #16]	; (8003964 <__NVIC_GetPriorityGrouping+0x18>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	0a1b      	lsrs	r3, r3, #8
 8003956:	f003 0307 	and.w	r3, r3, #7
}
 800395a:	4618      	mov	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000ed00 	.word	0xe000ed00

08003968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	2b00      	cmp	r3, #0
 8003978:	db0b      	blt.n	8003992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	f003 021f 	and.w	r2, r3, #31
 8003980:	4907      	ldr	r1, [pc, #28]	; (80039a0 <__NVIC_EnableIRQ+0x38>)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	2001      	movs	r0, #1
 800398a:	fa00 f202 	lsl.w	r2, r0, r2
 800398e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	e000e100 	.word	0xe000e100

080039a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	6039      	str	r1, [r7, #0]
 80039ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	db0a      	blt.n	80039ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	490c      	ldr	r1, [pc, #48]	; (80039f0 <__NVIC_SetPriority+0x4c>)
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	440b      	add	r3, r1
 80039c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039cc:	e00a      	b.n	80039e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4908      	ldr	r1, [pc, #32]	; (80039f4 <__NVIC_SetPriority+0x50>)
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	3b04      	subs	r3, #4
 80039dc:	0112      	lsls	r2, r2, #4
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	440b      	add	r3, r1
 80039e2:	761a      	strb	r2, [r3, #24]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	e000e100 	.word	0xe000e100
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	; 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f1c3 0307 	rsb	r3, r3, #7
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	bf28      	it	cs
 8003a16:	2304      	movcs	r3, #4
 8003a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	2b06      	cmp	r3, #6
 8003a20:	d902      	bls.n	8003a28 <NVIC_EncodePriority+0x30>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3b03      	subs	r3, #3
 8003a26:	e000      	b.n	8003a2a <NVIC_EncodePriority+0x32>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43da      	mvns	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a40:	f04f 31ff 	mov.w	r1, #4294967295
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	43d9      	mvns	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a50:	4313      	orrs	r3, r2
         );
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3724      	adds	r7, #36	; 0x24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
	...

08003a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a70:	d301      	bcc.n	8003a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a72:	2301      	movs	r3, #1
 8003a74:	e00f      	b.n	8003a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a76:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <SysTick_Config+0x40>)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a7e:	210f      	movs	r1, #15
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295
 8003a84:	f7ff ff8e 	bl	80039a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <SysTick_Config+0x40>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a8e:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <SysTick_Config+0x40>)
 8003a90:	2207      	movs	r2, #7
 8003a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	e000e010 	.word	0xe000e010

08003aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff ff29 	bl	8003904 <__NVIC_SetPriorityGrouping>
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b086      	sub	sp, #24
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003acc:	f7ff ff3e 	bl	800394c <__NVIC_GetPriorityGrouping>
 8003ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	6978      	ldr	r0, [r7, #20]
 8003ad8:	f7ff ff8e 	bl	80039f8 <NVIC_EncodePriority>
 8003adc:	4602      	mov	r2, r0
 8003ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff5d 	bl	80039a4 <__NVIC_SetPriority>
}
 8003aea:	bf00      	nop
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	4603      	mov	r3, r0
 8003afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff ff31 	bl	8003968 <__NVIC_EnableIRQ>
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff ffa2 	bl	8003a60 <SysTick_Config>
 8003b1c:	4603      	mov	r3, r0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e014      	b.n	8003b62 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	791b      	ldrb	r3, [r3, #4]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d105      	bne.n	8003b4e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fe f871 	bl	8001c30 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2202      	movs	r2, #2
 8003b52:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b80:	d118      	bne.n	8003bb4 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2204      	movs	r2, #4
 8003b86:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b9c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bac:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f825 	bl	8003bfe <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bc2:	d118      	bne.n	8003bf6 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f043 0202 	orr.w	r2, r3, #2
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003bde:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003bee:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f85b 	bl	8003cac <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b087      	sub	sp, #28
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	795b      	ldrb	r3, [r3, #5]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_DAC_ConfigChannel+0x20>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e036      	b.n	8003ca0 <HAL_DAC_ConfigChannel+0x8e>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003c46:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4013      	ands	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6819      	ldr	r1, [r3, #0]
 8003c80:	22c0      	movs	r2, #192	; 0xc0
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	43da      	mvns	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	400a      	ands	r2, r1
 8003c90:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ccc:	f7ff fb64 	bl	8003398 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e099      	b.n	8003e10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0201 	bic.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cfc:	e00f      	b.n	8003d1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cfe:	f7ff fb4b 	bl	8003398 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b05      	cmp	r3, #5
 8003d0a:	d908      	bls.n	8003d1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2203      	movs	r2, #3
 8003d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e078      	b.n	8003e10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e8      	bne.n	8003cfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4b38      	ldr	r3, [pc, #224]	; (8003e18 <HAL_DMA_Init+0x158>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d107      	bne.n	8003d88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	4313      	orrs	r3, r2
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f023 0307 	bic.w	r3, r3, #7
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d117      	bne.n	8003de2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fa0b 	bl	80041e0 <DMA_CheckFifoParam>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2240      	movs	r2, #64	; 0x40
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003dde:	2301      	movs	r3, #1
 8003de0:	e016      	b.n	8003e10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f9c2 	bl	8004174 <DMA_CalcBaseAndBitshift>
 8003df0:	4603      	mov	r3, r0
 8003df2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df8:	223f      	movs	r2, #63	; 0x3f
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	f010803f 	.word	0xf010803f

08003e1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d004      	beq.n	8003e3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2280      	movs	r2, #128	; 0x80
 8003e34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e00c      	b.n	8003e54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2205      	movs	r2, #5
 8003e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003e6c:	4b92      	ldr	r3, [pc, #584]	; (80040b8 <HAL_DMA_IRQHandler+0x258>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a92      	ldr	r2, [pc, #584]	; (80040bc <HAL_DMA_IRQHandler+0x25c>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	0a9b      	lsrs	r3, r3, #10
 8003e78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8a:	2208      	movs	r2, #8
 8003e8c:	409a      	lsls	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4013      	ands	r3, r2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d01a      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d013      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0204 	bic.w	r2, r2, #4
 8003eb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb8:	2208      	movs	r2, #8
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec4:	f043 0201 	orr.w	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d012      	beq.n	8003f02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00b      	beq.n	8003f02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eee:	2201      	movs	r2, #1
 8003ef0:	409a      	lsls	r2, r3
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efa:	f043 0202 	orr.w	r2, r3, #2
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f06:	2204      	movs	r2, #4
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d012      	beq.n	8003f38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00b      	beq.n	8003f38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f24:	2204      	movs	r2, #4
 8003f26:	409a      	lsls	r2, r3
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f30:	f043 0204 	orr.w	r2, r3, #4
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3c:	2210      	movs	r2, #16
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d043      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d03c      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5a:	2210      	movs	r2, #16
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d018      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d108      	bne.n	8003f90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d024      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	4798      	blx	r3
 8003f8e:	e01f      	b.n	8003fd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01b      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	4798      	blx	r3
 8003fa0:	e016      	b.n	8003fd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d107      	bne.n	8003fc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0208 	bic.w	r2, r2, #8
 8003fbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	409a      	lsls	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 808e 	beq.w	80040fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 8086 	beq.w	80040fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b05      	cmp	r3, #5
 8004008:	d136      	bne.n	8004078 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0216 	bic.w	r2, r2, #22
 8004018:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004028:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <HAL_DMA_IRQHandler+0x1da>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004036:	2b00      	cmp	r3, #0
 8004038:	d007      	beq.n	800404a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0208 	bic.w	r2, r2, #8
 8004048:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404e:	223f      	movs	r2, #63	; 0x3f
 8004050:	409a      	lsls	r2, r3
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406a:	2b00      	cmp	r3, #0
 800406c:	d07d      	beq.n	800416a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	4798      	blx	r3
        }
        return;
 8004076:	e078      	b.n	800416a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01c      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d108      	bne.n	80040a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004098:	2b00      	cmp	r3, #0
 800409a:	d030      	beq.n	80040fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	4798      	blx	r3
 80040a4:	e02b      	b.n	80040fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d027      	beq.n	80040fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	4798      	blx	r3
 80040b6:	e022      	b.n	80040fe <HAL_DMA_IRQHandler+0x29e>
 80040b8:	20000010 	.word	0x20000010
 80040bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10f      	bne.n	80040ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0210 	bic.w	r2, r2, #16
 80040dc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004102:	2b00      	cmp	r3, #0
 8004104:	d032      	beq.n	800416c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d022      	beq.n	8004158 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2205      	movs	r2, #5
 8004116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0201 	bic.w	r2, r2, #1
 8004128:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	3301      	adds	r3, #1
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	429a      	cmp	r2, r3
 8004134:	d307      	bcc.n	8004146 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1f2      	bne.n	800412a <HAL_DMA_IRQHandler+0x2ca>
 8004144:	e000      	b.n	8004148 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004146:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	4798      	blx	r3
 8004168:	e000      	b.n	800416c <HAL_DMA_IRQHandler+0x30c>
        return;
 800416a:	bf00      	nop
    }
  }
}
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop

08004174 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	3b10      	subs	r3, #16
 8004184:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <DMA_CalcBaseAndBitshift+0x60>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	091b      	lsrs	r3, r3, #4
 800418c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800418e:	4a12      	ldr	r2, [pc, #72]	; (80041d8 <DMA_CalcBaseAndBitshift+0x64>)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d908      	bls.n	80041b4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <DMA_CalcBaseAndBitshift+0x68>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	1d1a      	adds	r2, r3, #4
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	659a      	str	r2, [r3, #88]	; 0x58
 80041b2:	e006      	b.n	80041c2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	4b08      	ldr	r3, [pc, #32]	; (80041dc <DMA_CalcBaseAndBitshift+0x68>)
 80041bc:	4013      	ands	r3, r2
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	aaaaaaab 	.word	0xaaaaaaab
 80041d8:	0800c0bc 	.word	0x0800c0bc
 80041dc:	fffffc00 	.word	0xfffffc00

080041e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d11f      	bne.n	800423a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d855      	bhi.n	80042ac <DMA_CheckFifoParam+0xcc>
 8004200:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <DMA_CheckFifoParam+0x28>)
 8004202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004206:	bf00      	nop
 8004208:	08004219 	.word	0x08004219
 800420c:	0800422b 	.word	0x0800422b
 8004210:	08004219 	.word	0x08004219
 8004214:	080042ad 	.word	0x080042ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d045      	beq.n	80042b0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004228:	e042      	b.n	80042b0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004232:	d13f      	bne.n	80042b4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004238:	e03c      	b.n	80042b4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004242:	d121      	bne.n	8004288 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b03      	cmp	r3, #3
 8004248:	d836      	bhi.n	80042b8 <DMA_CheckFifoParam+0xd8>
 800424a:	a201      	add	r2, pc, #4	; (adr r2, 8004250 <DMA_CheckFifoParam+0x70>)
 800424c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004250:	08004261 	.word	0x08004261
 8004254:	08004267 	.word	0x08004267
 8004258:	08004261 	.word	0x08004261
 800425c:	08004279 	.word	0x08004279
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
      break;
 8004264:	e02f      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d024      	beq.n	80042bc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004276:	e021      	b.n	80042bc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004280:	d11e      	bne.n	80042c0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004286:	e01b      	b.n	80042c0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d902      	bls.n	8004294 <DMA_CheckFifoParam+0xb4>
 800428e:	2b03      	cmp	r3, #3
 8004290:	d003      	beq.n	800429a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004292:	e018      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
      break;
 8004298:	e015      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00e      	beq.n	80042c4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
      break;
 80042aa:	e00b      	b.n	80042c4 <DMA_CheckFifoParam+0xe4>
      break;
 80042ac:	bf00      	nop
 80042ae:	e00a      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      break;
 80042b0:	bf00      	nop
 80042b2:	e008      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      break;
 80042b4:	bf00      	nop
 80042b6:	e006      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      break;
 80042b8:	bf00      	nop
 80042ba:	e004      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      break;
 80042bc:	bf00      	nop
 80042be:	e002      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      break;   
 80042c0:	bf00      	nop
 80042c2:	e000      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      break;
 80042c4:	bf00      	nop
    }
  } 
  
  return status; 
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b089      	sub	sp, #36	; 0x24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80042e6:	2300      	movs	r3, #0
 80042e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	e175      	b.n	80045e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80042f4:	2201      	movs	r2, #1
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4013      	ands	r3, r2
 8004306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	429a      	cmp	r2, r3
 800430e:	f040 8164 	bne.w	80045da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d00b      	beq.n	8004332 <HAL_GPIO_Init+0x5e>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d007      	beq.n	8004332 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004326:	2b11      	cmp	r3, #17
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b12      	cmp	r3, #18
 8004330:	d130      	bne.n	8004394 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	2203      	movs	r2, #3
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	43db      	mvns	r3, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4013      	ands	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	4313      	orrs	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004368:	2201      	movs	r2, #1
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	43db      	mvns	r3, r3
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	4013      	ands	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	091b      	lsrs	r3, r3, #4
 800437e:	f003 0201 	and.w	r2, r3, #1
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4313      	orrs	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	2203      	movs	r2, #3
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4013      	ands	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d003      	beq.n	80043d4 <HAL_GPIO_Init+0x100>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b12      	cmp	r3, #18
 80043d2:	d123      	bne.n	800441c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	08da      	lsrs	r2, r3, #3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3208      	adds	r2, #8
 80043dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	220f      	movs	r2, #15
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	08da      	lsrs	r2, r3, #3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3208      	adds	r2, #8
 8004416:	69b9      	ldr	r1, [r7, #24]
 8004418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	2203      	movs	r2, #3
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	43db      	mvns	r3, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4013      	ands	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 0203 	and.w	r2, r3, #3
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4313      	orrs	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80be 	beq.w	80045da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800445e:	4b65      	ldr	r3, [pc, #404]	; (80045f4 <HAL_GPIO_Init+0x320>)
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	4a64      	ldr	r2, [pc, #400]	; (80045f4 <HAL_GPIO_Init+0x320>)
 8004464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004468:	6453      	str	r3, [r2, #68]	; 0x44
 800446a:	4b62      	ldr	r3, [pc, #392]	; (80045f4 <HAL_GPIO_Init+0x320>)
 800446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004476:	4a60      	ldr	r2, [pc, #384]	; (80045f8 <HAL_GPIO_Init+0x324>)
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	089b      	lsrs	r3, r3, #2
 800447c:	3302      	adds	r3, #2
 800447e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004482:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	220f      	movs	r2, #15
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a57      	ldr	r2, [pc, #348]	; (80045fc <HAL_GPIO_Init+0x328>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d037      	beq.n	8004512 <HAL_GPIO_Init+0x23e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a56      	ldr	r2, [pc, #344]	; (8004600 <HAL_GPIO_Init+0x32c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d031      	beq.n	800450e <HAL_GPIO_Init+0x23a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a55      	ldr	r2, [pc, #340]	; (8004604 <HAL_GPIO_Init+0x330>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d02b      	beq.n	800450a <HAL_GPIO_Init+0x236>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a54      	ldr	r2, [pc, #336]	; (8004608 <HAL_GPIO_Init+0x334>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d025      	beq.n	8004506 <HAL_GPIO_Init+0x232>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a53      	ldr	r2, [pc, #332]	; (800460c <HAL_GPIO_Init+0x338>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d01f      	beq.n	8004502 <HAL_GPIO_Init+0x22e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a52      	ldr	r2, [pc, #328]	; (8004610 <HAL_GPIO_Init+0x33c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d019      	beq.n	80044fe <HAL_GPIO_Init+0x22a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a51      	ldr	r2, [pc, #324]	; (8004614 <HAL_GPIO_Init+0x340>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d013      	beq.n	80044fa <HAL_GPIO_Init+0x226>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a50      	ldr	r2, [pc, #320]	; (8004618 <HAL_GPIO_Init+0x344>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00d      	beq.n	80044f6 <HAL_GPIO_Init+0x222>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a4f      	ldr	r2, [pc, #316]	; (800461c <HAL_GPIO_Init+0x348>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d007      	beq.n	80044f2 <HAL_GPIO_Init+0x21e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a4e      	ldr	r2, [pc, #312]	; (8004620 <HAL_GPIO_Init+0x34c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d101      	bne.n	80044ee <HAL_GPIO_Init+0x21a>
 80044ea:	2309      	movs	r3, #9
 80044ec:	e012      	b.n	8004514 <HAL_GPIO_Init+0x240>
 80044ee:	230a      	movs	r3, #10
 80044f0:	e010      	b.n	8004514 <HAL_GPIO_Init+0x240>
 80044f2:	2308      	movs	r3, #8
 80044f4:	e00e      	b.n	8004514 <HAL_GPIO_Init+0x240>
 80044f6:	2307      	movs	r3, #7
 80044f8:	e00c      	b.n	8004514 <HAL_GPIO_Init+0x240>
 80044fa:	2306      	movs	r3, #6
 80044fc:	e00a      	b.n	8004514 <HAL_GPIO_Init+0x240>
 80044fe:	2305      	movs	r3, #5
 8004500:	e008      	b.n	8004514 <HAL_GPIO_Init+0x240>
 8004502:	2304      	movs	r3, #4
 8004504:	e006      	b.n	8004514 <HAL_GPIO_Init+0x240>
 8004506:	2303      	movs	r3, #3
 8004508:	e004      	b.n	8004514 <HAL_GPIO_Init+0x240>
 800450a:	2302      	movs	r3, #2
 800450c:	e002      	b.n	8004514 <HAL_GPIO_Init+0x240>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <HAL_GPIO_Init+0x240>
 8004512:	2300      	movs	r3, #0
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	f002 0203 	and.w	r2, r2, #3
 800451a:	0092      	lsls	r2, r2, #2
 800451c:	4093      	lsls	r3, r2
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4313      	orrs	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004524:	4934      	ldr	r1, [pc, #208]	; (80045f8 <HAL_GPIO_Init+0x324>)
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	089b      	lsrs	r3, r3, #2
 800452a:	3302      	adds	r3, #2
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004532:	4b3c      	ldr	r3, [pc, #240]	; (8004624 <HAL_GPIO_Init+0x350>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	43db      	mvns	r3, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4013      	ands	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004556:	4a33      	ldr	r2, [pc, #204]	; (8004624 <HAL_GPIO_Init+0x350>)
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800455c:	4b31      	ldr	r3, [pc, #196]	; (8004624 <HAL_GPIO_Init+0x350>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	43db      	mvns	r3, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4013      	ands	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004580:	4a28      	ldr	r2, [pc, #160]	; (8004624 <HAL_GPIO_Init+0x350>)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004586:	4b27      	ldr	r3, [pc, #156]	; (8004624 <HAL_GPIO_Init+0x350>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	43db      	mvns	r3, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4013      	ands	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045aa:	4a1e      	ldr	r2, [pc, #120]	; (8004624 <HAL_GPIO_Init+0x350>)
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045b0:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <HAL_GPIO_Init+0x350>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	43db      	mvns	r3, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4013      	ands	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045d4:	4a13      	ldr	r2, [pc, #76]	; (8004624 <HAL_GPIO_Init+0x350>)
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	3301      	adds	r3, #1
 80045de:	61fb      	str	r3, [r7, #28]
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	2b0f      	cmp	r3, #15
 80045e4:	f67f ae86 	bls.w	80042f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80045e8:	bf00      	nop
 80045ea:	3724      	adds	r7, #36	; 0x24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40013800 	.word	0x40013800
 80045fc:	40020000 	.word	0x40020000
 8004600:	40020400 	.word	0x40020400
 8004604:	40020800 	.word	0x40020800
 8004608:	40020c00 	.word	0x40020c00
 800460c:	40021000 	.word	0x40021000
 8004610:	40021400 	.word	0x40021400
 8004614:	40021800 	.word	0x40021800
 8004618:	40021c00 	.word	0x40021c00
 800461c:	40022000 	.word	0x40022000
 8004620:	40022400 	.word	0x40022400
 8004624:	40013c00 	.word	0x40013c00

08004628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	807b      	strh	r3, [r7, #2]
 8004634:	4613      	mov	r3, r2
 8004636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004638:	787b      	ldrb	r3, [r7, #1]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800463e:	887a      	ldrh	r2, [r7, #2]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004644:	e003      	b.n	800464e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004646:	887b      	ldrh	r3, [r7, #2]
 8004648:	041a      	lsls	r2, r3, #16
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	619a      	str	r2, [r3, #24]
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
	...

0800465c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004666:	4b08      	ldr	r3, [pc, #32]	; (8004688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004668:	695a      	ldr	r2, [r3, #20]
 800466a:	88fb      	ldrh	r3, [r7, #6]
 800466c:	4013      	ands	r3, r2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d006      	beq.n	8004680 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004672:	4a05      	ldr	r2, [pc, #20]	; (8004688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004674:	88fb      	ldrh	r3, [r7, #6]
 8004676:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004678:	88fb      	ldrh	r3, [r7, #6]
 800467a:	4618      	mov	r0, r3
 800467c:	f000 f806 	bl	800468c <HAL_GPIO_EXTI_Callback>
  }
}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40013c00 	.word	0x40013c00

0800468c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e07f      	b.n	80047b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fd fde2 	bl	8002294 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2224      	movs	r2, #36	; 0x24
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0201 	bic.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004704:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d107      	bne.n	800471e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800471a:	609a      	str	r2, [r3, #8]
 800471c:	e006      	b.n	800472c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800472a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	2b02      	cmp	r3, #2
 8004732:	d104      	bne.n	800473e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800473c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6859      	ldr	r1, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b1d      	ldr	r3, [pc, #116]	; (80047c0 <HAL_I2C_Init+0x11c>)
 800474a:	430b      	orrs	r3, r1
 800474c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800475c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	ea42 0103 	orr.w	r1, r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	021a      	lsls	r2, r3, #8
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69d9      	ldr	r1, [r3, #28]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a1a      	ldr	r2, [r3, #32]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0201 	orr.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	02008000 	.word	0x02008000

080047c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d138      	bne.n	800484c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e032      	b.n	800484e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2224      	movs	r2, #36	; 0x24
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0201 	bic.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004816:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6819      	ldr	r1, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	e000      	b.n	800484e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800484c:	2302      	movs	r3, #2
  }
}
 800484e:	4618      	mov	r0, r3
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800485a:	b480      	push	{r7}
 800485c:	b085      	sub	sp, #20
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b20      	cmp	r3, #32
 800486e:	d139      	bne.n	80048e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800487a:	2302      	movs	r3, #2
 800487c:	e033      	b.n	80048e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2224      	movs	r2, #36	; 0x24
 800488a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0201 	bic.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	021b      	lsls	r3, r3, #8
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	e000      	b.n	80048e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
  }
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a04      	ldr	r2, [pc, #16]	; (8004910 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004902:	6013      	str	r3, [r2, #0]
}
 8004904:	bf00      	nop
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40007000 	.word	0x40007000

08004914 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800491e:	4b23      	ldr	r3, [pc, #140]	; (80049ac <HAL_PWREx_EnableOverDrive+0x98>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	4a22      	ldr	r2, [pc, #136]	; (80049ac <HAL_PWREx_EnableOverDrive+0x98>)
 8004924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004928:	6413      	str	r3, [r2, #64]	; 0x40
 800492a:	4b20      	ldr	r3, [pc, #128]	; (80049ac <HAL_PWREx_EnableOverDrive+0x98>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004936:	4b1e      	ldr	r3, [pc, #120]	; (80049b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1d      	ldr	r2, [pc, #116]	; (80049b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800493c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004940:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004942:	f7fe fd29 	bl	8003398 <HAL_GetTick>
 8004946:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004948:	e009      	b.n	800495e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800494a:	f7fe fd25 	bl	8003398 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004958:	d901      	bls.n	800495e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e022      	b.n	80049a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800495e:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496a:	d1ee      	bne.n	800494a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800496c:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a0f      	ldr	r2, [pc, #60]	; (80049b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004976:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004978:	f7fe fd0e 	bl	8003398 <HAL_GetTick>
 800497c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800497e:	e009      	b.n	8004994 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004980:	f7fe fd0a 	bl	8003398 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800498e:	d901      	bls.n	8004994 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e007      	b.n	80049a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004994:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049a0:	d1ee      	bne.n	8004980 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40023800 	.word	0x40023800
 80049b0:	40007000 	.word	0x40007000

080049b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80049bc:	2300      	movs	r3, #0
 80049be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e291      	b.n	8004eee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 8087 	beq.w	8004ae6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049d8:	4b96      	ldr	r3, [pc, #600]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 030c 	and.w	r3, r3, #12
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d00c      	beq.n	80049fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049e4:	4b93      	ldr	r3, [pc, #588]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 030c 	and.w	r3, r3, #12
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d112      	bne.n	8004a16 <HAL_RCC_OscConfig+0x62>
 80049f0:	4b90      	ldr	r3, [pc, #576]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049fc:	d10b      	bne.n	8004a16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049fe:	4b8d      	ldr	r3, [pc, #564]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d06c      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x130>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d168      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e26b      	b.n	8004eee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1e:	d106      	bne.n	8004a2e <HAL_RCC_OscConfig+0x7a>
 8004a20:	4b84      	ldr	r3, [pc, #528]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a83      	ldr	r2, [pc, #524]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	e02e      	b.n	8004a8c <HAL_RCC_OscConfig+0xd8>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10c      	bne.n	8004a50 <HAL_RCC_OscConfig+0x9c>
 8004a36:	4b7f      	ldr	r3, [pc, #508]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a7e      	ldr	r2, [pc, #504]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	4b7c      	ldr	r3, [pc, #496]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a7b      	ldr	r2, [pc, #492]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	e01d      	b.n	8004a8c <HAL_RCC_OscConfig+0xd8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a58:	d10c      	bne.n	8004a74 <HAL_RCC_OscConfig+0xc0>
 8004a5a:	4b76      	ldr	r3, [pc, #472]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a75      	ldr	r2, [pc, #468]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	4b73      	ldr	r3, [pc, #460]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a72      	ldr	r2, [pc, #456]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	e00b      	b.n	8004a8c <HAL_RCC_OscConfig+0xd8>
 8004a74:	4b6f      	ldr	r3, [pc, #444]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a6e      	ldr	r2, [pc, #440]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	4b6c      	ldr	r3, [pc, #432]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a6b      	ldr	r2, [pc, #428]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d013      	beq.n	8004abc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fe fc80 	bl	8003398 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a9c:	f7fe fc7c 	bl	8003398 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	; 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e21f      	b.n	8004eee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aae:	4b61      	ldr	r3, [pc, #388]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0xe8>
 8004aba:	e014      	b.n	8004ae6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fe fc6c 	bl	8003398 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac4:	f7fe fc68 	bl	8003398 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	; 0x64
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e20b      	b.n	8004eee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ad6:	4b57      	ldr	r3, [pc, #348]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x110>
 8004ae2:	e000      	b.n	8004ae6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d069      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004af2:	4b50      	ldr	r3, [pc, #320]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00b      	beq.n	8004b16 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004afe:	4b4d      	ldr	r3, [pc, #308]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d11c      	bne.n	8004b44 <HAL_RCC_OscConfig+0x190>
 8004b0a:	4b4a      	ldr	r3, [pc, #296]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d116      	bne.n	8004b44 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b16:	4b47      	ldr	r3, [pc, #284]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d005      	beq.n	8004b2e <HAL_RCC_OscConfig+0x17a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d001      	beq.n	8004b2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e1df      	b.n	8004eee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2e:	4b41      	ldr	r3, [pc, #260]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	493d      	ldr	r1, [pc, #244]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b42:	e040      	b.n	8004bc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d023      	beq.n	8004b94 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b4c:	4b39      	ldr	r3, [pc, #228]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a38      	ldr	r2, [pc, #224]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b52:	f043 0301 	orr.w	r3, r3, #1
 8004b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fe fc1e 	bl	8003398 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b60:	f7fe fc1a 	bl	8003398 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e1bd      	b.n	8004eee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b72:	4b30      	ldr	r3, [pc, #192]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f0      	beq.n	8004b60 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7e:	4b2d      	ldr	r3, [pc, #180]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	4929      	ldr	r1, [pc, #164]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	600b      	str	r3, [r1, #0]
 8004b92:	e018      	b.n	8004bc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b94:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a26      	ldr	r2, [pc, #152]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b9a:	f023 0301 	bic.w	r3, r3, #1
 8004b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba0:	f7fe fbfa 	bl	8003398 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba8:	f7fe fbf6 	bl	8003398 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e199      	b.n	8004eee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bba:	4b1e      	ldr	r3, [pc, #120]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f0      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d038      	beq.n	8004c44 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d019      	beq.n	8004c0e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bda:	4b16      	ldr	r3, [pc, #88]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bde:	4a15      	ldr	r2, [pc, #84]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004be0:	f043 0301 	orr.w	r3, r3, #1
 8004be4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be6:	f7fe fbd7 	bl	8003398 <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bee:	f7fe fbd3 	bl	8003398 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e176      	b.n	8004eee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c00:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0f0      	beq.n	8004bee <HAL_RCC_OscConfig+0x23a>
 8004c0c:	e01a      	b.n	8004c44 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c0e:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c12:	4a08      	ldr	r2, [pc, #32]	; (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1a:	f7fe fbbd 	bl	8003398 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c20:	e00a      	b.n	8004c38 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c22:	f7fe fbb9 	bl	8003398 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d903      	bls.n	8004c38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e15c      	b.n	8004eee <HAL_RCC_OscConfig+0x53a>
 8004c34:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c38:	4b91      	ldr	r3, [pc, #580]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1ee      	bne.n	8004c22 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80a4 	beq.w	8004d9a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c52:	4b8b      	ldr	r3, [pc, #556]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10d      	bne.n	8004c7a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c5e:	4b88      	ldr	r3, [pc, #544]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	4a87      	ldr	r2, [pc, #540]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c68:	6413      	str	r3, [r2, #64]	; 0x40
 8004c6a:	4b85      	ldr	r3, [pc, #532]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c76:	2301      	movs	r3, #1
 8004c78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c7a:	4b82      	ldr	r3, [pc, #520]	; (8004e84 <HAL_RCC_OscConfig+0x4d0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d118      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004c86:	4b7f      	ldr	r3, [pc, #508]	; (8004e84 <HAL_RCC_OscConfig+0x4d0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a7e      	ldr	r2, [pc, #504]	; (8004e84 <HAL_RCC_OscConfig+0x4d0>)
 8004c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c92:	f7fe fb81 	bl	8003398 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c9a:	f7fe fb7d 	bl	8003398 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b64      	cmp	r3, #100	; 0x64
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e120      	b.n	8004eee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cac:	4b75      	ldr	r3, [pc, #468]	; (8004e84 <HAL_RCC_OscConfig+0x4d0>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f0      	beq.n	8004c9a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d106      	bne.n	8004cce <HAL_RCC_OscConfig+0x31a>
 8004cc0:	4b6f      	ldr	r3, [pc, #444]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc4:	4a6e      	ldr	r2, [pc, #440]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	6713      	str	r3, [r2, #112]	; 0x70
 8004ccc:	e02d      	b.n	8004d2a <HAL_RCC_OscConfig+0x376>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x33c>
 8004cd6:	4b6a      	ldr	r3, [pc, #424]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cda:	4a69      	ldr	r2, [pc, #420]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004cdc:	f023 0301 	bic.w	r3, r3, #1
 8004ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce2:	4b67      	ldr	r3, [pc, #412]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce6:	4a66      	ldr	r2, [pc, #408]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004ce8:	f023 0304 	bic.w	r3, r3, #4
 8004cec:	6713      	str	r3, [r2, #112]	; 0x70
 8004cee:	e01c      	b.n	8004d2a <HAL_RCC_OscConfig+0x376>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	2b05      	cmp	r3, #5
 8004cf6:	d10c      	bne.n	8004d12 <HAL_RCC_OscConfig+0x35e>
 8004cf8:	4b61      	ldr	r3, [pc, #388]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfc:	4a60      	ldr	r2, [pc, #384]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004cfe:	f043 0304 	orr.w	r3, r3, #4
 8004d02:	6713      	str	r3, [r2, #112]	; 0x70
 8004d04:	4b5e      	ldr	r3, [pc, #376]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d08:	4a5d      	ldr	r2, [pc, #372]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004d0a:	f043 0301 	orr.w	r3, r3, #1
 8004d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d10:	e00b      	b.n	8004d2a <HAL_RCC_OscConfig+0x376>
 8004d12:	4b5b      	ldr	r3, [pc, #364]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d16:	4a5a      	ldr	r2, [pc, #360]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d1e:	4b58      	ldr	r3, [pc, #352]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d22:	4a57      	ldr	r2, [pc, #348]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004d24:	f023 0304 	bic.w	r3, r3, #4
 8004d28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d015      	beq.n	8004d5e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d32:	f7fe fb31 	bl	8003398 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d38:	e00a      	b.n	8004d50 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3a:	f7fe fb2d 	bl	8003398 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e0ce      	b.n	8004eee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d50:	4b4b      	ldr	r3, [pc, #300]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0ee      	beq.n	8004d3a <HAL_RCC_OscConfig+0x386>
 8004d5c:	e014      	b.n	8004d88 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5e:	f7fe fb1b 	bl	8003398 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d64:	e00a      	b.n	8004d7c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d66:	f7fe fb17 	bl	8003398 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e0b8      	b.n	8004eee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d7c:	4b40      	ldr	r3, [pc, #256]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1ee      	bne.n	8004d66 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d105      	bne.n	8004d9a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d8e:	4b3c      	ldr	r3, [pc, #240]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	4a3b      	ldr	r2, [pc, #236]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 80a4 	beq.w	8004eec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004da4:	4b36      	ldr	r3, [pc, #216]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 030c 	and.w	r3, r3, #12
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d06b      	beq.n	8004e88 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d149      	bne.n	8004e4c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db8:	4b31      	ldr	r3, [pc, #196]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a30      	ldr	r2, [pc, #192]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc4:	f7fe fae8 	bl	8003398 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dcc:	f7fe fae4 	bl	8003398 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e087      	b.n	8004eee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dde:	4b28      	ldr	r3, [pc, #160]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69da      	ldr	r2, [r3, #28]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	019b      	lsls	r3, r3, #6
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	085b      	lsrs	r3, r3, #1
 8004e02:	3b01      	subs	r3, #1
 8004e04:	041b      	lsls	r3, r3, #16
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	061b      	lsls	r3, r3, #24
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	4a1b      	ldr	r2, [pc, #108]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004e12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e16:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e18:	4b19      	ldr	r3, [pc, #100]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a18      	ldr	r2, [pc, #96]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e24:	f7fe fab8 	bl	8003398 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e2c:	f7fe fab4 	bl	8003398 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e057      	b.n	8004eee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3e:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0x478>
 8004e4a:	e04f      	b.n	8004eec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4c:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a0b      	ldr	r2, [pc, #44]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7fe fa9e 	bl	8003398 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e60:	f7fe fa9a 	bl	8003398 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e03d      	b.n	8004eee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e72:	4b03      	ldr	r3, [pc, #12]	; (8004e80 <HAL_RCC_OscConfig+0x4cc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f0      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4ac>
 8004e7e:	e035      	b.n	8004eec <HAL_RCC_OscConfig+0x538>
 8004e80:	40023800 	.word	0x40023800
 8004e84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004e88:	4b1b      	ldr	r3, [pc, #108]	; (8004ef8 <HAL_RCC_OscConfig+0x544>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d028      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d121      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d11a      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004eb8:	4013      	ands	r3, r2
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ebe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d111      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d107      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d001      	beq.n	8004eec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e000      	b.n	8004eee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40023800 	.word	0x40023800

08004efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e0d0      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f14:	4b6a      	ldr	r3, [pc, #424]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 030f 	and.w	r3, r3, #15
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d910      	bls.n	8004f44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f22:	4b67      	ldr	r3, [pc, #412]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f023 020f 	bic.w	r2, r3, #15
 8004f2a:	4965      	ldr	r1, [pc, #404]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f32:	4b63      	ldr	r3, [pc, #396]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d001      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0b8      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d020      	beq.n	8004f92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f5c:	4b59      	ldr	r3, [pc, #356]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	4a58      	ldr	r2, [pc, #352]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f74:	4b53      	ldr	r3, [pc, #332]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	4a52      	ldr	r2, [pc, #328]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f80:	4b50      	ldr	r3, [pc, #320]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	494d      	ldr	r1, [pc, #308]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d040      	beq.n	8005020 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d107      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa6:	4b47      	ldr	r3, [pc, #284]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d115      	bne.n	8004fde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e07f      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d107      	bne.n	8004fce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fbe:	4b41      	ldr	r3, [pc, #260]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e073      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fce:	4b3d      	ldr	r3, [pc, #244]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e06b      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fde:	4b39      	ldr	r3, [pc, #228]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f023 0203 	bic.w	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	4936      	ldr	r1, [pc, #216]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff0:	f7fe f9d2 	bl	8003398 <HAL_GetTick>
 8004ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff8:	f7fe f9ce 	bl	8003398 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	; 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e053      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500e:	4b2d      	ldr	r3, [pc, #180]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 020c 	and.w	r2, r3, #12
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	429a      	cmp	r2, r3
 800501e:	d1eb      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005020:	4b27      	ldr	r3, [pc, #156]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 030f 	and.w	r3, r3, #15
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d210      	bcs.n	8005050 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b24      	ldr	r3, [pc, #144]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 020f 	bic.w	r2, r3, #15
 8005036:	4922      	ldr	r1, [pc, #136]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	4313      	orrs	r3, r2
 800503c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800503e:	4b20      	ldr	r3, [pc, #128]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d001      	beq.n	8005050 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e032      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	d008      	beq.n	800506e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800505c:	4b19      	ldr	r3, [pc, #100]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	4916      	ldr	r1, [pc, #88]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 800506a:	4313      	orrs	r3, r2
 800506c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d009      	beq.n	800508e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800507a:	4b12      	ldr	r3, [pc, #72]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	490e      	ldr	r1, [pc, #56]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 800508a:	4313      	orrs	r3, r2
 800508c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800508e:	f000 f821 	bl	80050d4 <HAL_RCC_GetSysClockFreq>
 8005092:	4601      	mov	r1, r0
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	091b      	lsrs	r3, r3, #4
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	4a0a      	ldr	r2, [pc, #40]	; (80050c8 <HAL_RCC_ClockConfig+0x1cc>)
 80050a0:	5cd3      	ldrb	r3, [r2, r3]
 80050a2:	fa21 f303 	lsr.w	r3, r1, r3
 80050a6:	4a09      	ldr	r2, [pc, #36]	; (80050cc <HAL_RCC_ClockConfig+0x1d0>)
 80050a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050aa:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <HAL_RCC_ClockConfig+0x1d4>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fe f92e 	bl	8003310 <HAL_InitTick>

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	40023c00 	.word	0x40023c00
 80050c4:	40023800 	.word	0x40023800
 80050c8:	0800c0a4 	.word	0x0800c0a4
 80050cc:	20000010 	.word	0x20000010
 80050d0:	20000014 	.word	0x20000014

080050d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	607b      	str	r3, [r7, #4]
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	2300      	movs	r3, #0
 80050e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050ea:	4b63      	ldr	r3, [pc, #396]	; (8005278 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 030c 	and.w	r3, r3, #12
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d007      	beq.n	8005106 <HAL_RCC_GetSysClockFreq+0x32>
 80050f6:	2b08      	cmp	r3, #8
 80050f8:	d008      	beq.n	800510c <HAL_RCC_GetSysClockFreq+0x38>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f040 80b4 	bne.w	8005268 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005100:	4b5e      	ldr	r3, [pc, #376]	; (800527c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005102:	60bb      	str	r3, [r7, #8]
      break;
 8005104:	e0b3      	b.n	800526e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005106:	4b5e      	ldr	r3, [pc, #376]	; (8005280 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005108:	60bb      	str	r3, [r7, #8]
      break;
 800510a:	e0b0      	b.n	800526e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800510c:	4b5a      	ldr	r3, [pc, #360]	; (8005278 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005114:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005116:	4b58      	ldr	r3, [pc, #352]	; (8005278 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d04a      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005122:	4b55      	ldr	r3, [pc, #340]	; (8005278 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	099b      	lsrs	r3, r3, #6
 8005128:	f04f 0400 	mov.w	r4, #0
 800512c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	ea03 0501 	and.w	r5, r3, r1
 8005138:	ea04 0602 	and.w	r6, r4, r2
 800513c:	4629      	mov	r1, r5
 800513e:	4632      	mov	r2, r6
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	f04f 0400 	mov.w	r4, #0
 8005148:	0154      	lsls	r4, r2, #5
 800514a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800514e:	014b      	lsls	r3, r1, #5
 8005150:	4619      	mov	r1, r3
 8005152:	4622      	mov	r2, r4
 8005154:	1b49      	subs	r1, r1, r5
 8005156:	eb62 0206 	sbc.w	r2, r2, r6
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	f04f 0400 	mov.w	r4, #0
 8005162:	0194      	lsls	r4, r2, #6
 8005164:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005168:	018b      	lsls	r3, r1, #6
 800516a:	1a5b      	subs	r3, r3, r1
 800516c:	eb64 0402 	sbc.w	r4, r4, r2
 8005170:	f04f 0100 	mov.w	r1, #0
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	00e2      	lsls	r2, r4, #3
 800517a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800517e:	00d9      	lsls	r1, r3, #3
 8005180:	460b      	mov	r3, r1
 8005182:	4614      	mov	r4, r2
 8005184:	195b      	adds	r3, r3, r5
 8005186:	eb44 0406 	adc.w	r4, r4, r6
 800518a:	f04f 0100 	mov.w	r1, #0
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	0262      	lsls	r2, r4, #9
 8005194:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005198:	0259      	lsls	r1, r3, #9
 800519a:	460b      	mov	r3, r1
 800519c:	4614      	mov	r4, r2
 800519e:	4618      	mov	r0, r3
 80051a0:	4621      	mov	r1, r4
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f04f 0400 	mov.w	r4, #0
 80051a8:	461a      	mov	r2, r3
 80051aa:	4623      	mov	r3, r4
 80051ac:	f7fb fd8c 	bl	8000cc8 <__aeabi_uldivmod>
 80051b0:	4603      	mov	r3, r0
 80051b2:	460c      	mov	r4, r1
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	e049      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051b8:	4b2f      	ldr	r3, [pc, #188]	; (8005278 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	099b      	lsrs	r3, r3, #6
 80051be:	f04f 0400 	mov.w	r4, #0
 80051c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	ea03 0501 	and.w	r5, r3, r1
 80051ce:	ea04 0602 	and.w	r6, r4, r2
 80051d2:	4629      	mov	r1, r5
 80051d4:	4632      	mov	r2, r6
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	f04f 0400 	mov.w	r4, #0
 80051de:	0154      	lsls	r4, r2, #5
 80051e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80051e4:	014b      	lsls	r3, r1, #5
 80051e6:	4619      	mov	r1, r3
 80051e8:	4622      	mov	r2, r4
 80051ea:	1b49      	subs	r1, r1, r5
 80051ec:	eb62 0206 	sbc.w	r2, r2, r6
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	f04f 0400 	mov.w	r4, #0
 80051f8:	0194      	lsls	r4, r2, #6
 80051fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80051fe:	018b      	lsls	r3, r1, #6
 8005200:	1a5b      	subs	r3, r3, r1
 8005202:	eb64 0402 	sbc.w	r4, r4, r2
 8005206:	f04f 0100 	mov.w	r1, #0
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	00e2      	lsls	r2, r4, #3
 8005210:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005214:	00d9      	lsls	r1, r3, #3
 8005216:	460b      	mov	r3, r1
 8005218:	4614      	mov	r4, r2
 800521a:	195b      	adds	r3, r3, r5
 800521c:	eb44 0406 	adc.w	r4, r4, r6
 8005220:	f04f 0100 	mov.w	r1, #0
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	02a2      	lsls	r2, r4, #10
 800522a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800522e:	0299      	lsls	r1, r3, #10
 8005230:	460b      	mov	r3, r1
 8005232:	4614      	mov	r4, r2
 8005234:	4618      	mov	r0, r3
 8005236:	4621      	mov	r1, r4
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f04f 0400 	mov.w	r4, #0
 800523e:	461a      	mov	r2, r3
 8005240:	4623      	mov	r3, r4
 8005242:	f7fb fd41 	bl	8000cc8 <__aeabi_uldivmod>
 8005246:	4603      	mov	r3, r0
 8005248:	460c      	mov	r4, r1
 800524a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800524c:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	0c1b      	lsrs	r3, r3, #16
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	3301      	adds	r3, #1
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	fbb2 f3f3 	udiv	r3, r2, r3
 8005264:	60bb      	str	r3, [r7, #8]
      break;
 8005266:	e002      	b.n	800526e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005268:	4b04      	ldr	r3, [pc, #16]	; (800527c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800526a:	60bb      	str	r3, [r7, #8]
      break;
 800526c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800526e:	68bb      	ldr	r3, [r7, #8]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005278:	40023800 	.word	0x40023800
 800527c:	00f42400 	.word	0x00f42400
 8005280:	007a1200 	.word	0x007a1200

08005284 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005288:	4b03      	ldr	r3, [pc, #12]	; (8005298 <HAL_RCC_GetHCLKFreq+0x14>)
 800528a:	681b      	ldr	r3, [r3, #0]
}
 800528c:	4618      	mov	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000010 	.word	0x20000010

0800529c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052a0:	f7ff fff0 	bl	8005284 <HAL_RCC_GetHCLKFreq>
 80052a4:	4601      	mov	r1, r0
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	0a9b      	lsrs	r3, r3, #10
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	4a03      	ldr	r2, [pc, #12]	; (80052c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052b2:	5cd3      	ldrb	r3, [r2, r3]
 80052b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40023800 	.word	0x40023800
 80052c0:	0800c0b4 	.word	0x0800c0b4

080052c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052c8:	f7ff ffdc 	bl	8005284 <HAL_RCC_GetHCLKFreq>
 80052cc:	4601      	mov	r1, r0
 80052ce:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	0b5b      	lsrs	r3, r3, #13
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	4a03      	ldr	r2, [pc, #12]	; (80052e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052da:	5cd3      	ldrb	r3, [r2, r3]
 80052dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40023800 	.word	0x40023800
 80052e8:	0800c0b4 	.word	0x0800c0b4

080052ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005300:	2300      	movs	r3, #0
 8005302:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d012      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005314:	4b69      	ldr	r3, [pc, #420]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	4a68      	ldr	r2, [pc, #416]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800531e:	6093      	str	r3, [r2, #8]
 8005320:	4b66      	ldr	r3, [pc, #408]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005328:	4964      	ldr	r1, [pc, #400]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800532a:	4313      	orrs	r3, r2
 800532c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005336:	2301      	movs	r3, #1
 8005338:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d017      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005346:	4b5d      	ldr	r3, [pc, #372]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800534c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005354:	4959      	ldr	r1, [pc, #356]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005356:	4313      	orrs	r3, r2
 8005358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005360:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005364:	d101      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005366:	2301      	movs	r3, #1
 8005368:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005372:	2301      	movs	r3, #1
 8005374:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d017      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005382:	4b4e      	ldr	r3, [pc, #312]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005388:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	494a      	ldr	r1, [pc, #296]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053a0:	d101      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80053a2:	2301      	movs	r3, #1
 80053a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80053ae:	2301      	movs	r3, #1
 80053b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80053be:	2301      	movs	r3, #1
 80053c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 808b 	beq.w	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053d0:	4b3a      	ldr	r3, [pc, #232]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d4:	4a39      	ldr	r2, [pc, #228]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053da:	6413      	str	r3, [r2, #64]	; 0x40
 80053dc:	4b37      	ldr	r3, [pc, #220]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80053e8:	4b35      	ldr	r3, [pc, #212]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a34      	ldr	r2, [pc, #208]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f4:	f7fd ffd0 	bl	8003398 <HAL_GetTick>
 80053f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053fa:	e008      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053fc:	f7fd ffcc 	bl	8003398 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b64      	cmp	r3, #100	; 0x64
 8005408:	d901      	bls.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e355      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800540e:	4b2c      	ldr	r3, [pc, #176]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0f0      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800541a:	4b28      	ldr	r3, [pc, #160]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005422:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d035      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	429a      	cmp	r2, r3
 8005436:	d02e      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005438:	4b20      	ldr	r3, [pc, #128]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005440:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005442:	4b1e      	ldr	r3, [pc, #120]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005446:	4a1d      	ldr	r2, [pc, #116]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800544e:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005452:	4a1a      	ldr	r2, [pc, #104]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005458:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800545a:	4a18      	ldr	r2, [pc, #96]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005460:	4b16      	ldr	r3, [pc, #88]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b01      	cmp	r3, #1
 800546a:	d114      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546c:	f7fd ff94 	bl	8003398 <HAL_GetTick>
 8005470:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005472:	e00a      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005474:	f7fd ff90 	bl	8003398 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e317      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800548a:	4b0c      	ldr	r3, [pc, #48]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0ee      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054a2:	d111      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054b0:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80054b2:	400b      	ands	r3, r1
 80054b4:	4901      	ldr	r1, [pc, #4]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	608b      	str	r3, [r1, #8]
 80054ba:	e00b      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80054bc:	40023800 	.word	0x40023800
 80054c0:	40007000 	.word	0x40007000
 80054c4:	0ffffcff 	.word	0x0ffffcff
 80054c8:	4bb0      	ldr	r3, [pc, #704]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	4aaf      	ldr	r2, [pc, #700]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054d2:	6093      	str	r3, [r2, #8]
 80054d4:	4bad      	ldr	r3, [pc, #692]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e0:	49aa      	ldr	r1, [pc, #680]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0310 	and.w	r3, r3, #16
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d010      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054f2:	4ba6      	ldr	r3, [pc, #664]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054f8:	4aa4      	ldr	r2, [pc, #656]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005502:	4ba2      	ldr	r3, [pc, #648]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005504:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	499f      	ldr	r1, [pc, #636]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005520:	4b9a      	ldr	r3, [pc, #616]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005526:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800552e:	4997      	ldr	r1, [pc, #604]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005542:	4b92      	ldr	r3, [pc, #584]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005548:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005550:	498e      	ldr	r1, [pc, #568]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005564:	4b89      	ldr	r3, [pc, #548]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005572:	4986      	ldr	r1, [pc, #536]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005586:	4b81      	ldr	r3, [pc, #516]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005594:	497d      	ldr	r1, [pc, #500]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055a8:	4b78      	ldr	r3, [pc, #480]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ae:	f023 0203 	bic.w	r2, r3, #3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b6:	4975      	ldr	r1, [pc, #468]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055ca:	4b70      	ldr	r3, [pc, #448]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d0:	f023 020c 	bic.w	r2, r3, #12
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d8:	496c      	ldr	r1, [pc, #432]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00a      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055ec:	4b67      	ldr	r3, [pc, #412]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fa:	4964      	ldr	r1, [pc, #400]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800560e:	4b5f      	ldr	r3, [pc, #380]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005614:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561c:	495b      	ldr	r1, [pc, #364]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005630:	4b56      	ldr	r3, [pc, #344]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005636:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563e:	4953      	ldr	r1, [pc, #332]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005652:	4b4e      	ldr	r3, [pc, #312]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005658:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005660:	494a      	ldr	r1, [pc, #296]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00a      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005674:	4b45      	ldr	r3, [pc, #276]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005682:	4942      	ldr	r1, [pc, #264]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005696:	4b3d      	ldr	r3, [pc, #244]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a4:	4939      	ldr	r1, [pc, #228]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056b8:	4b34      	ldr	r3, [pc, #208]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056c6:	4931      	ldr	r1, [pc, #196]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d011      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80056da:	4b2c      	ldr	r3, [pc, #176]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056e8:	4928      	ldr	r1, [pc, #160]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056f8:	d101      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80056fa:	2301      	movs	r3, #1
 80056fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800570a:	2301      	movs	r3, #1
 800570c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800571a:	4b1c      	ldr	r3, [pc, #112]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800571c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005720:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005728:	4918      	ldr	r1, [pc, #96]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00b      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800573c:	4b13      	ldr	r3, [pc, #76]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800573e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005742:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800574c:	490f      	ldr	r1, [pc, #60]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d005      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005762:	f040 80d8 	bne.w	8005916 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005766:	4b09      	ldr	r3, [pc, #36]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a08      	ldr	r2, [pc, #32]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800576c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005772:	f7fd fe11 	bl	8003398 <HAL_GetTick>
 8005776:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005778:	e00a      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800577a:	f7fd fe0d 	bl	8003398 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b64      	cmp	r3, #100	; 0x64
 8005786:	d903      	bls.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e196      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800578c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005790:	4b6c      	ldr	r3, [pc, #432]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1ee      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d021      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x500>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d11d      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80057b0:	4b64      	ldr	r3, [pc, #400]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057b6:	0c1b      	lsrs	r3, r3, #16
 80057b8:	f003 0303 	and.w	r3, r3, #3
 80057bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80057be:	4b61      	ldr	r3, [pc, #388]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c4:	0e1b      	lsrs	r3, r3, #24
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	019a      	lsls	r2, r3, #6
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	041b      	lsls	r3, r3, #16
 80057d6:	431a      	orrs	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	061b      	lsls	r3, r3, #24
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	071b      	lsls	r3, r3, #28
 80057e4:	4957      	ldr	r1, [pc, #348]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d004      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005800:	d00a      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800580a:	2b00      	cmp	r3, #0
 800580c:	d02e      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005816:	d129      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005818:	4b4a      	ldr	r3, [pc, #296]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800581a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800581e:	0c1b      	lsrs	r3, r3, #16
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005826:	4b47      	ldr	r3, [pc, #284]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800582c:	0f1b      	lsrs	r3, r3, #28
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	019a      	lsls	r2, r3, #6
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	041b      	lsls	r3, r3, #16
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	061b      	lsls	r3, r3, #24
 8005846:	431a      	orrs	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	071b      	lsls	r3, r3, #28
 800584c:	493d      	ldr	r1, [pc, #244]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800584e:	4313      	orrs	r3, r2
 8005850:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005854:	4b3b      	ldr	r3, [pc, #236]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800585a:	f023 021f 	bic.w	r2, r3, #31
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	3b01      	subs	r3, #1
 8005864:	4937      	ldr	r1, [pc, #220]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01d      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005878:	4b32      	ldr	r3, [pc, #200]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800587a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800587e:	0e1b      	lsrs	r3, r3, #24
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005886:	4b2f      	ldr	r3, [pc, #188]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800588c:	0f1b      	lsrs	r3, r3, #28
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	019a      	lsls	r2, r3, #6
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	041b      	lsls	r3, r3, #16
 80058a0:	431a      	orrs	r2, r3
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	061b      	lsls	r3, r3, #24
 80058a6:	431a      	orrs	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	071b      	lsls	r3, r3, #28
 80058ac:	4925      	ldr	r1, [pc, #148]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d011      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	019a      	lsls	r2, r3, #6
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	041b      	lsls	r3, r3, #16
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	061b      	lsls	r3, r3, #24
 80058d4:	431a      	orrs	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	071b      	lsls	r3, r3, #28
 80058dc:	4919      	ldr	r1, [pc, #100]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80058e4:	4b17      	ldr	r3, [pc, #92]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a16      	ldr	r2, [pc, #88]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f0:	f7fd fd52 	bl	8003398 <HAL_GetTick>
 80058f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058f8:	f7fd fd4e 	bl	8003398 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b64      	cmp	r3, #100	; 0x64
 8005904:	d901      	bls.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e0d7      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800590a:	4b0e      	ldr	r3, [pc, #56]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f0      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	2b01      	cmp	r3, #1
 800591a:	f040 80cd 	bne.w	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800591e:	4b09      	ldr	r3, [pc, #36]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a08      	ldr	r2, [pc, #32]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005928:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800592a:	f7fd fd35 	bl	8003398 <HAL_GetTick>
 800592e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005930:	e00a      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005932:	f7fd fd31 	bl	8003398 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b64      	cmp	r3, #100	; 0x64
 800593e:	d903      	bls.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e0ba      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005944:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005948:	4b5e      	ldr	r3, [pc, #376]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005954:	d0ed      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005966:	2b00      	cmp	r3, #0
 8005968:	d009      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005972:	2b00      	cmp	r3, #0
 8005974:	d02e      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d12a      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800597e:	4b51      	ldr	r3, [pc, #324]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005984:	0c1b      	lsrs	r3, r3, #16
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800598c:	4b4d      	ldr	r3, [pc, #308]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800598e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005992:	0f1b      	lsrs	r3, r3, #28
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	019a      	lsls	r2, r3, #6
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	041b      	lsls	r3, r3, #16
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	061b      	lsls	r3, r3, #24
 80059ac:	431a      	orrs	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	071b      	lsls	r3, r3, #28
 80059b2:	4944      	ldr	r1, [pc, #272]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80059ba:	4b42      	ldr	r3, [pc, #264]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c8:	3b01      	subs	r3, #1
 80059ca:	021b      	lsls	r3, r3, #8
 80059cc:	493d      	ldr	r1, [pc, #244]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d022      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059e8:	d11d      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80059ea:	4b36      	ldr	r3, [pc, #216]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f0:	0e1b      	lsrs	r3, r3, #24
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059f8:	4b32      	ldr	r3, [pc, #200]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fe:	0f1b      	lsrs	r3, r3, #28
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	019a      	lsls	r2, r3, #6
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	041b      	lsls	r3, r3, #16
 8005a12:	431a      	orrs	r2, r3
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	061b      	lsls	r3, r3, #24
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	071b      	lsls	r3, r3, #28
 8005a1e:	4929      	ldr	r1, [pc, #164]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d028      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a32:	4b24      	ldr	r3, [pc, #144]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a38:	0e1b      	lsrs	r3, r3, #24
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a40:	4b20      	ldr	r3, [pc, #128]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a46:	0c1b      	lsrs	r3, r3, #16
 8005a48:	f003 0303 	and.w	r3, r3, #3
 8005a4c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	019a      	lsls	r2, r3, #6
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	041b      	lsls	r3, r3, #16
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	061b      	lsls	r3, r3, #24
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	071b      	lsls	r3, r3, #28
 8005a66:	4917      	ldr	r1, [pc, #92]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a6e:	4b15      	ldr	r3, [pc, #84]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	4911      	ldr	r1, [pc, #68]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a84:	4b0f      	ldr	r3, [pc, #60]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a0e      	ldr	r2, [pc, #56]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a90:	f7fd fc82 	bl	8003398 <HAL_GetTick>
 8005a94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a96:	e008      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a98:	f7fd fc7e 	bl	8003398 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b64      	cmp	r3, #100	; 0x64
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e007      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005aaa:	4b06      	ldr	r3, [pc, #24]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ab2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ab6:	d1ef      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3720      	adds	r7, #32
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	40023800 	.word	0x40023800

08005ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e084      	b.n	8005be4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d106      	bne.n	8005afa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7fc ff67 	bl	80029c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2202      	movs	r2, #2
 8005afe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b10:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b1a:	d902      	bls.n	8005b22 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	e002      	b.n	8005b28 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b26:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b30:	d007      	beq.n	8005b42 <HAL_SPI_Init+0x7a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b3a:	d002      	beq.n	8005b42 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10b      	bne.n	8005b62 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b52:	d903      	bls.n	8005b5c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
 8005b5a:	e002      	b.n	8005b62 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	ea42 0103 	orr.w	r1, r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	0c1b      	lsrs	r3, r3, #16
 8005ba2:	f003 0204 	and.w	r2, r3, #4
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	ea42 0103 	orr.w	r1, r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69da      	ldr	r2, [r3, #28]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	603b      	str	r3, [r7, #0]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_SPI_Transmit+0x22>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e150      	b.n	8005eb0 <HAL_SPI_Transmit+0x2c4>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c16:	f7fd fbbf 	bl	8003398 <HAL_GetTick>
 8005c1a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c1c:	88fb      	ldrh	r3, [r7, #6]
 8005c1e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d002      	beq.n	8005c32 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c30:	e135      	b.n	8005e9e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <HAL_SPI_Transmit+0x52>
 8005c38:	88fb      	ldrh	r3, [r7, #6]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d102      	bne.n	8005c44 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c42:	e12c      	b.n	8005e9e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2203      	movs	r2, #3
 8005c48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	88fa      	ldrh	r2, [r7, #6]
 8005c5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	88fa      	ldrh	r2, [r7, #6]
 8005c62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c8e:	d107      	bne.n	8005ca0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005caa:	2b40      	cmp	r3, #64	; 0x40
 8005cac:	d007      	beq.n	8005cbe <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cc6:	d94b      	bls.n	8005d60 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <HAL_SPI_Transmit+0xea>
 8005cd0:	8afb      	ldrh	r3, [r7, #22]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d13e      	bne.n	8005d54 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	881a      	ldrh	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	1c9a      	adds	r2, r3, #2
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cfa:	e02b      	b.n	8005d54 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d112      	bne.n	8005d30 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0e:	881a      	ldrh	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1a:	1c9a      	adds	r2, r3, #2
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	3b01      	subs	r3, #1
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d2e:	e011      	b.n	8005d54 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d30:	f7fd fb32 	bl	8003398 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d803      	bhi.n	8005d48 <HAL_SPI_Transmit+0x15c>
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d46:	d102      	bne.n	8005d4e <HAL_SPI_Transmit+0x162>
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d102      	bne.n	8005d54 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d52:	e0a4      	b.n	8005e9e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1ce      	bne.n	8005cfc <HAL_SPI_Transmit+0x110>
 8005d5e:	e07c      	b.n	8005e5a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <HAL_SPI_Transmit+0x182>
 8005d68:	8afb      	ldrh	r3, [r7, #22]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d170      	bne.n	8005e50 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d912      	bls.n	8005d9e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	881a      	ldrh	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	1c9a      	adds	r2, r3, #2
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b02      	subs	r3, #2
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d9c:	e058      	b.n	8005e50 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	330c      	adds	r3, #12
 8005da8:	7812      	ldrb	r2, [r2, #0]
 8005daa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005dc4:	e044      	b.n	8005e50 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d12b      	bne.n	8005e2c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d912      	bls.n	8005e04 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	881a      	ldrh	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dee:	1c9a      	adds	r2, r3, #2
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b02      	subs	r3, #2
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e02:	e025      	b.n	8005e50 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	7812      	ldrb	r2, [r2, #0]
 8005e10:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e2a:	e011      	b.n	8005e50 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e2c:	f7fd fab4 	bl	8003398 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d803      	bhi.n	8005e44 <HAL_SPI_Transmit+0x258>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e42:	d102      	bne.n	8005e4a <HAL_SPI_Transmit+0x25e>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d102      	bne.n	8005e50 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e4e:	e026      	b.n	8005e9e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1b5      	bne.n	8005dc6 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fb14 	bl	800648c <SPI_EndRxTxTransaction>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10a      	bne.n	8005e8e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e78:	2300      	movs	r3, #0
 8005e7a:	613b      	str	r3, [r7, #16]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	613b      	str	r3, [r7, #16]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	613b      	str	r3, [r7, #16]
 8005e8c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	77fb      	strb	r3, [r7, #31]
 8005e9a:	e000      	b.n	8005e9e <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005e9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005eae:	7ffb      	ldrb	r3, [r7, #31]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3720      	adds	r7, #32
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08a      	sub	sp, #40	; 0x28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_SPI_TransmitReceive+0x26>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e1fb      	b.n	80062d6 <HAL_SPI_TransmitReceive+0x41e>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ee6:	f7fd fa57 	bl	8003398 <HAL_GetTick>
 8005eea:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ef2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005efa:	887b      	ldrh	r3, [r7, #2]
 8005efc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005efe:	887b      	ldrh	r3, [r7, #2]
 8005f00:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f02:	7efb      	ldrb	r3, [r7, #27]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d00e      	beq.n	8005f26 <HAL_SPI_TransmitReceive+0x6e>
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f0e:	d106      	bne.n	8005f1e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <HAL_SPI_TransmitReceive+0x66>
 8005f18:	7efb      	ldrb	r3, [r7, #27]
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d003      	beq.n	8005f26 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005f1e:	2302      	movs	r3, #2
 8005f20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005f24:	e1cd      	b.n	80062c2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <HAL_SPI_TransmitReceive+0x80>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <HAL_SPI_TransmitReceive+0x80>
 8005f32:	887b      	ldrh	r3, [r7, #2]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d103      	bne.n	8005f40 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005f3e:	e1c0      	b.n	80062c2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b04      	cmp	r3, #4
 8005f4a:	d003      	beq.n	8005f54 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2205      	movs	r2, #5
 8005f50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	887a      	ldrh	r2, [r7, #2]
 8005f64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	887a      	ldrh	r2, [r7, #2]
 8005f6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	887a      	ldrh	r2, [r7, #2]
 8005f7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	887a      	ldrh	r2, [r7, #2]
 8005f80:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f96:	d802      	bhi.n	8005f9e <HAL_SPI_TransmitReceive+0xe6>
 8005f98:	8a3b      	ldrh	r3, [r7, #16]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d908      	bls.n	8005fb0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fac:	605a      	str	r2, [r3, #4]
 8005fae:	e007      	b.n	8005fc0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fbe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fca:	2b40      	cmp	r3, #64	; 0x40
 8005fcc:	d007      	beq.n	8005fde <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fe6:	d97c      	bls.n	80060e2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <HAL_SPI_TransmitReceive+0x13e>
 8005ff0:	8a7b      	ldrh	r3, [r7, #18]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d169      	bne.n	80060ca <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	881a      	ldrh	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	1c9a      	adds	r2, r3, #2
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006010:	b29b      	uxth	r3, r3
 8006012:	3b01      	subs	r3, #1
 8006014:	b29a      	uxth	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800601a:	e056      	b.n	80060ca <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b02      	cmp	r3, #2
 8006028:	d11b      	bne.n	8006062 <HAL_SPI_TransmitReceive+0x1aa>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d016      	beq.n	8006062 <HAL_SPI_TransmitReceive+0x1aa>
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	2b01      	cmp	r3, #1
 8006038:	d113      	bne.n	8006062 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603e:	881a      	ldrh	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	1c9a      	adds	r2, r3, #2
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b01      	cmp	r3, #1
 800606e:	d11c      	bne.n	80060aa <HAL_SPI_TransmitReceive+0x1f2>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006076:	b29b      	uxth	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d016      	beq.n	80060aa <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	b292      	uxth	r2, r2
 8006088:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	1c9a      	adds	r2, r3, #2
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060a6:	2301      	movs	r3, #1
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80060aa:	f7fd f975 	bl	8003398 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d807      	bhi.n	80060ca <HAL_SPI_TransmitReceive+0x212>
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d003      	beq.n	80060ca <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80060c8:	e0fb      	b.n	80062c2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1a3      	bne.n	800601c <HAL_SPI_TransmitReceive+0x164>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d19d      	bne.n	800601c <HAL_SPI_TransmitReceive+0x164>
 80060e0:	e0df      	b.n	80062a2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d003      	beq.n	80060f2 <HAL_SPI_TransmitReceive+0x23a>
 80060ea:	8a7b      	ldrh	r3, [r7, #18]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	f040 80cb 	bne.w	8006288 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d912      	bls.n	8006122 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	881a      	ldrh	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610c:	1c9a      	adds	r2, r3, #2
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b02      	subs	r3, #2
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006120:	e0b2      	b.n	8006288 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	330c      	adds	r3, #12
 800612c:	7812      	ldrb	r2, [r2, #0]
 800612e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	1c5a      	adds	r2, r3, #1
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613e:	b29b      	uxth	r3, r3
 8006140:	3b01      	subs	r3, #1
 8006142:	b29a      	uxth	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006148:	e09e      	b.n	8006288 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b02      	cmp	r3, #2
 8006156:	d134      	bne.n	80061c2 <HAL_SPI_TransmitReceive+0x30a>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d02f      	beq.n	80061c2 <HAL_SPI_TransmitReceive+0x30a>
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	2b01      	cmp	r3, #1
 8006166:	d12c      	bne.n	80061c2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b01      	cmp	r3, #1
 8006170:	d912      	bls.n	8006198 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	881a      	ldrh	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006182:	1c9a      	adds	r2, r3, #2
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b02      	subs	r3, #2
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006196:	e012      	b.n	80061be <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	330c      	adds	r3, #12
 80061a2:	7812      	ldrb	r2, [r2, #0]
 80061a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d148      	bne.n	8006262 <HAL_SPI_TransmitReceive+0x3aa>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d042      	beq.n	8006262 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d923      	bls.n	8006230 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	b292      	uxth	r2, r2
 80061f4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	1c9a      	adds	r2, r3, #2
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006206:	b29b      	uxth	r3, r3
 8006208:	3b02      	subs	r3, #2
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b01      	cmp	r3, #1
 800621c:	d81f      	bhi.n	800625e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800622c:	605a      	str	r2, [r3, #4]
 800622e:	e016      	b.n	800625e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f103 020c 	add.w	r2, r3, #12
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	7812      	ldrb	r2, [r2, #0]
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006252:	b29b      	uxth	r3, r3
 8006254:	3b01      	subs	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800625e:	2301      	movs	r3, #1
 8006260:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006262:	f7fd f899 	bl	8003398 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800626e:	429a      	cmp	r2, r3
 8006270:	d803      	bhi.n	800627a <HAL_SPI_TransmitReceive+0x3c2>
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006278:	d102      	bne.n	8006280 <HAL_SPI_TransmitReceive+0x3c8>
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	2b00      	cmp	r3, #0
 800627e:	d103      	bne.n	8006288 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006286:	e01c      	b.n	80062c2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800628c:	b29b      	uxth	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	f47f af5b 	bne.w	800614a <HAL_SPI_TransmitReceive+0x292>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800629a:	b29b      	uxth	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	f47f af54 	bne.w	800614a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 f8f0 	bl	800648c <SPI_EndRxTxTransaction>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d006      	beq.n	80062c0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2220      	movs	r2, #32
 80062bc:	661a      	str	r2, [r3, #96]	; 0x60
 80062be:	e000      	b.n	80062c2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80062c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80062d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3728      	adds	r7, #40	; 0x28
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	60f8      	str	r0, [r7, #12]
 80062e6:	60b9      	str	r1, [r7, #8]
 80062e8:	603b      	str	r3, [r7, #0]
 80062ea:	4613      	mov	r3, r2
 80062ec:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062ee:	e04c      	b.n	800638a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f6:	d048      	beq.n	800638a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80062f8:	f7fd f84e 	bl	8003398 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	429a      	cmp	r2, r3
 8006306:	d902      	bls.n	800630e <SPI_WaitFlagStateUntilTimeout+0x30>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d13d      	bne.n	800638a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800631c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006326:	d111      	bne.n	800634c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006330:	d004      	beq.n	800633c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800633a:	d107      	bne.n	800634c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800634a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006354:	d10f      	bne.n	8006376 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006374:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e00f      	b.n	80063aa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	4013      	ands	r3, r2
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	429a      	cmp	r2, r3
 8006398:	bf0c      	ite	eq
 800639a:	2301      	moveq	r3, #1
 800639c:	2300      	movne	r3, #0
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	461a      	mov	r2, r3
 80063a2:	79fb      	ldrb	r3, [r7, #7]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d1a3      	bne.n	80062f0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	60f8      	str	r0, [r7, #12]
 80063ba:	60b9      	str	r1, [r7, #8]
 80063bc:	607a      	str	r2, [r7, #4]
 80063be:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80063c0:	e057      	b.n	8006472 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80063c8:	d106      	bne.n	80063d8 <SPI_WaitFifoStateUntilTimeout+0x26>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d103      	bne.n	80063d8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	330c      	adds	r3, #12
 80063d6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063de:	d048      	beq.n	8006472 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80063e0:	f7fc ffda 	bl	8003398 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d902      	bls.n	80063f6 <SPI_WaitFifoStateUntilTimeout+0x44>
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d13d      	bne.n	8006472 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006404:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800640e:	d111      	bne.n	8006434 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006418:	d004      	beq.n	8006424 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006422:	d107      	bne.n	8006434 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006432:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800643c:	d10f      	bne.n	800645e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800645c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e008      	b.n	8006484 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4013      	ands	r3, r2
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	429a      	cmp	r2, r3
 8006480:	d19f      	bne.n	80063c2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af02      	add	r7, sp, #8
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2200      	movs	r2, #0
 80064a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f7ff ff84 	bl	80063b2 <SPI_WaitFifoStateUntilTimeout>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d007      	beq.n	80064c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b4:	f043 0220 	orr.w	r2, r3, #32
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e027      	b.n	8006510 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2200      	movs	r2, #0
 80064c8:	2180      	movs	r1, #128	; 0x80
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f7ff ff07 	bl	80062de <SPI_WaitFlagStateUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d007      	beq.n	80064e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064da:	f043 0220 	orr.w	r2, r3, #32
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e014      	b.n	8006510 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f7ff ff5d 	bl	80063b2 <SPI_WaitFifoStateUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d007      	beq.n	800650e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006502:	f043 0220 	orr.w	r2, r3, #32
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e000      	b.n	8006510 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e01d      	b.n	8006566 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d106      	bne.n	8006544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7fc fd2a 	bl	8002f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3304      	adds	r3, #4
 8006554:	4619      	mov	r1, r3
 8006556:	4610      	mov	r0, r2
 8006558:	f000 fc7e 	bl	8006e58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b082      	sub	sp, #8
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e01d      	b.n	80065bc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d106      	bne.n	800659a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f815 	bl	80065c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2202      	movs	r2, #2
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3304      	adds	r3, #4
 80065aa:	4619      	mov	r1, r3
 80065ac:	4610      	mov	r0, r2
 80065ae:	f000 fc53 	bl	8006e58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2201      	movs	r2, #1
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 ffcc 	bl	8007588 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a17      	ldr	r2, [pc, #92]	; (8006654 <HAL_TIM_PWM_Start+0x7c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d004      	beq.n	8006604 <HAL_TIM_PWM_Start+0x2c>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a16      	ldr	r2, [pc, #88]	; (8006658 <HAL_TIM_PWM_Start+0x80>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d101      	bne.n	8006608 <HAL_TIM_PWM_Start+0x30>
 8006604:	2301      	movs	r3, #1
 8006606:	e000      	b.n	800660a <HAL_TIM_PWM_Start+0x32>
 8006608:	2300      	movs	r3, #0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d007      	beq.n	800661e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800661c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	4b0d      	ldr	r3, [pc, #52]	; (800665c <HAL_TIM_PWM_Start+0x84>)
 8006626:	4013      	ands	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2b06      	cmp	r3, #6
 800662e:	d00b      	beq.n	8006648 <HAL_TIM_PWM_Start+0x70>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006636:	d007      	beq.n	8006648 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0201 	orr.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	40010000 	.word	0x40010000
 8006658:	40010400 	.word	0x40010400
 800665c:	00010007 	.word	0x00010007

08006660 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e02d      	b.n	80066d0 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d106      	bne.n	800668e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f825 	bl	80066d8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2202      	movs	r2, #2
 8006692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	3304      	adds	r3, #4
 800669e:	4619      	mov	r1, r3
 80066a0:	4610      	mov	r0, r2
 80066a2:	f000 fbd9 	bl	8006e58 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0208 	bic.w	r2, r2, #8
 80066b4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6819      	ldr	r1, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e07b      	b.n	80067f8 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d106      	bne.n	800671a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7fc fcaf 	bl	8003078 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2202      	movs	r2, #2
 800671e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6899      	ldr	r1, [r3, #8]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	4b34      	ldr	r3, [pc, #208]	; (8006800 <HAL_TIM_Encoder_Init+0x114>)
 800672e:	400b      	ands	r3, r1
 8006730:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3304      	adds	r3, #4
 800673a:	4619      	mov	r1, r3
 800673c:	4610      	mov	r0, r2
 800673e:	f000 fb8b 	bl	8006e58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	4313      	orrs	r3, r2
 8006762:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	4b27      	ldr	r3, [pc, #156]	; (8006804 <HAL_TIM_Encoder_Init+0x118>)
 8006768:	4013      	ands	r3, r2
 800676a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	021b      	lsls	r3, r3, #8
 8006776:	4313      	orrs	r3, r2
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	4313      	orrs	r3, r2
 800677c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	4b21      	ldr	r3, [pc, #132]	; (8006808 <HAL_TIM_Encoder_Init+0x11c>)
 8006782:	4013      	ands	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	4b20      	ldr	r3, [pc, #128]	; (800680c <HAL_TIM_Encoder_Init+0x120>)
 800678a:	4013      	ands	r3, r2
 800678c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	021b      	lsls	r3, r3, #8
 8006798:	4313      	orrs	r3, r2
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	011a      	lsls	r2, r3, #4
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	031b      	lsls	r3, r3, #12
 80067ac:	4313      	orrs	r3, r2
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80067ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80067c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	011b      	lsls	r3, r3, #4
 80067ce:	4313      	orrs	r3, r2
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	fffebff8 	.word	0xfffebff8
 8006804:	fffffcfc 	.word	0xfffffcfc
 8006808:	fffff3f3 	.word	0xfffff3f3
 800680c:	ffff0f0f 	.word	0xffff0f0f

08006810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b02      	cmp	r3, #2
 8006824:	d122      	bne.n	800686c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b02      	cmp	r3, #2
 8006832:	d11b      	bne.n	800686c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f06f 0202 	mvn.w	r2, #2
 800683c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	f003 0303 	and.w	r3, r3, #3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fae2 	bl	8006e1c <HAL_TIM_IC_CaptureCallback>
 8006858:	e005      	b.n	8006866 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fad4 	bl	8006e08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fae5 	bl	8006e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	2b04      	cmp	r3, #4
 8006878:	d122      	bne.n	80068c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b04      	cmp	r3, #4
 8006886:	d11b      	bne.n	80068c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f06f 0204 	mvn.w	r2, #4
 8006890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2202      	movs	r2, #2
 8006896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fab8 	bl	8006e1c <HAL_TIM_IC_CaptureCallback>
 80068ac:	e005      	b.n	80068ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 faaa 	bl	8006e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fabb 	bl	8006e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b08      	cmp	r3, #8
 80068cc:	d122      	bne.n	8006914 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f003 0308 	and.w	r3, r3, #8
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d11b      	bne.n	8006914 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f06f 0208 	mvn.w	r2, #8
 80068e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2204      	movs	r2, #4
 80068ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fa8e 	bl	8006e1c <HAL_TIM_IC_CaptureCallback>
 8006900:	e005      	b.n	800690e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fa80 	bl	8006e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fa91 	bl	8006e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f003 0310 	and.w	r3, r3, #16
 800691e:	2b10      	cmp	r3, #16
 8006920:	d122      	bne.n	8006968 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f003 0310 	and.w	r3, r3, #16
 800692c:	2b10      	cmp	r3, #16
 800692e:	d11b      	bne.n	8006968 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f06f 0210 	mvn.w	r2, #16
 8006938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2208      	movs	r2, #8
 800693e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fa64 	bl	8006e1c <HAL_TIM_IC_CaptureCallback>
 8006954:	e005      	b.n	8006962 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fa56 	bl	8006e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fa67 	bl	8006e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b01      	cmp	r3, #1
 8006974:	d10e      	bne.n	8006994 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b01      	cmp	r3, #1
 8006982:	d107      	bne.n	8006994 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f06f 0201 	mvn.w	r2, #1
 800698c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fa30 	bl	8006df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800699e:	2b80      	cmp	r3, #128	; 0x80
 80069a0:	d10e      	bne.n	80069c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ac:	2b80      	cmp	r3, #128	; 0x80
 80069ae:	d107      	bne.n	80069c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fea2 	bl	8007704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ce:	d10e      	bne.n	80069ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069da:	2b80      	cmp	r3, #128	; 0x80
 80069dc:	d107      	bne.n	80069ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fe95 	bl	8007718 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f8:	2b40      	cmp	r3, #64	; 0x40
 80069fa:	d10e      	bne.n	8006a1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a06:	2b40      	cmp	r3, #64	; 0x40
 8006a08:	d107      	bne.n	8006a1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fa15 	bl	8006e44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b20      	cmp	r3, #32
 8006a26:	d10e      	bne.n	8006a46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b20      	cmp	r3, #32
 8006a34:	d107      	bne.n	8006a46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f06f 0220 	mvn.w	r2, #32
 8006a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fe55 	bl	80076f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a46:	bf00      	nop
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006a66:	2302      	movs	r3, #2
 8006a68:	e105      	b.n	8006c76 <HAL_TIM_PWM_ConfigChannel+0x226>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2202      	movs	r2, #2
 8006a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b14      	cmp	r3, #20
 8006a7e:	f200 80f0 	bhi.w	8006c62 <HAL_TIM_PWM_ConfigChannel+0x212>
 8006a82:	a201      	add	r2, pc, #4	; (adr r2, 8006a88 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006add 	.word	0x08006add
 8006a8c:	08006c63 	.word	0x08006c63
 8006a90:	08006c63 	.word	0x08006c63
 8006a94:	08006c63 	.word	0x08006c63
 8006a98:	08006b1d 	.word	0x08006b1d
 8006a9c:	08006c63 	.word	0x08006c63
 8006aa0:	08006c63 	.word	0x08006c63
 8006aa4:	08006c63 	.word	0x08006c63
 8006aa8:	08006b5f 	.word	0x08006b5f
 8006aac:	08006c63 	.word	0x08006c63
 8006ab0:	08006c63 	.word	0x08006c63
 8006ab4:	08006c63 	.word	0x08006c63
 8006ab8:	08006b9f 	.word	0x08006b9f
 8006abc:	08006c63 	.word	0x08006c63
 8006ac0:	08006c63 	.word	0x08006c63
 8006ac4:	08006c63 	.word	0x08006c63
 8006ac8:	08006be1 	.word	0x08006be1
 8006acc:	08006c63 	.word	0x08006c63
 8006ad0:	08006c63 	.word	0x08006c63
 8006ad4:	08006c63 	.word	0x08006c63
 8006ad8:	08006c21 	.word	0x08006c21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68b9      	ldr	r1, [r7, #8]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fa58 	bl	8006f98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	699a      	ldr	r2, [r3, #24]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0208 	orr.w	r2, r2, #8
 8006af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0204 	bic.w	r2, r2, #4
 8006b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6999      	ldr	r1, [r3, #24]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	691a      	ldr	r2, [r3, #16]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	619a      	str	r2, [r3, #24]
      break;
 8006b1a:	e0a3      	b.n	8006c64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 faaa 	bl	800707c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699a      	ldr	r2, [r3, #24]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6999      	ldr	r1, [r3, #24]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	021a      	lsls	r2, r3, #8
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	619a      	str	r2, [r3, #24]
      break;
 8006b5c:	e082      	b.n	8006c64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fb01 	bl	800716c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69da      	ldr	r2, [r3, #28]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f042 0208 	orr.w	r2, r2, #8
 8006b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69da      	ldr	r2, [r3, #28]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0204 	bic.w	r2, r2, #4
 8006b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69d9      	ldr	r1, [r3, #28]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	691a      	ldr	r2, [r3, #16]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	61da      	str	r2, [r3, #28]
      break;
 8006b9c:	e062      	b.n	8006c64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fb57 	bl	8007258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69d9      	ldr	r1, [r3, #28]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	021a      	lsls	r2, r3, #8
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	61da      	str	r2, [r3, #28]
      break;
 8006bde:	e041      	b.n	8006c64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68b9      	ldr	r1, [r7, #8]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fb8e 	bl	8007308 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0208 	orr.w	r2, r2, #8
 8006bfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0204 	bic.w	r2, r2, #4
 8006c0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	691a      	ldr	r2, [r3, #16]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c1e:	e021      	b.n	8006c64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68b9      	ldr	r1, [r7, #8]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fbc0 	bl	80073ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	021a      	lsls	r2, r3, #8
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c60:	e000      	b.n	8006c64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006c62:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop

08006c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d101      	bne.n	8006c98 <HAL_TIM_ConfigClockSource+0x18>
 8006c94:	2302      	movs	r3, #2
 8006c96:	e0a6      	b.n	8006de6 <HAL_TIM_ConfigClockSource+0x166>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4b4f      	ldr	r3, [pc, #316]	; (8006df0 <HAL_TIM_ConfigClockSource+0x170>)
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cbe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b40      	cmp	r3, #64	; 0x40
 8006cce:	d067      	beq.n	8006da0 <HAL_TIM_ConfigClockSource+0x120>
 8006cd0:	2b40      	cmp	r3, #64	; 0x40
 8006cd2:	d80b      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x6c>
 8006cd4:	2b10      	cmp	r3, #16
 8006cd6:	d073      	beq.n	8006dc0 <HAL_TIM_ConfigClockSource+0x140>
 8006cd8:	2b10      	cmp	r3, #16
 8006cda:	d802      	bhi.n	8006ce2 <HAL_TIM_ConfigClockSource+0x62>
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d06f      	beq.n	8006dc0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006ce0:	e078      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006ce2:	2b20      	cmp	r3, #32
 8006ce4:	d06c      	beq.n	8006dc0 <HAL_TIM_ConfigClockSource+0x140>
 8006ce6:	2b30      	cmp	r3, #48	; 0x30
 8006ce8:	d06a      	beq.n	8006dc0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006cea:	e073      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006cec:	2b70      	cmp	r3, #112	; 0x70
 8006cee:	d00d      	beq.n	8006d0c <HAL_TIM_ConfigClockSource+0x8c>
 8006cf0:	2b70      	cmp	r3, #112	; 0x70
 8006cf2:	d804      	bhi.n	8006cfe <HAL_TIM_ConfigClockSource+0x7e>
 8006cf4:	2b50      	cmp	r3, #80	; 0x50
 8006cf6:	d033      	beq.n	8006d60 <HAL_TIM_ConfigClockSource+0xe0>
 8006cf8:	2b60      	cmp	r3, #96	; 0x60
 8006cfa:	d041      	beq.n	8006d80 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006cfc:	e06a      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d02:	d066      	beq.n	8006dd2 <HAL_TIM_ConfigClockSource+0x152>
 8006d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d08:	d017      	beq.n	8006d3a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006d0a:	e063      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6818      	ldr	r0, [r3, #0]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	6899      	ldr	r1, [r3, #8]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f000 fc14 	bl	8007548 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d2e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	609a      	str	r2, [r3, #8]
      break;
 8006d38:	e04c      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6818      	ldr	r0, [r3, #0]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	6899      	ldr	r1, [r3, #8]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	f000 fbfd 	bl	8007548 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d5c:	609a      	str	r2, [r3, #8]
      break;
 8006d5e:	e039      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	6859      	ldr	r1, [r3, #4]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	f000 fb71 	bl	8007454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2150      	movs	r1, #80	; 0x50
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fbca 	bl	8007512 <TIM_ITRx_SetConfig>
      break;
 8006d7e:	e029      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6818      	ldr	r0, [r3, #0]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	6859      	ldr	r1, [r3, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	f000 fb90 	bl	80074b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2160      	movs	r1, #96	; 0x60
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fbba 	bl	8007512 <TIM_ITRx_SetConfig>
      break;
 8006d9e:	e019      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6818      	ldr	r0, [r3, #0]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	6859      	ldr	r1, [r3, #4]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	461a      	mov	r2, r3
 8006dae:	f000 fb51 	bl	8007454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2140      	movs	r1, #64	; 0x40
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 fbaa 	bl	8007512 <TIM_ITRx_SetConfig>
      break;
 8006dbe:	e009      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4619      	mov	r1, r3
 8006dca:	4610      	mov	r0, r2
 8006dcc:	f000 fba1 	bl	8007512 <TIM_ITRx_SetConfig>
      break;
 8006dd0:	e000      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006dd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	fffeff88 	.word	0xfffeff88

08006df4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a40      	ldr	r2, [pc, #256]	; (8006f6c <TIM_Base_SetConfig+0x114>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d013      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e76:	d00f      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a3d      	ldr	r2, [pc, #244]	; (8006f70 <TIM_Base_SetConfig+0x118>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d00b      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a3c      	ldr	r2, [pc, #240]	; (8006f74 <TIM_Base_SetConfig+0x11c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d007      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a3b      	ldr	r2, [pc, #236]	; (8006f78 <TIM_Base_SetConfig+0x120>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d003      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a3a      	ldr	r2, [pc, #232]	; (8006f7c <TIM_Base_SetConfig+0x124>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d108      	bne.n	8006eaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a2f      	ldr	r2, [pc, #188]	; (8006f6c <TIM_Base_SetConfig+0x114>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d02b      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb8:	d027      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a2c      	ldr	r2, [pc, #176]	; (8006f70 <TIM_Base_SetConfig+0x118>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d023      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a2b      	ldr	r2, [pc, #172]	; (8006f74 <TIM_Base_SetConfig+0x11c>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d01f      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a2a      	ldr	r2, [pc, #168]	; (8006f78 <TIM_Base_SetConfig+0x120>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d01b      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a29      	ldr	r2, [pc, #164]	; (8006f7c <TIM_Base_SetConfig+0x124>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d017      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a28      	ldr	r2, [pc, #160]	; (8006f80 <TIM_Base_SetConfig+0x128>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d013      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a27      	ldr	r2, [pc, #156]	; (8006f84 <TIM_Base_SetConfig+0x12c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d00f      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a26      	ldr	r2, [pc, #152]	; (8006f88 <TIM_Base_SetConfig+0x130>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00b      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a25      	ldr	r2, [pc, #148]	; (8006f8c <TIM_Base_SetConfig+0x134>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d007      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a24      	ldr	r2, [pc, #144]	; (8006f90 <TIM_Base_SetConfig+0x138>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d003      	beq.n	8006f0a <TIM_Base_SetConfig+0xb2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a23      	ldr	r2, [pc, #140]	; (8006f94 <TIM_Base_SetConfig+0x13c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d108      	bne.n	8006f1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a0a      	ldr	r2, [pc, #40]	; (8006f6c <TIM_Base_SetConfig+0x114>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d003      	beq.n	8006f50 <TIM_Base_SetConfig+0xf8>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a0c      	ldr	r2, [pc, #48]	; (8006f7c <TIM_Base_SetConfig+0x124>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d103      	bne.n	8006f58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	691a      	ldr	r2, [r3, #16]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	615a      	str	r2, [r3, #20]
}
 8006f5e:	bf00      	nop
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40010000 	.word	0x40010000
 8006f70:	40000400 	.word	0x40000400
 8006f74:	40000800 	.word	0x40000800
 8006f78:	40000c00 	.word	0x40000c00
 8006f7c:	40010400 	.word	0x40010400
 8006f80:	40014000 	.word	0x40014000
 8006f84:	40014400 	.word	0x40014400
 8006f88:	40014800 	.word	0x40014800
 8006f8c:	40001800 	.word	0x40001800
 8006f90:	40001c00 	.word	0x40001c00
 8006f94:	40002000 	.word	0x40002000

08006f98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	f023 0201 	bic.w	r2, r3, #1
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	4b2b      	ldr	r3, [pc, #172]	; (8007070 <TIM_OC1_SetConfig+0xd8>)
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f023 0303 	bic.w	r3, r3, #3
 8006fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f023 0302 	bic.w	r3, r3, #2
 8006fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a21      	ldr	r2, [pc, #132]	; (8007074 <TIM_OC1_SetConfig+0xdc>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d003      	beq.n	8006ffc <TIM_OC1_SetConfig+0x64>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a20      	ldr	r2, [pc, #128]	; (8007078 <TIM_OC1_SetConfig+0xe0>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d10c      	bne.n	8007016 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f023 0308 	bic.w	r3, r3, #8
 8007002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	4313      	orrs	r3, r2
 800700c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f023 0304 	bic.w	r3, r3, #4
 8007014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a16      	ldr	r2, [pc, #88]	; (8007074 <TIM_OC1_SetConfig+0xdc>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d003      	beq.n	8007026 <TIM_OC1_SetConfig+0x8e>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a15      	ldr	r2, [pc, #84]	; (8007078 <TIM_OC1_SetConfig+0xe0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d111      	bne.n	800704a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800702c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	4313      	orrs	r3, r2
 800703e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	4313      	orrs	r3, r2
 8007048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	621a      	str	r2, [r3, #32]
}
 8007064:	bf00      	nop
 8007066:	371c      	adds	r7, #28
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	fffeff8f 	.word	0xfffeff8f
 8007074:	40010000 	.word	0x40010000
 8007078:	40010400 	.word	0x40010400

0800707c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	f023 0210 	bic.w	r2, r3, #16
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4b2e      	ldr	r3, [pc, #184]	; (8007160 <TIM_OC2_SetConfig+0xe4>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	021b      	lsls	r3, r3, #8
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f023 0320 	bic.w	r3, r3, #32
 80070c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a23      	ldr	r2, [pc, #140]	; (8007164 <TIM_OC2_SetConfig+0xe8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d003      	beq.n	80070e4 <TIM_OC2_SetConfig+0x68>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a22      	ldr	r2, [pc, #136]	; (8007168 <TIM_OC2_SetConfig+0xec>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d10d      	bne.n	8007100 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a18      	ldr	r2, [pc, #96]	; (8007164 <TIM_OC2_SetConfig+0xe8>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d003      	beq.n	8007110 <TIM_OC2_SetConfig+0x94>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a17      	ldr	r2, [pc, #92]	; (8007168 <TIM_OC2_SetConfig+0xec>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d113      	bne.n	8007138 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007116:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800711e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	4313      	orrs	r3, r2
 800712a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	4313      	orrs	r3, r2
 8007136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	621a      	str	r2, [r3, #32]
}
 8007152:	bf00      	nop
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	feff8fff 	.word	0xfeff8fff
 8007164:	40010000 	.word	0x40010000
 8007168:	40010400 	.word	0x40010400

0800716c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4b2d      	ldr	r3, [pc, #180]	; (800724c <TIM_OC3_SetConfig+0xe0>)
 8007198:	4013      	ands	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f023 0303 	bic.w	r3, r3, #3
 80071a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	021b      	lsls	r3, r3, #8
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	4313      	orrs	r3, r2
 80071c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a22      	ldr	r2, [pc, #136]	; (8007250 <TIM_OC3_SetConfig+0xe4>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d003      	beq.n	80071d2 <TIM_OC3_SetConfig+0x66>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a21      	ldr	r2, [pc, #132]	; (8007254 <TIM_OC3_SetConfig+0xe8>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d10d      	bne.n	80071ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	021b      	lsls	r3, r3, #8
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a17      	ldr	r2, [pc, #92]	; (8007250 <TIM_OC3_SetConfig+0xe4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d003      	beq.n	80071fe <TIM_OC3_SetConfig+0x92>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a16      	ldr	r2, [pc, #88]	; (8007254 <TIM_OC3_SetConfig+0xe8>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d113      	bne.n	8007226 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800720c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	011b      	lsls	r3, r3, #4
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	4313      	orrs	r3, r2
 8007218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	011b      	lsls	r3, r3, #4
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	4313      	orrs	r3, r2
 8007224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	621a      	str	r2, [r3, #32]
}
 8007240:	bf00      	nop
 8007242:	371c      	adds	r7, #28
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	fffeff8f 	.word	0xfffeff8f
 8007250:	40010000 	.word	0x40010000
 8007254:	40010400 	.word	0x40010400

08007258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	4b1e      	ldr	r3, [pc, #120]	; (80072fc <TIM_OC4_SetConfig+0xa4>)
 8007284:	4013      	ands	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800728e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	021b      	lsls	r3, r3, #8
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4313      	orrs	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	031b      	lsls	r3, r3, #12
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a13      	ldr	r2, [pc, #76]	; (8007300 <TIM_OC4_SetConfig+0xa8>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d003      	beq.n	80072c0 <TIM_OC4_SetConfig+0x68>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a12      	ldr	r2, [pc, #72]	; (8007304 <TIM_OC4_SetConfig+0xac>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d109      	bne.n	80072d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	019b      	lsls	r3, r3, #6
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	621a      	str	r2, [r3, #32]
}
 80072ee:	bf00      	nop
 80072f0:	371c      	adds	r7, #28
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	feff8fff 	.word	0xfeff8fff
 8007300:	40010000 	.word	0x40010000
 8007304:	40010400 	.word	0x40010400

08007308 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	4b1b      	ldr	r3, [pc, #108]	; (80073a0 <TIM_OC5_SetConfig+0x98>)
 8007334:	4013      	ands	r3, r2
 8007336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	4313      	orrs	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007348:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	041b      	lsls	r3, r3, #16
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	4313      	orrs	r3, r2
 8007354:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a12      	ldr	r2, [pc, #72]	; (80073a4 <TIM_OC5_SetConfig+0x9c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d003      	beq.n	8007366 <TIM_OC5_SetConfig+0x5e>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a11      	ldr	r2, [pc, #68]	; (80073a8 <TIM_OC5_SetConfig+0xa0>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d109      	bne.n	800737a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800736c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	021b      	lsls	r3, r3, #8
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	4313      	orrs	r3, r2
 8007378:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	621a      	str	r2, [r3, #32]
}
 8007394:	bf00      	nop
 8007396:	371c      	adds	r7, #28
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	fffeff8f 	.word	0xfffeff8f
 80073a4:	40010000 	.word	0x40010000
 80073a8:	40010400 	.word	0x40010400

080073ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	4b1c      	ldr	r3, [pc, #112]	; (8007448 <TIM_OC6_SetConfig+0x9c>)
 80073d8:	4013      	ands	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	021b      	lsls	r3, r3, #8
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	051b      	lsls	r3, r3, #20
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a13      	ldr	r2, [pc, #76]	; (800744c <TIM_OC6_SetConfig+0xa0>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d003      	beq.n	800740c <TIM_OC6_SetConfig+0x60>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a12      	ldr	r2, [pc, #72]	; (8007450 <TIM_OC6_SetConfig+0xa4>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d109      	bne.n	8007420 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007412:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	029b      	lsls	r3, r3, #10
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	4313      	orrs	r3, r2
 800741e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	621a      	str	r2, [r3, #32]
}
 800743a:	bf00      	nop
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	feff8fff 	.word	0xfeff8fff
 800744c:	40010000 	.word	0x40010000
 8007450:	40010400 	.word	0x40010400

08007454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	f023 0201 	bic.w	r2, r3, #1
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800747e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f023 030a 	bic.w	r3, r3, #10
 8007490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4313      	orrs	r3, r2
 8007498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	621a      	str	r2, [r3, #32]
}
 80074a6:	bf00      	nop
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b087      	sub	sp, #28
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	f023 0210 	bic.w	r2, r3, #16
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	031b      	lsls	r3, r3, #12
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	621a      	str	r2, [r3, #32]
}
 8007506:	bf00      	nop
 8007508:	371c      	adds	r7, #28
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007512:	b480      	push	{r7}
 8007514:	b085      	sub	sp, #20
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007528:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4313      	orrs	r3, r2
 8007530:	f043 0307 	orr.w	r3, r3, #7
 8007534:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	609a      	str	r2, [r3, #8]
}
 800753c:	bf00      	nop
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007548:	b480      	push	{r7}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007562:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	021a      	lsls	r2, r3, #8
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	431a      	orrs	r2, r3
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	4313      	orrs	r3, r2
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	4313      	orrs	r3, r2
 8007574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	609a      	str	r2, [r3, #8]
}
 800757c:	bf00      	nop
 800757e:	371c      	adds	r7, #28
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	f003 031f 	and.w	r3, r3, #31
 800759a:	2201      	movs	r2, #1
 800759c:	fa02 f303 	lsl.w	r3, r2, r3
 80075a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6a1a      	ldr	r2, [r3, #32]
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	43db      	mvns	r3, r3
 80075aa:	401a      	ands	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a1a      	ldr	r2, [r3, #32]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f003 031f 	and.w	r3, r3, #31
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	fa01 f303 	lsl.w	r3, r1, r3
 80075c0:	431a      	orrs	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	621a      	str	r2, [r3, #32]
}
 80075c6:	bf00      	nop
 80075c8:	371c      	adds	r7, #28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
	...

080075d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d101      	bne.n	80075ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075e8:	2302      	movs	r3, #2
 80075ea:	e06d      	b.n	80076c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a30      	ldr	r2, [pc, #192]	; (80076d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d004      	beq.n	8007620 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a2f      	ldr	r2, [pc, #188]	; (80076d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d108      	bne.n	8007632 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007626:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	4313      	orrs	r3, r2
 8007630:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007638:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	4313      	orrs	r3, r2
 8007642:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a20      	ldr	r2, [pc, #128]	; (80076d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d022      	beq.n	800769c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800765e:	d01d      	beq.n	800769c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a1d      	ldr	r2, [pc, #116]	; (80076dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d018      	beq.n	800769c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a1c      	ldr	r2, [pc, #112]	; (80076e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d013      	beq.n	800769c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a1a      	ldr	r2, [pc, #104]	; (80076e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d00e      	beq.n	800769c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a15      	ldr	r2, [pc, #84]	; (80076d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d009      	beq.n	800769c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a16      	ldr	r2, [pc, #88]	; (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d004      	beq.n	800769c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a15      	ldr	r2, [pc, #84]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d10c      	bne.n	80076b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	40010000 	.word	0x40010000
 80076d8:	40010400 	.word	0x40010400
 80076dc:	40000400 	.word	0x40000400
 80076e0:	40000800 	.word	0x40000800
 80076e4:	40000c00 	.word	0x40000c00
 80076e8:	40014000 	.word	0x40014000
 80076ec:	40001800 	.word	0x40001800

080076f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e040      	b.n	80077c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007742:	2b00      	cmp	r3, #0
 8007744:	d106      	bne.n	8007754 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7fb fd5c 	bl	800320c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2224      	movs	r2, #36	; 0x24
 8007758:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0201 	bic.w	r2, r2, #1
 8007768:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fa14 	bl	8007b98 <UART_SetConfig>
 8007770:	4603      	mov	r3, r0
 8007772:	2b01      	cmp	r3, #1
 8007774:	d101      	bne.n	800777a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e022      	b.n	80077c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fcb2 	bl	80080ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689a      	ldr	r2, [r3, #8]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0201 	orr.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fd39 	bl	8008230 <UART_CheckIdleState>
 80077be:	4603      	mov	r3, r0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	4613      	mov	r3, r2
 80077d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077da:	2b20      	cmp	r3, #32
 80077dc:	f040 808a 	bne.w	80078f4 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <HAL_UART_Receive_IT+0x24>
 80077e6:	88fb      	ldrh	r3, [r7, #6]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e082      	b.n	80078f6 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d101      	bne.n	80077fe <HAL_UART_Receive_IT+0x36>
 80077fa:	2302      	movs	r3, #2
 80077fc:	e07b      	b.n	80078f6 <HAL_UART_Receive_IT+0x12e>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	88fa      	ldrh	r2, [r7, #6]
 8007810:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	88fa      	ldrh	r2, [r7, #6]
 8007818:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800782a:	d10e      	bne.n	800784a <HAL_UART_Receive_IT+0x82>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d105      	bne.n	8007840 <HAL_UART_Receive_IT+0x78>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f240 12ff 	movw	r2, #511	; 0x1ff
 800783a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800783e:	e02d      	b.n	800789c <HAL_UART_Receive_IT+0xd4>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	22ff      	movs	r2, #255	; 0xff
 8007844:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007848:	e028      	b.n	800789c <HAL_UART_Receive_IT+0xd4>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10d      	bne.n	800786e <HAL_UART_Receive_IT+0xa6>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d104      	bne.n	8007864 <HAL_UART_Receive_IT+0x9c>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	22ff      	movs	r2, #255	; 0xff
 800785e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007862:	e01b      	b.n	800789c <HAL_UART_Receive_IT+0xd4>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	227f      	movs	r2, #127	; 0x7f
 8007868:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800786c:	e016      	b.n	800789c <HAL_UART_Receive_IT+0xd4>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007876:	d10d      	bne.n	8007894 <HAL_UART_Receive_IT+0xcc>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d104      	bne.n	800788a <HAL_UART_Receive_IT+0xc2>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	227f      	movs	r2, #127	; 0x7f
 8007884:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007888:	e008      	b.n	800789c <HAL_UART_Receive_IT+0xd4>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	223f      	movs	r2, #63	; 0x3f
 800788e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007892:	e003      	b.n	800789c <HAL_UART_Receive_IT+0xd4>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2222      	movs	r2, #34	; 0x22
 80078a6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689a      	ldr	r2, [r3, #8]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 0201 	orr.w	r2, r2, #1
 80078b6:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c0:	d107      	bne.n	80078d2 <HAL_UART_Receive_IT+0x10a>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d103      	bne.n	80078d2 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4a0d      	ldr	r2, [pc, #52]	; (8007904 <HAL_UART_Receive_IT+0x13c>)
 80078ce:	661a      	str	r2, [r3, #96]	; 0x60
 80078d0:	e002      	b.n	80078d8 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	4a0c      	ldr	r2, [pc, #48]	; (8007908 <HAL_UART_Receive_IT+0x140>)
 80078d6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80078ee:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	e000      	b.n	80078f6 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80078f4:	2302      	movs	r3, #2
  }
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	080084c9 	.word	0x080084c9
 8007908:	08008423 	.word	0x08008423

0800790c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b088      	sub	sp, #32
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800792c:	69fa      	ldr	r2, [r7, #28]
 800792e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007932:	4013      	ands	r3, r2
 8007934:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d113      	bne.n	8007964 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f003 0320 	and.w	r3, r3, #32
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00e      	beq.n	8007964 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	f003 0320 	and.w	r3, r3, #32
 800794c:	2b00      	cmp	r3, #0
 800794e:	d009      	beq.n	8007964 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 8100 	beq.w	8007b5a <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	4798      	blx	r3
      }
      return;
 8007962:	e0fa      	b.n	8007b5a <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 80d5 	beq.w	8007b16 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d105      	bne.n	8007982 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 80ca 	beq.w	8007b16 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00e      	beq.n	80079aa <HAL_UART_IRQHandler+0x9e>
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007992:	2b00      	cmp	r3, #0
 8007994:	d009      	beq.n	80079aa <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2201      	movs	r2, #1
 800799c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079a2:	f043 0201 	orr.w	r2, r3, #1
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	f003 0302 	and.w	r3, r3, #2
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00e      	beq.n	80079d2 <HAL_UART_IRQHandler+0xc6>
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d009      	beq.n	80079d2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2202      	movs	r2, #2
 80079c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ca:	f043 0204 	orr.w	r2, r3, #4
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00e      	beq.n	80079fa <HAL_UART_IRQHandler+0xee>
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d009      	beq.n	80079fa <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2204      	movs	r2, #4
 80079ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079f2:	f043 0202 	orr.w	r2, r3, #2
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	f003 0308 	and.w	r3, r3, #8
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d013      	beq.n	8007a2c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d104      	bne.n	8007a18 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d009      	beq.n	8007a2c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2208      	movs	r2, #8
 8007a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a24:	f043 0208 	orr.w	r2, r3, #8
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00f      	beq.n	8007a56 <HAL_UART_IRQHandler+0x14a>
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00a      	beq.n	8007a56 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a4e:	f043 0220 	orr.w	r2, r3, #32
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d07f      	beq.n	8007b5e <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	f003 0320 	and.w	r3, r3, #32
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00c      	beq.n	8007a82 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	f003 0320 	and.w	r3, r3, #32
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d007      	beq.n	8007a82 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a86:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a92:	2b40      	cmp	r3, #64	; 0x40
 8007a94:	d004      	beq.n	8007aa0 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d031      	beq.n	8007b04 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fc6f 	bl	8008384 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab0:	2b40      	cmp	r3, #64	; 0x40
 8007ab2:	d123      	bne.n	8007afc <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689a      	ldr	r2, [r3, #8]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ac2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d013      	beq.n	8007af4 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ad0:	4a26      	ldr	r2, [pc, #152]	; (8007b6c <HAL_UART_IRQHandler+0x260>)
 8007ad2:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fc f99f 	bl	8003e1c <HAL_DMA_Abort_IT>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d016      	beq.n	8007b12 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007aee:	4610      	mov	r0, r2
 8007af0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af2:	e00e      	b.n	8007b12 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f845 	bl	8007b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007afa:	e00a      	b.n	8007b12 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f841 	bl	8007b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b02:	e006      	b.n	8007b12 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f83d 	bl	8007b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007b10:	e025      	b.n	8007b5e <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b12:	bf00      	nop
    return;
 8007b14:	e023      	b.n	8007b5e <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00d      	beq.n	8007b3c <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d008      	beq.n	8007b3c <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d017      	beq.n	8007b62 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	4798      	blx	r3
    }
    return;
 8007b3a:	e012      	b.n	8007b62 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00e      	beq.n	8007b64 <HAL_UART_IRQHandler+0x258>
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d009      	beq.n	8007b64 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fc4d 	bl	80083f0 <UART_EndTransmit_IT>
    return;
 8007b56:	bf00      	nop
 8007b58:	e004      	b.n	8007b64 <HAL_UART_IRQHandler+0x258>
      return;
 8007b5a:	bf00      	nop
 8007b5c:	e002      	b.n	8007b64 <HAL_UART_IRQHandler+0x258>
    return;
 8007b5e:	bf00      	nop
 8007b60:	e000      	b.n	8007b64 <HAL_UART_IRQHandler+0x258>
    return;
 8007b62:	bf00      	nop
  }

}
 8007b64:	3720      	adds	r7, #32
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	080083c5 	.word	0x080083c5

08007b70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b088      	sub	sp, #32
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689a      	ldr	r2, [r3, #8]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	69db      	ldr	r3, [r3, #28]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	4bb1      	ldr	r3, [pc, #708]	; (8007e8c <UART_SetConfig+0x2f4>)
 8007bc8:	4013      	ands	r3, r2
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	6812      	ldr	r2, [r2, #0]
 8007bce:	6939      	ldr	r1, [r7, #16]
 8007bd0:	430b      	orrs	r3, r1
 8007bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68da      	ldr	r2, [r3, #12]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a1b      	ldr	r3, [r3, #32]
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a9f      	ldr	r2, [pc, #636]	; (8007e90 <UART_SetConfig+0x2f8>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d121      	bne.n	8007c5c <UART_SetConfig+0xc4>
 8007c18:	4b9e      	ldr	r3, [pc, #632]	; (8007e94 <UART_SetConfig+0x2fc>)
 8007c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c1e:	f003 0303 	and.w	r3, r3, #3
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d816      	bhi.n	8007c54 <UART_SetConfig+0xbc>
 8007c26:	a201      	add	r2, pc, #4	; (adr r2, 8007c2c <UART_SetConfig+0x94>)
 8007c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2c:	08007c3d 	.word	0x08007c3d
 8007c30:	08007c49 	.word	0x08007c49
 8007c34:	08007c43 	.word	0x08007c43
 8007c38:	08007c4f 	.word	0x08007c4f
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	77fb      	strb	r3, [r7, #31]
 8007c40:	e151      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007c42:	2302      	movs	r3, #2
 8007c44:	77fb      	strb	r3, [r7, #31]
 8007c46:	e14e      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007c48:	2304      	movs	r3, #4
 8007c4a:	77fb      	strb	r3, [r7, #31]
 8007c4c:	e14b      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007c4e:	2308      	movs	r3, #8
 8007c50:	77fb      	strb	r3, [r7, #31]
 8007c52:	e148      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007c54:	2310      	movs	r3, #16
 8007c56:	77fb      	strb	r3, [r7, #31]
 8007c58:	bf00      	nop
 8007c5a:	e144      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a8d      	ldr	r2, [pc, #564]	; (8007e98 <UART_SetConfig+0x300>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d134      	bne.n	8007cd0 <UART_SetConfig+0x138>
 8007c66:	4b8b      	ldr	r3, [pc, #556]	; (8007e94 <UART_SetConfig+0x2fc>)
 8007c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6c:	f003 030c 	and.w	r3, r3, #12
 8007c70:	2b0c      	cmp	r3, #12
 8007c72:	d829      	bhi.n	8007cc8 <UART_SetConfig+0x130>
 8007c74:	a201      	add	r2, pc, #4	; (adr r2, 8007c7c <UART_SetConfig+0xe4>)
 8007c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7a:	bf00      	nop
 8007c7c:	08007cb1 	.word	0x08007cb1
 8007c80:	08007cc9 	.word	0x08007cc9
 8007c84:	08007cc9 	.word	0x08007cc9
 8007c88:	08007cc9 	.word	0x08007cc9
 8007c8c:	08007cbd 	.word	0x08007cbd
 8007c90:	08007cc9 	.word	0x08007cc9
 8007c94:	08007cc9 	.word	0x08007cc9
 8007c98:	08007cc9 	.word	0x08007cc9
 8007c9c:	08007cb7 	.word	0x08007cb7
 8007ca0:	08007cc9 	.word	0x08007cc9
 8007ca4:	08007cc9 	.word	0x08007cc9
 8007ca8:	08007cc9 	.word	0x08007cc9
 8007cac:	08007cc3 	.word	0x08007cc3
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	77fb      	strb	r3, [r7, #31]
 8007cb4:	e117      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	77fb      	strb	r3, [r7, #31]
 8007cba:	e114      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007cbc:	2304      	movs	r3, #4
 8007cbe:	77fb      	strb	r3, [r7, #31]
 8007cc0:	e111      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007cc2:	2308      	movs	r3, #8
 8007cc4:	77fb      	strb	r3, [r7, #31]
 8007cc6:	e10e      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007cc8:	2310      	movs	r3, #16
 8007cca:	77fb      	strb	r3, [r7, #31]
 8007ccc:	bf00      	nop
 8007cce:	e10a      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a71      	ldr	r2, [pc, #452]	; (8007e9c <UART_SetConfig+0x304>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d120      	bne.n	8007d1c <UART_SetConfig+0x184>
 8007cda:	4b6e      	ldr	r3, [pc, #440]	; (8007e94 <UART_SetConfig+0x2fc>)
 8007cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ce4:	2b10      	cmp	r3, #16
 8007ce6:	d00f      	beq.n	8007d08 <UART_SetConfig+0x170>
 8007ce8:	2b10      	cmp	r3, #16
 8007cea:	d802      	bhi.n	8007cf2 <UART_SetConfig+0x15a>
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d005      	beq.n	8007cfc <UART_SetConfig+0x164>
 8007cf0:	e010      	b.n	8007d14 <UART_SetConfig+0x17c>
 8007cf2:	2b20      	cmp	r3, #32
 8007cf4:	d005      	beq.n	8007d02 <UART_SetConfig+0x16a>
 8007cf6:	2b30      	cmp	r3, #48	; 0x30
 8007cf8:	d009      	beq.n	8007d0e <UART_SetConfig+0x176>
 8007cfa:	e00b      	b.n	8007d14 <UART_SetConfig+0x17c>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	77fb      	strb	r3, [r7, #31]
 8007d00:	e0f1      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007d02:	2302      	movs	r3, #2
 8007d04:	77fb      	strb	r3, [r7, #31]
 8007d06:	e0ee      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007d08:	2304      	movs	r3, #4
 8007d0a:	77fb      	strb	r3, [r7, #31]
 8007d0c:	e0eb      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007d0e:	2308      	movs	r3, #8
 8007d10:	77fb      	strb	r3, [r7, #31]
 8007d12:	e0e8      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007d14:	2310      	movs	r3, #16
 8007d16:	77fb      	strb	r3, [r7, #31]
 8007d18:	bf00      	nop
 8007d1a:	e0e4      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a5f      	ldr	r2, [pc, #380]	; (8007ea0 <UART_SetConfig+0x308>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d120      	bne.n	8007d68 <UART_SetConfig+0x1d0>
 8007d26:	4b5b      	ldr	r3, [pc, #364]	; (8007e94 <UART_SetConfig+0x2fc>)
 8007d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d30:	2b40      	cmp	r3, #64	; 0x40
 8007d32:	d00f      	beq.n	8007d54 <UART_SetConfig+0x1bc>
 8007d34:	2b40      	cmp	r3, #64	; 0x40
 8007d36:	d802      	bhi.n	8007d3e <UART_SetConfig+0x1a6>
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <UART_SetConfig+0x1b0>
 8007d3c:	e010      	b.n	8007d60 <UART_SetConfig+0x1c8>
 8007d3e:	2b80      	cmp	r3, #128	; 0x80
 8007d40:	d005      	beq.n	8007d4e <UART_SetConfig+0x1b6>
 8007d42:	2bc0      	cmp	r3, #192	; 0xc0
 8007d44:	d009      	beq.n	8007d5a <UART_SetConfig+0x1c2>
 8007d46:	e00b      	b.n	8007d60 <UART_SetConfig+0x1c8>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	77fb      	strb	r3, [r7, #31]
 8007d4c:	e0cb      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007d4e:	2302      	movs	r3, #2
 8007d50:	77fb      	strb	r3, [r7, #31]
 8007d52:	e0c8      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007d54:	2304      	movs	r3, #4
 8007d56:	77fb      	strb	r3, [r7, #31]
 8007d58:	e0c5      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007d5a:	2308      	movs	r3, #8
 8007d5c:	77fb      	strb	r3, [r7, #31]
 8007d5e:	e0c2      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007d60:	2310      	movs	r3, #16
 8007d62:	77fb      	strb	r3, [r7, #31]
 8007d64:	bf00      	nop
 8007d66:	e0be      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a4d      	ldr	r2, [pc, #308]	; (8007ea4 <UART_SetConfig+0x30c>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d124      	bne.n	8007dbc <UART_SetConfig+0x224>
 8007d72:	4b48      	ldr	r3, [pc, #288]	; (8007e94 <UART_SetConfig+0x2fc>)
 8007d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d80:	d012      	beq.n	8007da8 <UART_SetConfig+0x210>
 8007d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d86:	d802      	bhi.n	8007d8e <UART_SetConfig+0x1f6>
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d007      	beq.n	8007d9c <UART_SetConfig+0x204>
 8007d8c:	e012      	b.n	8007db4 <UART_SetConfig+0x21c>
 8007d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d92:	d006      	beq.n	8007da2 <UART_SetConfig+0x20a>
 8007d94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d98:	d009      	beq.n	8007dae <UART_SetConfig+0x216>
 8007d9a:	e00b      	b.n	8007db4 <UART_SetConfig+0x21c>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	77fb      	strb	r3, [r7, #31]
 8007da0:	e0a1      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007da2:	2302      	movs	r3, #2
 8007da4:	77fb      	strb	r3, [r7, #31]
 8007da6:	e09e      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007da8:	2304      	movs	r3, #4
 8007daa:	77fb      	strb	r3, [r7, #31]
 8007dac:	e09b      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007dae:	2308      	movs	r3, #8
 8007db0:	77fb      	strb	r3, [r7, #31]
 8007db2:	e098      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007db4:	2310      	movs	r3, #16
 8007db6:	77fb      	strb	r3, [r7, #31]
 8007db8:	bf00      	nop
 8007dba:	e094      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a39      	ldr	r2, [pc, #228]	; (8007ea8 <UART_SetConfig+0x310>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d124      	bne.n	8007e10 <UART_SetConfig+0x278>
 8007dc6:	4b33      	ldr	r3, [pc, #204]	; (8007e94 <UART_SetConfig+0x2fc>)
 8007dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd4:	d012      	beq.n	8007dfc <UART_SetConfig+0x264>
 8007dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dda:	d802      	bhi.n	8007de2 <UART_SetConfig+0x24a>
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d007      	beq.n	8007df0 <UART_SetConfig+0x258>
 8007de0:	e012      	b.n	8007e08 <UART_SetConfig+0x270>
 8007de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de6:	d006      	beq.n	8007df6 <UART_SetConfig+0x25e>
 8007de8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dec:	d009      	beq.n	8007e02 <UART_SetConfig+0x26a>
 8007dee:	e00b      	b.n	8007e08 <UART_SetConfig+0x270>
 8007df0:	2301      	movs	r3, #1
 8007df2:	77fb      	strb	r3, [r7, #31]
 8007df4:	e077      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007df6:	2302      	movs	r3, #2
 8007df8:	77fb      	strb	r3, [r7, #31]
 8007dfa:	e074      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007dfc:	2304      	movs	r3, #4
 8007dfe:	77fb      	strb	r3, [r7, #31]
 8007e00:	e071      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007e02:	2308      	movs	r3, #8
 8007e04:	77fb      	strb	r3, [r7, #31]
 8007e06:	e06e      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007e08:	2310      	movs	r3, #16
 8007e0a:	77fb      	strb	r3, [r7, #31]
 8007e0c:	bf00      	nop
 8007e0e:	e06a      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a25      	ldr	r2, [pc, #148]	; (8007eac <UART_SetConfig+0x314>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d124      	bne.n	8007e64 <UART_SetConfig+0x2cc>
 8007e1a:	4b1e      	ldr	r3, [pc, #120]	; (8007e94 <UART_SetConfig+0x2fc>)
 8007e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e20:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e28:	d012      	beq.n	8007e50 <UART_SetConfig+0x2b8>
 8007e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e2e:	d802      	bhi.n	8007e36 <UART_SetConfig+0x29e>
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d007      	beq.n	8007e44 <UART_SetConfig+0x2ac>
 8007e34:	e012      	b.n	8007e5c <UART_SetConfig+0x2c4>
 8007e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e3a:	d006      	beq.n	8007e4a <UART_SetConfig+0x2b2>
 8007e3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e40:	d009      	beq.n	8007e56 <UART_SetConfig+0x2be>
 8007e42:	e00b      	b.n	8007e5c <UART_SetConfig+0x2c4>
 8007e44:	2300      	movs	r3, #0
 8007e46:	77fb      	strb	r3, [r7, #31]
 8007e48:	e04d      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	77fb      	strb	r3, [r7, #31]
 8007e4e:	e04a      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007e50:	2304      	movs	r3, #4
 8007e52:	77fb      	strb	r3, [r7, #31]
 8007e54:	e047      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007e56:	2308      	movs	r3, #8
 8007e58:	77fb      	strb	r3, [r7, #31]
 8007e5a:	e044      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007e5c:	2310      	movs	r3, #16
 8007e5e:	77fb      	strb	r3, [r7, #31]
 8007e60:	bf00      	nop
 8007e62:	e040      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a11      	ldr	r2, [pc, #68]	; (8007eb0 <UART_SetConfig+0x318>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d139      	bne.n	8007ee2 <UART_SetConfig+0x34a>
 8007e6e:	4b09      	ldr	r3, [pc, #36]	; (8007e94 <UART_SetConfig+0x2fc>)
 8007e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e7c:	d027      	beq.n	8007ece <UART_SetConfig+0x336>
 8007e7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e82:	d817      	bhi.n	8007eb4 <UART_SetConfig+0x31c>
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d01c      	beq.n	8007ec2 <UART_SetConfig+0x32a>
 8007e88:	e027      	b.n	8007eda <UART_SetConfig+0x342>
 8007e8a:	bf00      	nop
 8007e8c:	efff69f3 	.word	0xefff69f3
 8007e90:	40011000 	.word	0x40011000
 8007e94:	40023800 	.word	0x40023800
 8007e98:	40004400 	.word	0x40004400
 8007e9c:	40004800 	.word	0x40004800
 8007ea0:	40004c00 	.word	0x40004c00
 8007ea4:	40005000 	.word	0x40005000
 8007ea8:	40011400 	.word	0x40011400
 8007eac:	40007800 	.word	0x40007800
 8007eb0:	40007c00 	.word	0x40007c00
 8007eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eb8:	d006      	beq.n	8007ec8 <UART_SetConfig+0x330>
 8007eba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ebe:	d009      	beq.n	8007ed4 <UART_SetConfig+0x33c>
 8007ec0:	e00b      	b.n	8007eda <UART_SetConfig+0x342>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	77fb      	strb	r3, [r7, #31]
 8007ec6:	e00e      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	77fb      	strb	r3, [r7, #31]
 8007ecc:	e00b      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007ece:	2304      	movs	r3, #4
 8007ed0:	77fb      	strb	r3, [r7, #31]
 8007ed2:	e008      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007ed4:	2308      	movs	r3, #8
 8007ed6:	77fb      	strb	r3, [r7, #31]
 8007ed8:	e005      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007eda:	2310      	movs	r3, #16
 8007edc:	77fb      	strb	r3, [r7, #31]
 8007ede:	bf00      	nop
 8007ee0:	e001      	b.n	8007ee6 <UART_SetConfig+0x34e>
 8007ee2:	2310      	movs	r3, #16
 8007ee4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eee:	d17f      	bne.n	8007ff0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007ef0:	7ffb      	ldrb	r3, [r7, #31]
 8007ef2:	2b08      	cmp	r3, #8
 8007ef4:	d85c      	bhi.n	8007fb0 <UART_SetConfig+0x418>
 8007ef6:	a201      	add	r2, pc, #4	; (adr r2, 8007efc <UART_SetConfig+0x364>)
 8007ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efc:	08007f21 	.word	0x08007f21
 8007f00:	08007f41 	.word	0x08007f41
 8007f04:	08007f61 	.word	0x08007f61
 8007f08:	08007fb1 	.word	0x08007fb1
 8007f0c:	08007f79 	.word	0x08007f79
 8007f10:	08007fb1 	.word	0x08007fb1
 8007f14:	08007fb1 	.word	0x08007fb1
 8007f18:	08007fb1 	.word	0x08007fb1
 8007f1c:	08007f99 	.word	0x08007f99
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f20:	f7fd f9bc 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 8007f24:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	005a      	lsls	r2, r3, #1
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	085b      	lsrs	r3, r3, #1
 8007f30:	441a      	add	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	61bb      	str	r3, [r7, #24]
        break;
 8007f3e:	e03a      	b.n	8007fb6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f40:	f7fd f9c0 	bl	80052c4 <HAL_RCC_GetPCLK2Freq>
 8007f44:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	005a      	lsls	r2, r3, #1
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	441a      	add	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	61bb      	str	r3, [r7, #24]
        break;
 8007f5e:	e02a      	b.n	8007fb6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	085a      	lsrs	r2, r3, #1
 8007f66:	4b5f      	ldr	r3, [pc, #380]	; (80080e4 <UART_SetConfig+0x54c>)
 8007f68:	4413      	add	r3, r2
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6852      	ldr	r2, [r2, #4]
 8007f6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	61bb      	str	r3, [r7, #24]
        break;
 8007f76:	e01e      	b.n	8007fb6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f78:	f7fd f8ac 	bl	80050d4 <HAL_RCC_GetSysClockFreq>
 8007f7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	005a      	lsls	r2, r3, #1
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	085b      	lsrs	r3, r3, #1
 8007f88:	441a      	add	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	61bb      	str	r3, [r7, #24]
        break;
 8007f96:	e00e      	b.n	8007fb6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	085b      	lsrs	r3, r3, #1
 8007f9e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	61bb      	str	r3, [r7, #24]
        break;
 8007fae:	e002      	b.n	8007fb6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	75fb      	strb	r3, [r7, #23]
        break;
 8007fb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	2b0f      	cmp	r3, #15
 8007fba:	d916      	bls.n	8007fea <UART_SetConfig+0x452>
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fc2:	d212      	bcs.n	8007fea <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	f023 030f 	bic.w	r3, r3, #15
 8007fcc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	085b      	lsrs	r3, r3, #1
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	f003 0307 	and.w	r3, r3, #7
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	897b      	ldrh	r3, [r7, #10]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	897a      	ldrh	r2, [r7, #10]
 8007fe6:	60da      	str	r2, [r3, #12]
 8007fe8:	e070      	b.n	80080cc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	75fb      	strb	r3, [r7, #23]
 8007fee:	e06d      	b.n	80080cc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007ff0:	7ffb      	ldrb	r3, [r7, #31]
 8007ff2:	2b08      	cmp	r3, #8
 8007ff4:	d859      	bhi.n	80080aa <UART_SetConfig+0x512>
 8007ff6:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <UART_SetConfig+0x464>)
 8007ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffc:	08008021 	.word	0x08008021
 8008000:	0800803f 	.word	0x0800803f
 8008004:	0800805d 	.word	0x0800805d
 8008008:	080080ab 	.word	0x080080ab
 800800c:	08008075 	.word	0x08008075
 8008010:	080080ab 	.word	0x080080ab
 8008014:	080080ab 	.word	0x080080ab
 8008018:	080080ab 	.word	0x080080ab
 800801c:	08008093 	.word	0x08008093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008020:	f7fd f93c 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 8008024:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	085a      	lsrs	r2, r3, #1
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	441a      	add	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	fbb2 f3f3 	udiv	r3, r2, r3
 8008038:	b29b      	uxth	r3, r3
 800803a:	61bb      	str	r3, [r7, #24]
        break;
 800803c:	e038      	b.n	80080b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800803e:	f7fd f941 	bl	80052c4 <HAL_RCC_GetPCLK2Freq>
 8008042:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	085a      	lsrs	r2, r3, #1
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	441a      	add	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	fbb2 f3f3 	udiv	r3, r2, r3
 8008056:	b29b      	uxth	r3, r3
 8008058:	61bb      	str	r3, [r7, #24]
        break;
 800805a:	e029      	b.n	80080b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	085a      	lsrs	r2, r3, #1
 8008062:	4b21      	ldr	r3, [pc, #132]	; (80080e8 <UART_SetConfig+0x550>)
 8008064:	4413      	add	r3, r2
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	6852      	ldr	r2, [r2, #4]
 800806a:	fbb3 f3f2 	udiv	r3, r3, r2
 800806e:	b29b      	uxth	r3, r3
 8008070:	61bb      	str	r3, [r7, #24]
        break;
 8008072:	e01d      	b.n	80080b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008074:	f7fd f82e 	bl	80050d4 <HAL_RCC_GetSysClockFreq>
 8008078:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	085a      	lsrs	r2, r3, #1
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	441a      	add	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	fbb2 f3f3 	udiv	r3, r2, r3
 800808c:	b29b      	uxth	r3, r3
 800808e:	61bb      	str	r3, [r7, #24]
        break;
 8008090:	e00e      	b.n	80080b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	085b      	lsrs	r3, r3, #1
 8008098:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	61bb      	str	r3, [r7, #24]
        break;
 80080a8:	e002      	b.n	80080b0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	75fb      	strb	r3, [r7, #23]
        break;
 80080ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	2b0f      	cmp	r3, #15
 80080b4:	d908      	bls.n	80080c8 <UART_SetConfig+0x530>
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080bc:	d204      	bcs.n	80080c8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	69ba      	ldr	r2, [r7, #24]
 80080c4:	60da      	str	r2, [r3, #12]
 80080c6:	e001      	b.n	80080cc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80080d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3720      	adds	r7, #32
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	01e84800 	.word	0x01e84800
 80080e8:	00f42400 	.word	0x00f42400

080080ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00a      	beq.n	8008116 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	430a      	orrs	r2, r1
 8008114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	430a      	orrs	r2, r1
 8008136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00a      	beq.n	800815a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	430a      	orrs	r2, r1
 8008158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815e:	f003 0308 	and.w	r3, r3, #8
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00a      	beq.n	800817c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	430a      	orrs	r2, r1
 800817a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	f003 0310 	and.w	r3, r3, #16
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00a      	beq.n	800819e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	430a      	orrs	r2, r1
 800819c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	f003 0320 	and.w	r3, r3, #32
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00a      	beq.n	80081c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d01a      	beq.n	8008202 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081ea:	d10a      	bne.n	8008202 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	430a      	orrs	r2, r1
 8008200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00a      	beq.n	8008224 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	430a      	orrs	r2, r1
 8008222:	605a      	str	r2, [r3, #4]
  }
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af02      	add	r7, sp, #8
 8008236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800823e:	f7fb f8ab 	bl	8003398 <HAL_GetTick>
 8008242:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0308 	and.w	r3, r3, #8
 800824e:	2b08      	cmp	r3, #8
 8008250:	d10e      	bne.n	8008270 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008252:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f814 	bl	800828e <UART_WaitOnFlagUntilTimeout>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e00a      	b.n	8008286 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2220      	movs	r2, #32
 8008274:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2220      	movs	r2, #32
 800827a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	60b9      	str	r1, [r7, #8]
 8008298:	603b      	str	r3, [r7, #0]
 800829a:	4613      	mov	r3, r2
 800829c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800829e:	e05d      	b.n	800835c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a6:	d059      	beq.n	800835c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082a8:	f7fb f876 	bl	8003398 <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	69ba      	ldr	r2, [r7, #24]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d302      	bcc.n	80082be <UART_WaitOnFlagUntilTimeout+0x30>
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d11b      	bne.n	80082f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80082cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	689a      	ldr	r2, [r3, #8]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 0201 	bic.w	r2, r2, #1
 80082dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2220      	movs	r2, #32
 80082e2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2220      	movs	r2, #32
 80082e8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e042      	b.n	800837c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0304 	and.w	r3, r3, #4
 8008300:	2b00      	cmp	r3, #0
 8008302:	d02b      	beq.n	800835c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800830e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008312:	d123      	bne.n	800835c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800831c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800832c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689a      	ldr	r2, [r3, #8]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 0201 	bic.w	r2, r2, #1
 800833c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2220      	movs	r2, #32
 8008342:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2220      	movs	r2, #32
 8008348:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2220      	movs	r2, #32
 800834e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e00f      	b.n	800837c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	69da      	ldr	r2, [r3, #28]
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	4013      	ands	r3, r2
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	429a      	cmp	r2, r3
 800836a:	bf0c      	ite	eq
 800836c:	2301      	moveq	r3, #1
 800836e:	2300      	movne	r3, #0
 8008370:	b2db      	uxtb	r3, r3
 8008372:	461a      	mov	r2, r3
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	429a      	cmp	r2, r3
 8008378:	d092      	beq.n	80082a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800839a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	689a      	ldr	r2, [r3, #8]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f022 0201 	bic.w	r2, r2, #1
 80083aa:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2220      	movs	r2, #32
 80083b0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f7ff fbce 	bl	8007b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083e8:	bf00      	nop
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008406:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2220      	movs	r2, #32
 800840c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7ff fbab 	bl	8007b70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800841a:	bf00      	nop
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008430:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008436:	2b22      	cmp	r3, #34	; 0x22
 8008438:	d13a      	bne.n	80084b0 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008442:	89bb      	ldrh	r3, [r7, #12]
 8008444:	b2d9      	uxtb	r1, r3
 8008446:	89fb      	ldrh	r3, [r7, #14]
 8008448:	b2da      	uxtb	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800844e:	400a      	ands	r2, r1
 8008450:	b2d2      	uxtb	r2, r2
 8008452:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008464:	b29b      	uxth	r3, r3
 8008466:	3b01      	subs	r3, #1
 8008468:	b29a      	uxth	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008476:	b29b      	uxth	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	d121      	bne.n	80084c0 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800848a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689a      	ldr	r2, [r3, #8]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 0201 	bic.w	r2, r2, #1
 800849a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2220      	movs	r2, #32
 80084a0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7f9 ff37 	bl	800231c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084ae:	e007      	b.n	80084c0 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	699a      	ldr	r2, [r3, #24]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0208 	orr.w	r2, r2, #8
 80084be:	619a      	str	r2, [r3, #24]
}
 80084c0:	bf00      	nop
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084d6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084dc:	2b22      	cmp	r3, #34	; 0x22
 80084de:	d13a      	bne.n	8008556 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ec:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80084ee:	89ba      	ldrh	r2, [r7, #12]
 80084f0:	89fb      	ldrh	r3, [r7, #14]
 80084f2:	4013      	ands	r3, r2
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084fe:	1c9a      	adds	r2, r3, #2
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800850a:	b29b      	uxth	r3, r3
 800850c:	3b01      	subs	r3, #1
 800850e:	b29a      	uxth	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800851c:	b29b      	uxth	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d121      	bne.n	8008566 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008530:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	689a      	ldr	r2, [r3, #8]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f022 0201 	bic.w	r2, r2, #1
 8008540:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2220      	movs	r2, #32
 8008546:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7f9 fee4 	bl	800231c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008554:	e007      	b.n	8008566 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	699a      	ldr	r2, [r3, #24]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f042 0208 	orr.w	r2, r2, #8
 8008564:	619a      	str	r2, [r3, #24]
}
 8008566:	bf00      	nop
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
	...

08008570 <arm_pid_init_f32>:
 8008570:	ed90 7a08 	vldr	s14, [r0, #32]
 8008574:	edd0 7a06 	vldr	s15, [r0, #24]
 8008578:	ed90 6a07 	vldr	s12, [r0, #28]
 800857c:	eef1 6a67 	vneg.f32	s13, s15
 8008580:	ed80 7a02 	vstr	s14, [r0, #8]
 8008584:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008588:	ee37 6a07 	vadd.f32	s12, s14, s14
 800858c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008590:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8008594:	edc0 7a00 	vstr	s15, [r0]
 8008598:	ed80 7a01 	vstr	s14, [r0, #4]
 800859c:	b901      	cbnz	r1, 80085a0 <arm_pid_init_f32+0x30>
 800859e:	4770      	bx	lr
 80085a0:	2300      	movs	r3, #0
 80085a2:	60c3      	str	r3, [r0, #12]
 80085a4:	6103      	str	r3, [r0, #16]
 80085a6:	6143      	str	r3, [r0, #20]
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop

080085ac <abs>:
 80085ac:	2800      	cmp	r0, #0
 80085ae:	bfb8      	it	lt
 80085b0:	4240      	neglt	r0, r0
 80085b2:	4770      	bx	lr

080085b4 <__errno>:
 80085b4:	4b01      	ldr	r3, [pc, #4]	; (80085bc <__errno+0x8>)
 80085b6:	6818      	ldr	r0, [r3, #0]
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	2000001c 	.word	0x2000001c

080085c0 <__libc_init_array>:
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	4e0d      	ldr	r6, [pc, #52]	; (80085f8 <__libc_init_array+0x38>)
 80085c4:	4c0d      	ldr	r4, [pc, #52]	; (80085fc <__libc_init_array+0x3c>)
 80085c6:	1ba4      	subs	r4, r4, r6
 80085c8:	10a4      	asrs	r4, r4, #2
 80085ca:	2500      	movs	r5, #0
 80085cc:	42a5      	cmp	r5, r4
 80085ce:	d109      	bne.n	80085e4 <__libc_init_array+0x24>
 80085d0:	4e0b      	ldr	r6, [pc, #44]	; (8008600 <__libc_init_array+0x40>)
 80085d2:	4c0c      	ldr	r4, [pc, #48]	; (8008604 <__libc_init_array+0x44>)
 80085d4:	f003 fd56 	bl	800c084 <_init>
 80085d8:	1ba4      	subs	r4, r4, r6
 80085da:	10a4      	asrs	r4, r4, #2
 80085dc:	2500      	movs	r5, #0
 80085de:	42a5      	cmp	r5, r4
 80085e0:	d105      	bne.n	80085ee <__libc_init_array+0x2e>
 80085e2:	bd70      	pop	{r4, r5, r6, pc}
 80085e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085e8:	4798      	blx	r3
 80085ea:	3501      	adds	r5, #1
 80085ec:	e7ee      	b.n	80085cc <__libc_init_array+0xc>
 80085ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085f2:	4798      	blx	r3
 80085f4:	3501      	adds	r5, #1
 80085f6:	e7f2      	b.n	80085de <__libc_init_array+0x1e>
 80085f8:	0800c380 	.word	0x0800c380
 80085fc:	0800c380 	.word	0x0800c380
 8008600:	0800c380 	.word	0x0800c380
 8008604:	0800c384 	.word	0x0800c384

08008608 <memset>:
 8008608:	4402      	add	r2, r0
 800860a:	4603      	mov	r3, r0
 800860c:	4293      	cmp	r3, r2
 800860e:	d100      	bne.n	8008612 <memset+0xa>
 8008610:	4770      	bx	lr
 8008612:	f803 1b01 	strb.w	r1, [r3], #1
 8008616:	e7f9      	b.n	800860c <memset+0x4>

08008618 <__cvt>:
 8008618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800861c:	ec55 4b10 	vmov	r4, r5, d0
 8008620:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008622:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008626:	2d00      	cmp	r5, #0
 8008628:	460e      	mov	r6, r1
 800862a:	4691      	mov	r9, r2
 800862c:	4619      	mov	r1, r3
 800862e:	bfb8      	it	lt
 8008630:	4622      	movlt	r2, r4
 8008632:	462b      	mov	r3, r5
 8008634:	f027 0720 	bic.w	r7, r7, #32
 8008638:	bfbb      	ittet	lt
 800863a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800863e:	461d      	movlt	r5, r3
 8008640:	2300      	movge	r3, #0
 8008642:	232d      	movlt	r3, #45	; 0x2d
 8008644:	bfb8      	it	lt
 8008646:	4614      	movlt	r4, r2
 8008648:	2f46      	cmp	r7, #70	; 0x46
 800864a:	700b      	strb	r3, [r1, #0]
 800864c:	d004      	beq.n	8008658 <__cvt+0x40>
 800864e:	2f45      	cmp	r7, #69	; 0x45
 8008650:	d100      	bne.n	8008654 <__cvt+0x3c>
 8008652:	3601      	adds	r6, #1
 8008654:	2102      	movs	r1, #2
 8008656:	e000      	b.n	800865a <__cvt+0x42>
 8008658:	2103      	movs	r1, #3
 800865a:	ab03      	add	r3, sp, #12
 800865c:	9301      	str	r3, [sp, #4]
 800865e:	ab02      	add	r3, sp, #8
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	4632      	mov	r2, r6
 8008664:	4653      	mov	r3, sl
 8008666:	ec45 4b10 	vmov	d0, r4, r5
 800866a:	f001 fd75 	bl	800a158 <_dtoa_r>
 800866e:	2f47      	cmp	r7, #71	; 0x47
 8008670:	4680      	mov	r8, r0
 8008672:	d102      	bne.n	800867a <__cvt+0x62>
 8008674:	f019 0f01 	tst.w	r9, #1
 8008678:	d026      	beq.n	80086c8 <__cvt+0xb0>
 800867a:	2f46      	cmp	r7, #70	; 0x46
 800867c:	eb08 0906 	add.w	r9, r8, r6
 8008680:	d111      	bne.n	80086a6 <__cvt+0x8e>
 8008682:	f898 3000 	ldrb.w	r3, [r8]
 8008686:	2b30      	cmp	r3, #48	; 0x30
 8008688:	d10a      	bne.n	80086a0 <__cvt+0x88>
 800868a:	2200      	movs	r2, #0
 800868c:	2300      	movs	r3, #0
 800868e:	4620      	mov	r0, r4
 8008690:	4629      	mov	r1, r5
 8008692:	f7f8 fa39 	bl	8000b08 <__aeabi_dcmpeq>
 8008696:	b918      	cbnz	r0, 80086a0 <__cvt+0x88>
 8008698:	f1c6 0601 	rsb	r6, r6, #1
 800869c:	f8ca 6000 	str.w	r6, [sl]
 80086a0:	f8da 3000 	ldr.w	r3, [sl]
 80086a4:	4499      	add	r9, r3
 80086a6:	2200      	movs	r2, #0
 80086a8:	2300      	movs	r3, #0
 80086aa:	4620      	mov	r0, r4
 80086ac:	4629      	mov	r1, r5
 80086ae:	f7f8 fa2b 	bl	8000b08 <__aeabi_dcmpeq>
 80086b2:	b938      	cbnz	r0, 80086c4 <__cvt+0xac>
 80086b4:	2230      	movs	r2, #48	; 0x30
 80086b6:	9b03      	ldr	r3, [sp, #12]
 80086b8:	454b      	cmp	r3, r9
 80086ba:	d205      	bcs.n	80086c8 <__cvt+0xb0>
 80086bc:	1c59      	adds	r1, r3, #1
 80086be:	9103      	str	r1, [sp, #12]
 80086c0:	701a      	strb	r2, [r3, #0]
 80086c2:	e7f8      	b.n	80086b6 <__cvt+0x9e>
 80086c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80086c8:	9b03      	ldr	r3, [sp, #12]
 80086ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086cc:	eba3 0308 	sub.w	r3, r3, r8
 80086d0:	4640      	mov	r0, r8
 80086d2:	6013      	str	r3, [r2, #0]
 80086d4:	b004      	add	sp, #16
 80086d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080086da <__exponent>:
 80086da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086dc:	2900      	cmp	r1, #0
 80086de:	4604      	mov	r4, r0
 80086e0:	bfba      	itte	lt
 80086e2:	4249      	neglt	r1, r1
 80086e4:	232d      	movlt	r3, #45	; 0x2d
 80086e6:	232b      	movge	r3, #43	; 0x2b
 80086e8:	2909      	cmp	r1, #9
 80086ea:	f804 2b02 	strb.w	r2, [r4], #2
 80086ee:	7043      	strb	r3, [r0, #1]
 80086f0:	dd20      	ble.n	8008734 <__exponent+0x5a>
 80086f2:	f10d 0307 	add.w	r3, sp, #7
 80086f6:	461f      	mov	r7, r3
 80086f8:	260a      	movs	r6, #10
 80086fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80086fe:	fb06 1115 	mls	r1, r6, r5, r1
 8008702:	3130      	adds	r1, #48	; 0x30
 8008704:	2d09      	cmp	r5, #9
 8008706:	f803 1c01 	strb.w	r1, [r3, #-1]
 800870a:	f103 32ff 	add.w	r2, r3, #4294967295
 800870e:	4629      	mov	r1, r5
 8008710:	dc09      	bgt.n	8008726 <__exponent+0x4c>
 8008712:	3130      	adds	r1, #48	; 0x30
 8008714:	3b02      	subs	r3, #2
 8008716:	f802 1c01 	strb.w	r1, [r2, #-1]
 800871a:	42bb      	cmp	r3, r7
 800871c:	4622      	mov	r2, r4
 800871e:	d304      	bcc.n	800872a <__exponent+0x50>
 8008720:	1a10      	subs	r0, r2, r0
 8008722:	b003      	add	sp, #12
 8008724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008726:	4613      	mov	r3, r2
 8008728:	e7e7      	b.n	80086fa <__exponent+0x20>
 800872a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800872e:	f804 2b01 	strb.w	r2, [r4], #1
 8008732:	e7f2      	b.n	800871a <__exponent+0x40>
 8008734:	2330      	movs	r3, #48	; 0x30
 8008736:	4419      	add	r1, r3
 8008738:	7083      	strb	r3, [r0, #2]
 800873a:	1d02      	adds	r2, r0, #4
 800873c:	70c1      	strb	r1, [r0, #3]
 800873e:	e7ef      	b.n	8008720 <__exponent+0x46>

08008740 <_printf_float>:
 8008740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008744:	b08d      	sub	sp, #52	; 0x34
 8008746:	460c      	mov	r4, r1
 8008748:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800874c:	4616      	mov	r6, r2
 800874e:	461f      	mov	r7, r3
 8008750:	4605      	mov	r5, r0
 8008752:	f002 fde5 	bl	800b320 <_localeconv_r>
 8008756:	6803      	ldr	r3, [r0, #0]
 8008758:	9304      	str	r3, [sp, #16]
 800875a:	4618      	mov	r0, r3
 800875c:	f7f7 fd58 	bl	8000210 <strlen>
 8008760:	2300      	movs	r3, #0
 8008762:	930a      	str	r3, [sp, #40]	; 0x28
 8008764:	f8d8 3000 	ldr.w	r3, [r8]
 8008768:	9005      	str	r0, [sp, #20]
 800876a:	3307      	adds	r3, #7
 800876c:	f023 0307 	bic.w	r3, r3, #7
 8008770:	f103 0208 	add.w	r2, r3, #8
 8008774:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008778:	f8d4 b000 	ldr.w	fp, [r4]
 800877c:	f8c8 2000 	str.w	r2, [r8]
 8008780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008784:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008788:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800878c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008790:	9307      	str	r3, [sp, #28]
 8008792:	f8cd 8018 	str.w	r8, [sp, #24]
 8008796:	f04f 32ff 	mov.w	r2, #4294967295
 800879a:	4ba7      	ldr	r3, [pc, #668]	; (8008a38 <_printf_float+0x2f8>)
 800879c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087a0:	f7f8 f9e4 	bl	8000b6c <__aeabi_dcmpun>
 80087a4:	bb70      	cbnz	r0, 8008804 <_printf_float+0xc4>
 80087a6:	f04f 32ff 	mov.w	r2, #4294967295
 80087aa:	4ba3      	ldr	r3, [pc, #652]	; (8008a38 <_printf_float+0x2f8>)
 80087ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087b0:	f7f8 f9be 	bl	8000b30 <__aeabi_dcmple>
 80087b4:	bb30      	cbnz	r0, 8008804 <_printf_float+0xc4>
 80087b6:	2200      	movs	r2, #0
 80087b8:	2300      	movs	r3, #0
 80087ba:	4640      	mov	r0, r8
 80087bc:	4649      	mov	r1, r9
 80087be:	f7f8 f9ad 	bl	8000b1c <__aeabi_dcmplt>
 80087c2:	b110      	cbz	r0, 80087ca <_printf_float+0x8a>
 80087c4:	232d      	movs	r3, #45	; 0x2d
 80087c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087ca:	4a9c      	ldr	r2, [pc, #624]	; (8008a3c <_printf_float+0x2fc>)
 80087cc:	4b9c      	ldr	r3, [pc, #624]	; (8008a40 <_printf_float+0x300>)
 80087ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80087d2:	bf8c      	ite	hi
 80087d4:	4690      	movhi	r8, r2
 80087d6:	4698      	movls	r8, r3
 80087d8:	2303      	movs	r3, #3
 80087da:	f02b 0204 	bic.w	r2, fp, #4
 80087de:	6123      	str	r3, [r4, #16]
 80087e0:	6022      	str	r2, [r4, #0]
 80087e2:	f04f 0900 	mov.w	r9, #0
 80087e6:	9700      	str	r7, [sp, #0]
 80087e8:	4633      	mov	r3, r6
 80087ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80087ec:	4621      	mov	r1, r4
 80087ee:	4628      	mov	r0, r5
 80087f0:	f000 f9e6 	bl	8008bc0 <_printf_common>
 80087f4:	3001      	adds	r0, #1
 80087f6:	f040 808d 	bne.w	8008914 <_printf_float+0x1d4>
 80087fa:	f04f 30ff 	mov.w	r0, #4294967295
 80087fe:	b00d      	add	sp, #52	; 0x34
 8008800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008804:	4642      	mov	r2, r8
 8008806:	464b      	mov	r3, r9
 8008808:	4640      	mov	r0, r8
 800880a:	4649      	mov	r1, r9
 800880c:	f7f8 f9ae 	bl	8000b6c <__aeabi_dcmpun>
 8008810:	b110      	cbz	r0, 8008818 <_printf_float+0xd8>
 8008812:	4a8c      	ldr	r2, [pc, #560]	; (8008a44 <_printf_float+0x304>)
 8008814:	4b8c      	ldr	r3, [pc, #560]	; (8008a48 <_printf_float+0x308>)
 8008816:	e7da      	b.n	80087ce <_printf_float+0x8e>
 8008818:	6861      	ldr	r1, [r4, #4]
 800881a:	1c4b      	adds	r3, r1, #1
 800881c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008820:	a80a      	add	r0, sp, #40	; 0x28
 8008822:	d13e      	bne.n	80088a2 <_printf_float+0x162>
 8008824:	2306      	movs	r3, #6
 8008826:	6063      	str	r3, [r4, #4]
 8008828:	2300      	movs	r3, #0
 800882a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800882e:	ab09      	add	r3, sp, #36	; 0x24
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	ec49 8b10 	vmov	d0, r8, r9
 8008836:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800883a:	6022      	str	r2, [r4, #0]
 800883c:	f8cd a004 	str.w	sl, [sp, #4]
 8008840:	6861      	ldr	r1, [r4, #4]
 8008842:	4628      	mov	r0, r5
 8008844:	f7ff fee8 	bl	8008618 <__cvt>
 8008848:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800884c:	2b47      	cmp	r3, #71	; 0x47
 800884e:	4680      	mov	r8, r0
 8008850:	d109      	bne.n	8008866 <_printf_float+0x126>
 8008852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008854:	1cd8      	adds	r0, r3, #3
 8008856:	db02      	blt.n	800885e <_printf_float+0x11e>
 8008858:	6862      	ldr	r2, [r4, #4]
 800885a:	4293      	cmp	r3, r2
 800885c:	dd47      	ble.n	80088ee <_printf_float+0x1ae>
 800885e:	f1aa 0a02 	sub.w	sl, sl, #2
 8008862:	fa5f fa8a 	uxtb.w	sl, sl
 8008866:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800886a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800886c:	d824      	bhi.n	80088b8 <_printf_float+0x178>
 800886e:	3901      	subs	r1, #1
 8008870:	4652      	mov	r2, sl
 8008872:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008876:	9109      	str	r1, [sp, #36]	; 0x24
 8008878:	f7ff ff2f 	bl	80086da <__exponent>
 800887c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800887e:	1813      	adds	r3, r2, r0
 8008880:	2a01      	cmp	r2, #1
 8008882:	4681      	mov	r9, r0
 8008884:	6123      	str	r3, [r4, #16]
 8008886:	dc02      	bgt.n	800888e <_printf_float+0x14e>
 8008888:	6822      	ldr	r2, [r4, #0]
 800888a:	07d1      	lsls	r1, r2, #31
 800888c:	d501      	bpl.n	8008892 <_printf_float+0x152>
 800888e:	3301      	adds	r3, #1
 8008890:	6123      	str	r3, [r4, #16]
 8008892:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008896:	2b00      	cmp	r3, #0
 8008898:	d0a5      	beq.n	80087e6 <_printf_float+0xa6>
 800889a:	232d      	movs	r3, #45	; 0x2d
 800889c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088a0:	e7a1      	b.n	80087e6 <_printf_float+0xa6>
 80088a2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80088a6:	f000 8177 	beq.w	8008b98 <_printf_float+0x458>
 80088aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80088ae:	d1bb      	bne.n	8008828 <_printf_float+0xe8>
 80088b0:	2900      	cmp	r1, #0
 80088b2:	d1b9      	bne.n	8008828 <_printf_float+0xe8>
 80088b4:	2301      	movs	r3, #1
 80088b6:	e7b6      	b.n	8008826 <_printf_float+0xe6>
 80088b8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80088bc:	d119      	bne.n	80088f2 <_printf_float+0x1b2>
 80088be:	2900      	cmp	r1, #0
 80088c0:	6863      	ldr	r3, [r4, #4]
 80088c2:	dd0c      	ble.n	80088de <_printf_float+0x19e>
 80088c4:	6121      	str	r1, [r4, #16]
 80088c6:	b913      	cbnz	r3, 80088ce <_printf_float+0x18e>
 80088c8:	6822      	ldr	r2, [r4, #0]
 80088ca:	07d2      	lsls	r2, r2, #31
 80088cc:	d502      	bpl.n	80088d4 <_printf_float+0x194>
 80088ce:	3301      	adds	r3, #1
 80088d0:	440b      	add	r3, r1
 80088d2:	6123      	str	r3, [r4, #16]
 80088d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80088d8:	f04f 0900 	mov.w	r9, #0
 80088dc:	e7d9      	b.n	8008892 <_printf_float+0x152>
 80088de:	b913      	cbnz	r3, 80088e6 <_printf_float+0x1a6>
 80088e0:	6822      	ldr	r2, [r4, #0]
 80088e2:	07d0      	lsls	r0, r2, #31
 80088e4:	d501      	bpl.n	80088ea <_printf_float+0x1aa>
 80088e6:	3302      	adds	r3, #2
 80088e8:	e7f3      	b.n	80088d2 <_printf_float+0x192>
 80088ea:	2301      	movs	r3, #1
 80088ec:	e7f1      	b.n	80088d2 <_printf_float+0x192>
 80088ee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80088f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80088f6:	4293      	cmp	r3, r2
 80088f8:	db05      	blt.n	8008906 <_printf_float+0x1c6>
 80088fa:	6822      	ldr	r2, [r4, #0]
 80088fc:	6123      	str	r3, [r4, #16]
 80088fe:	07d1      	lsls	r1, r2, #31
 8008900:	d5e8      	bpl.n	80088d4 <_printf_float+0x194>
 8008902:	3301      	adds	r3, #1
 8008904:	e7e5      	b.n	80088d2 <_printf_float+0x192>
 8008906:	2b00      	cmp	r3, #0
 8008908:	bfd4      	ite	le
 800890a:	f1c3 0302 	rsble	r3, r3, #2
 800890e:	2301      	movgt	r3, #1
 8008910:	4413      	add	r3, r2
 8008912:	e7de      	b.n	80088d2 <_printf_float+0x192>
 8008914:	6823      	ldr	r3, [r4, #0]
 8008916:	055a      	lsls	r2, r3, #21
 8008918:	d407      	bmi.n	800892a <_printf_float+0x1ea>
 800891a:	6923      	ldr	r3, [r4, #16]
 800891c:	4642      	mov	r2, r8
 800891e:	4631      	mov	r1, r6
 8008920:	4628      	mov	r0, r5
 8008922:	47b8      	blx	r7
 8008924:	3001      	adds	r0, #1
 8008926:	d12b      	bne.n	8008980 <_printf_float+0x240>
 8008928:	e767      	b.n	80087fa <_printf_float+0xba>
 800892a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800892e:	f240 80dc 	bls.w	8008aea <_printf_float+0x3aa>
 8008932:	2200      	movs	r2, #0
 8008934:	2300      	movs	r3, #0
 8008936:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800893a:	f7f8 f8e5 	bl	8000b08 <__aeabi_dcmpeq>
 800893e:	2800      	cmp	r0, #0
 8008940:	d033      	beq.n	80089aa <_printf_float+0x26a>
 8008942:	2301      	movs	r3, #1
 8008944:	4a41      	ldr	r2, [pc, #260]	; (8008a4c <_printf_float+0x30c>)
 8008946:	4631      	mov	r1, r6
 8008948:	4628      	mov	r0, r5
 800894a:	47b8      	blx	r7
 800894c:	3001      	adds	r0, #1
 800894e:	f43f af54 	beq.w	80087fa <_printf_float+0xba>
 8008952:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008956:	429a      	cmp	r2, r3
 8008958:	db02      	blt.n	8008960 <_printf_float+0x220>
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	07d8      	lsls	r0, r3, #31
 800895e:	d50f      	bpl.n	8008980 <_printf_float+0x240>
 8008960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008964:	4631      	mov	r1, r6
 8008966:	4628      	mov	r0, r5
 8008968:	47b8      	blx	r7
 800896a:	3001      	adds	r0, #1
 800896c:	f43f af45 	beq.w	80087fa <_printf_float+0xba>
 8008970:	f04f 0800 	mov.w	r8, #0
 8008974:	f104 091a 	add.w	r9, r4, #26
 8008978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800897a:	3b01      	subs	r3, #1
 800897c:	4543      	cmp	r3, r8
 800897e:	dc09      	bgt.n	8008994 <_printf_float+0x254>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	079b      	lsls	r3, r3, #30
 8008984:	f100 8103 	bmi.w	8008b8e <_printf_float+0x44e>
 8008988:	68e0      	ldr	r0, [r4, #12]
 800898a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800898c:	4298      	cmp	r0, r3
 800898e:	bfb8      	it	lt
 8008990:	4618      	movlt	r0, r3
 8008992:	e734      	b.n	80087fe <_printf_float+0xbe>
 8008994:	2301      	movs	r3, #1
 8008996:	464a      	mov	r2, r9
 8008998:	4631      	mov	r1, r6
 800899a:	4628      	mov	r0, r5
 800899c:	47b8      	blx	r7
 800899e:	3001      	adds	r0, #1
 80089a0:	f43f af2b 	beq.w	80087fa <_printf_float+0xba>
 80089a4:	f108 0801 	add.w	r8, r8, #1
 80089a8:	e7e6      	b.n	8008978 <_printf_float+0x238>
 80089aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	dc2b      	bgt.n	8008a08 <_printf_float+0x2c8>
 80089b0:	2301      	movs	r3, #1
 80089b2:	4a26      	ldr	r2, [pc, #152]	; (8008a4c <_printf_float+0x30c>)
 80089b4:	4631      	mov	r1, r6
 80089b6:	4628      	mov	r0, r5
 80089b8:	47b8      	blx	r7
 80089ba:	3001      	adds	r0, #1
 80089bc:	f43f af1d 	beq.w	80087fa <_printf_float+0xba>
 80089c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c2:	b923      	cbnz	r3, 80089ce <_printf_float+0x28e>
 80089c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c6:	b913      	cbnz	r3, 80089ce <_printf_float+0x28e>
 80089c8:	6823      	ldr	r3, [r4, #0]
 80089ca:	07d9      	lsls	r1, r3, #31
 80089cc:	d5d8      	bpl.n	8008980 <_printf_float+0x240>
 80089ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089d2:	4631      	mov	r1, r6
 80089d4:	4628      	mov	r0, r5
 80089d6:	47b8      	blx	r7
 80089d8:	3001      	adds	r0, #1
 80089da:	f43f af0e 	beq.w	80087fa <_printf_float+0xba>
 80089de:	f04f 0900 	mov.w	r9, #0
 80089e2:	f104 0a1a 	add.w	sl, r4, #26
 80089e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e8:	425b      	negs	r3, r3
 80089ea:	454b      	cmp	r3, r9
 80089ec:	dc01      	bgt.n	80089f2 <_printf_float+0x2b2>
 80089ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f0:	e794      	b.n	800891c <_printf_float+0x1dc>
 80089f2:	2301      	movs	r3, #1
 80089f4:	4652      	mov	r2, sl
 80089f6:	4631      	mov	r1, r6
 80089f8:	4628      	mov	r0, r5
 80089fa:	47b8      	blx	r7
 80089fc:	3001      	adds	r0, #1
 80089fe:	f43f aefc 	beq.w	80087fa <_printf_float+0xba>
 8008a02:	f109 0901 	add.w	r9, r9, #1
 8008a06:	e7ee      	b.n	80089e6 <_printf_float+0x2a6>
 8008a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	bfa8      	it	ge
 8008a10:	461a      	movge	r2, r3
 8008a12:	2a00      	cmp	r2, #0
 8008a14:	4691      	mov	r9, r2
 8008a16:	dd07      	ble.n	8008a28 <_printf_float+0x2e8>
 8008a18:	4613      	mov	r3, r2
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	4642      	mov	r2, r8
 8008a1e:	4628      	mov	r0, r5
 8008a20:	47b8      	blx	r7
 8008a22:	3001      	adds	r0, #1
 8008a24:	f43f aee9 	beq.w	80087fa <_printf_float+0xba>
 8008a28:	f104 031a 	add.w	r3, r4, #26
 8008a2c:	f04f 0b00 	mov.w	fp, #0
 8008a30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a34:	9306      	str	r3, [sp, #24]
 8008a36:	e015      	b.n	8008a64 <_printf_float+0x324>
 8008a38:	7fefffff 	.word	0x7fefffff
 8008a3c:	0800c0c8 	.word	0x0800c0c8
 8008a40:	0800c0c4 	.word	0x0800c0c4
 8008a44:	0800c0d0 	.word	0x0800c0d0
 8008a48:	0800c0cc 	.word	0x0800c0cc
 8008a4c:	0800c0d4 	.word	0x0800c0d4
 8008a50:	2301      	movs	r3, #1
 8008a52:	9a06      	ldr	r2, [sp, #24]
 8008a54:	4631      	mov	r1, r6
 8008a56:	4628      	mov	r0, r5
 8008a58:	47b8      	blx	r7
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	f43f aecd 	beq.w	80087fa <_printf_float+0xba>
 8008a60:	f10b 0b01 	add.w	fp, fp, #1
 8008a64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008a68:	ebaa 0309 	sub.w	r3, sl, r9
 8008a6c:	455b      	cmp	r3, fp
 8008a6e:	dcef      	bgt.n	8008a50 <_printf_float+0x310>
 8008a70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a74:	429a      	cmp	r2, r3
 8008a76:	44d0      	add	r8, sl
 8008a78:	db15      	blt.n	8008aa6 <_printf_float+0x366>
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	07da      	lsls	r2, r3, #31
 8008a7e:	d412      	bmi.n	8008aa6 <_printf_float+0x366>
 8008a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a84:	eba3 020a 	sub.w	r2, r3, sl
 8008a88:	eba3 0a01 	sub.w	sl, r3, r1
 8008a8c:	4592      	cmp	sl, r2
 8008a8e:	bfa8      	it	ge
 8008a90:	4692      	movge	sl, r2
 8008a92:	f1ba 0f00 	cmp.w	sl, #0
 8008a96:	dc0e      	bgt.n	8008ab6 <_printf_float+0x376>
 8008a98:	f04f 0800 	mov.w	r8, #0
 8008a9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008aa0:	f104 091a 	add.w	r9, r4, #26
 8008aa4:	e019      	b.n	8008ada <_printf_float+0x39a>
 8008aa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008aaa:	4631      	mov	r1, r6
 8008aac:	4628      	mov	r0, r5
 8008aae:	47b8      	blx	r7
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d1e5      	bne.n	8008a80 <_printf_float+0x340>
 8008ab4:	e6a1      	b.n	80087fa <_printf_float+0xba>
 8008ab6:	4653      	mov	r3, sl
 8008ab8:	4642      	mov	r2, r8
 8008aba:	4631      	mov	r1, r6
 8008abc:	4628      	mov	r0, r5
 8008abe:	47b8      	blx	r7
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	d1e9      	bne.n	8008a98 <_printf_float+0x358>
 8008ac4:	e699      	b.n	80087fa <_printf_float+0xba>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	464a      	mov	r2, r9
 8008aca:	4631      	mov	r1, r6
 8008acc:	4628      	mov	r0, r5
 8008ace:	47b8      	blx	r7
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	f43f ae92 	beq.w	80087fa <_printf_float+0xba>
 8008ad6:	f108 0801 	add.w	r8, r8, #1
 8008ada:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ade:	1a9b      	subs	r3, r3, r2
 8008ae0:	eba3 030a 	sub.w	r3, r3, sl
 8008ae4:	4543      	cmp	r3, r8
 8008ae6:	dcee      	bgt.n	8008ac6 <_printf_float+0x386>
 8008ae8:	e74a      	b.n	8008980 <_printf_float+0x240>
 8008aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aec:	2a01      	cmp	r2, #1
 8008aee:	dc01      	bgt.n	8008af4 <_printf_float+0x3b4>
 8008af0:	07db      	lsls	r3, r3, #31
 8008af2:	d53a      	bpl.n	8008b6a <_printf_float+0x42a>
 8008af4:	2301      	movs	r3, #1
 8008af6:	4642      	mov	r2, r8
 8008af8:	4631      	mov	r1, r6
 8008afa:	4628      	mov	r0, r5
 8008afc:	47b8      	blx	r7
 8008afe:	3001      	adds	r0, #1
 8008b00:	f43f ae7b 	beq.w	80087fa <_printf_float+0xba>
 8008b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	47b8      	blx	r7
 8008b0e:	3001      	adds	r0, #1
 8008b10:	f108 0801 	add.w	r8, r8, #1
 8008b14:	f43f ae71 	beq.w	80087fa <_printf_float+0xba>
 8008b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f103 3aff 	add.w	sl, r3, #4294967295
 8008b20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b24:	2300      	movs	r3, #0
 8008b26:	f7f7 ffef 	bl	8000b08 <__aeabi_dcmpeq>
 8008b2a:	b9c8      	cbnz	r0, 8008b60 <_printf_float+0x420>
 8008b2c:	4653      	mov	r3, sl
 8008b2e:	4642      	mov	r2, r8
 8008b30:	4631      	mov	r1, r6
 8008b32:	4628      	mov	r0, r5
 8008b34:	47b8      	blx	r7
 8008b36:	3001      	adds	r0, #1
 8008b38:	d10e      	bne.n	8008b58 <_printf_float+0x418>
 8008b3a:	e65e      	b.n	80087fa <_printf_float+0xba>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	4652      	mov	r2, sl
 8008b40:	4631      	mov	r1, r6
 8008b42:	4628      	mov	r0, r5
 8008b44:	47b8      	blx	r7
 8008b46:	3001      	adds	r0, #1
 8008b48:	f43f ae57 	beq.w	80087fa <_printf_float+0xba>
 8008b4c:	f108 0801 	add.w	r8, r8, #1
 8008b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b52:	3b01      	subs	r3, #1
 8008b54:	4543      	cmp	r3, r8
 8008b56:	dcf1      	bgt.n	8008b3c <_printf_float+0x3fc>
 8008b58:	464b      	mov	r3, r9
 8008b5a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b5e:	e6de      	b.n	800891e <_printf_float+0x1de>
 8008b60:	f04f 0800 	mov.w	r8, #0
 8008b64:	f104 0a1a 	add.w	sl, r4, #26
 8008b68:	e7f2      	b.n	8008b50 <_printf_float+0x410>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e7df      	b.n	8008b2e <_printf_float+0x3ee>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	464a      	mov	r2, r9
 8008b72:	4631      	mov	r1, r6
 8008b74:	4628      	mov	r0, r5
 8008b76:	47b8      	blx	r7
 8008b78:	3001      	adds	r0, #1
 8008b7a:	f43f ae3e 	beq.w	80087fa <_printf_float+0xba>
 8008b7e:	f108 0801 	add.w	r8, r8, #1
 8008b82:	68e3      	ldr	r3, [r4, #12]
 8008b84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b86:	1a9b      	subs	r3, r3, r2
 8008b88:	4543      	cmp	r3, r8
 8008b8a:	dcf0      	bgt.n	8008b6e <_printf_float+0x42e>
 8008b8c:	e6fc      	b.n	8008988 <_printf_float+0x248>
 8008b8e:	f04f 0800 	mov.w	r8, #0
 8008b92:	f104 0919 	add.w	r9, r4, #25
 8008b96:	e7f4      	b.n	8008b82 <_printf_float+0x442>
 8008b98:	2900      	cmp	r1, #0
 8008b9a:	f43f ae8b 	beq.w	80088b4 <_printf_float+0x174>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008ba4:	ab09      	add	r3, sp, #36	; 0x24
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	ec49 8b10 	vmov	d0, r8, r9
 8008bac:	6022      	str	r2, [r4, #0]
 8008bae:	f8cd a004 	str.w	sl, [sp, #4]
 8008bb2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	f7ff fd2e 	bl	8008618 <__cvt>
 8008bbc:	4680      	mov	r8, r0
 8008bbe:	e648      	b.n	8008852 <_printf_float+0x112>

08008bc0 <_printf_common>:
 8008bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc4:	4691      	mov	r9, r2
 8008bc6:	461f      	mov	r7, r3
 8008bc8:	688a      	ldr	r2, [r1, #8]
 8008bca:	690b      	ldr	r3, [r1, #16]
 8008bcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	bfb8      	it	lt
 8008bd4:	4613      	movlt	r3, r2
 8008bd6:	f8c9 3000 	str.w	r3, [r9]
 8008bda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bde:	4606      	mov	r6, r0
 8008be0:	460c      	mov	r4, r1
 8008be2:	b112      	cbz	r2, 8008bea <_printf_common+0x2a>
 8008be4:	3301      	adds	r3, #1
 8008be6:	f8c9 3000 	str.w	r3, [r9]
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	0699      	lsls	r1, r3, #26
 8008bee:	bf42      	ittt	mi
 8008bf0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008bf4:	3302      	addmi	r3, #2
 8008bf6:	f8c9 3000 	strmi.w	r3, [r9]
 8008bfa:	6825      	ldr	r5, [r4, #0]
 8008bfc:	f015 0506 	ands.w	r5, r5, #6
 8008c00:	d107      	bne.n	8008c12 <_printf_common+0x52>
 8008c02:	f104 0a19 	add.w	sl, r4, #25
 8008c06:	68e3      	ldr	r3, [r4, #12]
 8008c08:	f8d9 2000 	ldr.w	r2, [r9]
 8008c0c:	1a9b      	subs	r3, r3, r2
 8008c0e:	42ab      	cmp	r3, r5
 8008c10:	dc28      	bgt.n	8008c64 <_printf_common+0xa4>
 8008c12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008c16:	6822      	ldr	r2, [r4, #0]
 8008c18:	3300      	adds	r3, #0
 8008c1a:	bf18      	it	ne
 8008c1c:	2301      	movne	r3, #1
 8008c1e:	0692      	lsls	r2, r2, #26
 8008c20:	d42d      	bmi.n	8008c7e <_printf_common+0xbe>
 8008c22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c26:	4639      	mov	r1, r7
 8008c28:	4630      	mov	r0, r6
 8008c2a:	47c0      	blx	r8
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d020      	beq.n	8008c72 <_printf_common+0xb2>
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	68e5      	ldr	r5, [r4, #12]
 8008c34:	f8d9 2000 	ldr.w	r2, [r9]
 8008c38:	f003 0306 	and.w	r3, r3, #6
 8008c3c:	2b04      	cmp	r3, #4
 8008c3e:	bf08      	it	eq
 8008c40:	1aad      	subeq	r5, r5, r2
 8008c42:	68a3      	ldr	r3, [r4, #8]
 8008c44:	6922      	ldr	r2, [r4, #16]
 8008c46:	bf0c      	ite	eq
 8008c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c4c:	2500      	movne	r5, #0
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	bfc4      	itt	gt
 8008c52:	1a9b      	subgt	r3, r3, r2
 8008c54:	18ed      	addgt	r5, r5, r3
 8008c56:	f04f 0900 	mov.w	r9, #0
 8008c5a:	341a      	adds	r4, #26
 8008c5c:	454d      	cmp	r5, r9
 8008c5e:	d11a      	bne.n	8008c96 <_printf_common+0xd6>
 8008c60:	2000      	movs	r0, #0
 8008c62:	e008      	b.n	8008c76 <_printf_common+0xb6>
 8008c64:	2301      	movs	r3, #1
 8008c66:	4652      	mov	r2, sl
 8008c68:	4639      	mov	r1, r7
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	47c0      	blx	r8
 8008c6e:	3001      	adds	r0, #1
 8008c70:	d103      	bne.n	8008c7a <_printf_common+0xba>
 8008c72:	f04f 30ff 	mov.w	r0, #4294967295
 8008c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c7a:	3501      	adds	r5, #1
 8008c7c:	e7c3      	b.n	8008c06 <_printf_common+0x46>
 8008c7e:	18e1      	adds	r1, r4, r3
 8008c80:	1c5a      	adds	r2, r3, #1
 8008c82:	2030      	movs	r0, #48	; 0x30
 8008c84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c88:	4422      	add	r2, r4
 8008c8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c92:	3302      	adds	r3, #2
 8008c94:	e7c5      	b.n	8008c22 <_printf_common+0x62>
 8008c96:	2301      	movs	r3, #1
 8008c98:	4622      	mov	r2, r4
 8008c9a:	4639      	mov	r1, r7
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	47c0      	blx	r8
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	d0e6      	beq.n	8008c72 <_printf_common+0xb2>
 8008ca4:	f109 0901 	add.w	r9, r9, #1
 8008ca8:	e7d8      	b.n	8008c5c <_printf_common+0x9c>
	...

08008cac <_printf_i>:
 8008cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cb0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	7e09      	ldrb	r1, [r1, #24]
 8008cb8:	b085      	sub	sp, #20
 8008cba:	296e      	cmp	r1, #110	; 0x6e
 8008cbc:	4617      	mov	r7, r2
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	4698      	mov	r8, r3
 8008cc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cc4:	f000 80b3 	beq.w	8008e2e <_printf_i+0x182>
 8008cc8:	d822      	bhi.n	8008d10 <_printf_i+0x64>
 8008cca:	2963      	cmp	r1, #99	; 0x63
 8008ccc:	d036      	beq.n	8008d3c <_printf_i+0x90>
 8008cce:	d80a      	bhi.n	8008ce6 <_printf_i+0x3a>
 8008cd0:	2900      	cmp	r1, #0
 8008cd2:	f000 80b9 	beq.w	8008e48 <_printf_i+0x19c>
 8008cd6:	2958      	cmp	r1, #88	; 0x58
 8008cd8:	f000 8083 	beq.w	8008de2 <_printf_i+0x136>
 8008cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ce0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008ce4:	e032      	b.n	8008d4c <_printf_i+0xa0>
 8008ce6:	2964      	cmp	r1, #100	; 0x64
 8008ce8:	d001      	beq.n	8008cee <_printf_i+0x42>
 8008cea:	2969      	cmp	r1, #105	; 0x69
 8008cec:	d1f6      	bne.n	8008cdc <_printf_i+0x30>
 8008cee:	6820      	ldr	r0, [r4, #0]
 8008cf0:	6813      	ldr	r3, [r2, #0]
 8008cf2:	0605      	lsls	r5, r0, #24
 8008cf4:	f103 0104 	add.w	r1, r3, #4
 8008cf8:	d52a      	bpl.n	8008d50 <_printf_i+0xa4>
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6011      	str	r1, [r2, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	da03      	bge.n	8008d0a <_printf_i+0x5e>
 8008d02:	222d      	movs	r2, #45	; 0x2d
 8008d04:	425b      	negs	r3, r3
 8008d06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008d0a:	486f      	ldr	r0, [pc, #444]	; (8008ec8 <_printf_i+0x21c>)
 8008d0c:	220a      	movs	r2, #10
 8008d0e:	e039      	b.n	8008d84 <_printf_i+0xd8>
 8008d10:	2973      	cmp	r1, #115	; 0x73
 8008d12:	f000 809d 	beq.w	8008e50 <_printf_i+0x1a4>
 8008d16:	d808      	bhi.n	8008d2a <_printf_i+0x7e>
 8008d18:	296f      	cmp	r1, #111	; 0x6f
 8008d1a:	d020      	beq.n	8008d5e <_printf_i+0xb2>
 8008d1c:	2970      	cmp	r1, #112	; 0x70
 8008d1e:	d1dd      	bne.n	8008cdc <_printf_i+0x30>
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	f043 0320 	orr.w	r3, r3, #32
 8008d26:	6023      	str	r3, [r4, #0]
 8008d28:	e003      	b.n	8008d32 <_printf_i+0x86>
 8008d2a:	2975      	cmp	r1, #117	; 0x75
 8008d2c:	d017      	beq.n	8008d5e <_printf_i+0xb2>
 8008d2e:	2978      	cmp	r1, #120	; 0x78
 8008d30:	d1d4      	bne.n	8008cdc <_printf_i+0x30>
 8008d32:	2378      	movs	r3, #120	; 0x78
 8008d34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d38:	4864      	ldr	r0, [pc, #400]	; (8008ecc <_printf_i+0x220>)
 8008d3a:	e055      	b.n	8008de8 <_printf_i+0x13c>
 8008d3c:	6813      	ldr	r3, [r2, #0]
 8008d3e:	1d19      	adds	r1, r3, #4
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6011      	str	r1, [r2, #0]
 8008d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e08c      	b.n	8008e6a <_printf_i+0x1be>
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6011      	str	r1, [r2, #0]
 8008d54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d58:	bf18      	it	ne
 8008d5a:	b21b      	sxthne	r3, r3
 8008d5c:	e7cf      	b.n	8008cfe <_printf_i+0x52>
 8008d5e:	6813      	ldr	r3, [r2, #0]
 8008d60:	6825      	ldr	r5, [r4, #0]
 8008d62:	1d18      	adds	r0, r3, #4
 8008d64:	6010      	str	r0, [r2, #0]
 8008d66:	0628      	lsls	r0, r5, #24
 8008d68:	d501      	bpl.n	8008d6e <_printf_i+0xc2>
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	e002      	b.n	8008d74 <_printf_i+0xc8>
 8008d6e:	0668      	lsls	r0, r5, #25
 8008d70:	d5fb      	bpl.n	8008d6a <_printf_i+0xbe>
 8008d72:	881b      	ldrh	r3, [r3, #0]
 8008d74:	4854      	ldr	r0, [pc, #336]	; (8008ec8 <_printf_i+0x21c>)
 8008d76:	296f      	cmp	r1, #111	; 0x6f
 8008d78:	bf14      	ite	ne
 8008d7a:	220a      	movne	r2, #10
 8008d7c:	2208      	moveq	r2, #8
 8008d7e:	2100      	movs	r1, #0
 8008d80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d84:	6865      	ldr	r5, [r4, #4]
 8008d86:	60a5      	str	r5, [r4, #8]
 8008d88:	2d00      	cmp	r5, #0
 8008d8a:	f2c0 8095 	blt.w	8008eb8 <_printf_i+0x20c>
 8008d8e:	6821      	ldr	r1, [r4, #0]
 8008d90:	f021 0104 	bic.w	r1, r1, #4
 8008d94:	6021      	str	r1, [r4, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d13d      	bne.n	8008e16 <_printf_i+0x16a>
 8008d9a:	2d00      	cmp	r5, #0
 8008d9c:	f040 808e 	bne.w	8008ebc <_printf_i+0x210>
 8008da0:	4665      	mov	r5, ip
 8008da2:	2a08      	cmp	r2, #8
 8008da4:	d10b      	bne.n	8008dbe <_printf_i+0x112>
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	07db      	lsls	r3, r3, #31
 8008daa:	d508      	bpl.n	8008dbe <_printf_i+0x112>
 8008dac:	6923      	ldr	r3, [r4, #16]
 8008dae:	6862      	ldr	r2, [r4, #4]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	bfde      	ittt	le
 8008db4:	2330      	movle	r3, #48	; 0x30
 8008db6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008dba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dbe:	ebac 0305 	sub.w	r3, ip, r5
 8008dc2:	6123      	str	r3, [r4, #16]
 8008dc4:	f8cd 8000 	str.w	r8, [sp]
 8008dc8:	463b      	mov	r3, r7
 8008dca:	aa03      	add	r2, sp, #12
 8008dcc:	4621      	mov	r1, r4
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f7ff fef6 	bl	8008bc0 <_printf_common>
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	d14d      	bne.n	8008e74 <_printf_i+0x1c8>
 8008dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ddc:	b005      	add	sp, #20
 8008dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008de2:	4839      	ldr	r0, [pc, #228]	; (8008ec8 <_printf_i+0x21c>)
 8008de4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008de8:	6813      	ldr	r3, [r2, #0]
 8008dea:	6821      	ldr	r1, [r4, #0]
 8008dec:	1d1d      	adds	r5, r3, #4
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6015      	str	r5, [r2, #0]
 8008df2:	060a      	lsls	r2, r1, #24
 8008df4:	d50b      	bpl.n	8008e0e <_printf_i+0x162>
 8008df6:	07ca      	lsls	r2, r1, #31
 8008df8:	bf44      	itt	mi
 8008dfa:	f041 0120 	orrmi.w	r1, r1, #32
 8008dfe:	6021      	strmi	r1, [r4, #0]
 8008e00:	b91b      	cbnz	r3, 8008e0a <_printf_i+0x15e>
 8008e02:	6822      	ldr	r2, [r4, #0]
 8008e04:	f022 0220 	bic.w	r2, r2, #32
 8008e08:	6022      	str	r2, [r4, #0]
 8008e0a:	2210      	movs	r2, #16
 8008e0c:	e7b7      	b.n	8008d7e <_printf_i+0xd2>
 8008e0e:	064d      	lsls	r5, r1, #25
 8008e10:	bf48      	it	mi
 8008e12:	b29b      	uxthmi	r3, r3
 8008e14:	e7ef      	b.n	8008df6 <_printf_i+0x14a>
 8008e16:	4665      	mov	r5, ip
 8008e18:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e1c:	fb02 3311 	mls	r3, r2, r1, r3
 8008e20:	5cc3      	ldrb	r3, [r0, r3]
 8008e22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008e26:	460b      	mov	r3, r1
 8008e28:	2900      	cmp	r1, #0
 8008e2a:	d1f5      	bne.n	8008e18 <_printf_i+0x16c>
 8008e2c:	e7b9      	b.n	8008da2 <_printf_i+0xf6>
 8008e2e:	6813      	ldr	r3, [r2, #0]
 8008e30:	6825      	ldr	r5, [r4, #0]
 8008e32:	6961      	ldr	r1, [r4, #20]
 8008e34:	1d18      	adds	r0, r3, #4
 8008e36:	6010      	str	r0, [r2, #0]
 8008e38:	0628      	lsls	r0, r5, #24
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	d501      	bpl.n	8008e42 <_printf_i+0x196>
 8008e3e:	6019      	str	r1, [r3, #0]
 8008e40:	e002      	b.n	8008e48 <_printf_i+0x19c>
 8008e42:	066a      	lsls	r2, r5, #25
 8008e44:	d5fb      	bpl.n	8008e3e <_printf_i+0x192>
 8008e46:	8019      	strh	r1, [r3, #0]
 8008e48:	2300      	movs	r3, #0
 8008e4a:	6123      	str	r3, [r4, #16]
 8008e4c:	4665      	mov	r5, ip
 8008e4e:	e7b9      	b.n	8008dc4 <_printf_i+0x118>
 8008e50:	6813      	ldr	r3, [r2, #0]
 8008e52:	1d19      	adds	r1, r3, #4
 8008e54:	6011      	str	r1, [r2, #0]
 8008e56:	681d      	ldr	r5, [r3, #0]
 8008e58:	6862      	ldr	r2, [r4, #4]
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	f7f7 f9df 	bl	8000220 <memchr>
 8008e62:	b108      	cbz	r0, 8008e68 <_printf_i+0x1bc>
 8008e64:	1b40      	subs	r0, r0, r5
 8008e66:	6060      	str	r0, [r4, #4]
 8008e68:	6863      	ldr	r3, [r4, #4]
 8008e6a:	6123      	str	r3, [r4, #16]
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e72:	e7a7      	b.n	8008dc4 <_printf_i+0x118>
 8008e74:	6923      	ldr	r3, [r4, #16]
 8008e76:	462a      	mov	r2, r5
 8008e78:	4639      	mov	r1, r7
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	47c0      	blx	r8
 8008e7e:	3001      	adds	r0, #1
 8008e80:	d0aa      	beq.n	8008dd8 <_printf_i+0x12c>
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	079b      	lsls	r3, r3, #30
 8008e86:	d413      	bmi.n	8008eb0 <_printf_i+0x204>
 8008e88:	68e0      	ldr	r0, [r4, #12]
 8008e8a:	9b03      	ldr	r3, [sp, #12]
 8008e8c:	4298      	cmp	r0, r3
 8008e8e:	bfb8      	it	lt
 8008e90:	4618      	movlt	r0, r3
 8008e92:	e7a3      	b.n	8008ddc <_printf_i+0x130>
 8008e94:	2301      	movs	r3, #1
 8008e96:	464a      	mov	r2, r9
 8008e98:	4639      	mov	r1, r7
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	47c0      	blx	r8
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	d09a      	beq.n	8008dd8 <_printf_i+0x12c>
 8008ea2:	3501      	adds	r5, #1
 8008ea4:	68e3      	ldr	r3, [r4, #12]
 8008ea6:	9a03      	ldr	r2, [sp, #12]
 8008ea8:	1a9b      	subs	r3, r3, r2
 8008eaa:	42ab      	cmp	r3, r5
 8008eac:	dcf2      	bgt.n	8008e94 <_printf_i+0x1e8>
 8008eae:	e7eb      	b.n	8008e88 <_printf_i+0x1dc>
 8008eb0:	2500      	movs	r5, #0
 8008eb2:	f104 0919 	add.w	r9, r4, #25
 8008eb6:	e7f5      	b.n	8008ea4 <_printf_i+0x1f8>
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1ac      	bne.n	8008e16 <_printf_i+0x16a>
 8008ebc:	7803      	ldrb	r3, [r0, #0]
 8008ebe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ec2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ec6:	e76c      	b.n	8008da2 <_printf_i+0xf6>
 8008ec8:	0800c0d6 	.word	0x0800c0d6
 8008ecc:	0800c0e7 	.word	0x0800c0e7

08008ed0 <_scanf_float>:
 8008ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	469a      	mov	sl, r3
 8008ed6:	688b      	ldr	r3, [r1, #8]
 8008ed8:	4616      	mov	r6, r2
 8008eda:	1e5a      	subs	r2, r3, #1
 8008edc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008ee0:	b087      	sub	sp, #28
 8008ee2:	bf83      	ittte	hi
 8008ee4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8008ee8:	189b      	addhi	r3, r3, r2
 8008eea:	9301      	strhi	r3, [sp, #4]
 8008eec:	2300      	movls	r3, #0
 8008eee:	bf86      	itte	hi
 8008ef0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008ef4:	608b      	strhi	r3, [r1, #8]
 8008ef6:	9301      	strls	r3, [sp, #4]
 8008ef8:	680b      	ldr	r3, [r1, #0]
 8008efa:	4688      	mov	r8, r1
 8008efc:	f04f 0b00 	mov.w	fp, #0
 8008f00:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008f04:	f848 3b1c 	str.w	r3, [r8], #28
 8008f08:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008f0c:	4607      	mov	r7, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	4645      	mov	r5, r8
 8008f12:	465a      	mov	r2, fp
 8008f14:	46d9      	mov	r9, fp
 8008f16:	f8cd b008 	str.w	fp, [sp, #8]
 8008f1a:	68a1      	ldr	r1, [r4, #8]
 8008f1c:	b181      	cbz	r1, 8008f40 <_scanf_float+0x70>
 8008f1e:	6833      	ldr	r3, [r6, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2b49      	cmp	r3, #73	; 0x49
 8008f24:	d071      	beq.n	800900a <_scanf_float+0x13a>
 8008f26:	d84d      	bhi.n	8008fc4 <_scanf_float+0xf4>
 8008f28:	2b39      	cmp	r3, #57	; 0x39
 8008f2a:	d840      	bhi.n	8008fae <_scanf_float+0xde>
 8008f2c:	2b31      	cmp	r3, #49	; 0x31
 8008f2e:	f080 8088 	bcs.w	8009042 <_scanf_float+0x172>
 8008f32:	2b2d      	cmp	r3, #45	; 0x2d
 8008f34:	f000 8090 	beq.w	8009058 <_scanf_float+0x188>
 8008f38:	d815      	bhi.n	8008f66 <_scanf_float+0x96>
 8008f3a:	2b2b      	cmp	r3, #43	; 0x2b
 8008f3c:	f000 808c 	beq.w	8009058 <_scanf_float+0x188>
 8008f40:	f1b9 0f00 	cmp.w	r9, #0
 8008f44:	d003      	beq.n	8008f4e <_scanf_float+0x7e>
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	3a01      	subs	r2, #1
 8008f50:	2a01      	cmp	r2, #1
 8008f52:	f200 80ea 	bhi.w	800912a <_scanf_float+0x25a>
 8008f56:	4545      	cmp	r5, r8
 8008f58:	f200 80dc 	bhi.w	8009114 <_scanf_float+0x244>
 8008f5c:	2601      	movs	r6, #1
 8008f5e:	4630      	mov	r0, r6
 8008f60:	b007      	add	sp, #28
 8008f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f66:	2b2e      	cmp	r3, #46	; 0x2e
 8008f68:	f000 809f 	beq.w	80090aa <_scanf_float+0x1da>
 8008f6c:	2b30      	cmp	r3, #48	; 0x30
 8008f6e:	d1e7      	bne.n	8008f40 <_scanf_float+0x70>
 8008f70:	6820      	ldr	r0, [r4, #0]
 8008f72:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008f76:	d064      	beq.n	8009042 <_scanf_float+0x172>
 8008f78:	9b01      	ldr	r3, [sp, #4]
 8008f7a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8008f7e:	6020      	str	r0, [r4, #0]
 8008f80:	f109 0901 	add.w	r9, r9, #1
 8008f84:	b11b      	cbz	r3, 8008f8e <_scanf_float+0xbe>
 8008f86:	3b01      	subs	r3, #1
 8008f88:	3101      	adds	r1, #1
 8008f8a:	9301      	str	r3, [sp, #4]
 8008f8c:	60a1      	str	r1, [r4, #8]
 8008f8e:	68a3      	ldr	r3, [r4, #8]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	60a3      	str	r3, [r4, #8]
 8008f94:	6923      	ldr	r3, [r4, #16]
 8008f96:	3301      	adds	r3, #1
 8008f98:	6123      	str	r3, [r4, #16]
 8008f9a:	6873      	ldr	r3, [r6, #4]
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	6073      	str	r3, [r6, #4]
 8008fa2:	f340 80ac 	ble.w	80090fe <_scanf_float+0x22e>
 8008fa6:	6833      	ldr	r3, [r6, #0]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	6033      	str	r3, [r6, #0]
 8008fac:	e7b5      	b.n	8008f1a <_scanf_float+0x4a>
 8008fae:	2b45      	cmp	r3, #69	; 0x45
 8008fb0:	f000 8085 	beq.w	80090be <_scanf_float+0x1ee>
 8008fb4:	2b46      	cmp	r3, #70	; 0x46
 8008fb6:	d06a      	beq.n	800908e <_scanf_float+0x1be>
 8008fb8:	2b41      	cmp	r3, #65	; 0x41
 8008fba:	d1c1      	bne.n	8008f40 <_scanf_float+0x70>
 8008fbc:	2a01      	cmp	r2, #1
 8008fbe:	d1bf      	bne.n	8008f40 <_scanf_float+0x70>
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	e046      	b.n	8009052 <_scanf_float+0x182>
 8008fc4:	2b65      	cmp	r3, #101	; 0x65
 8008fc6:	d07a      	beq.n	80090be <_scanf_float+0x1ee>
 8008fc8:	d818      	bhi.n	8008ffc <_scanf_float+0x12c>
 8008fca:	2b54      	cmp	r3, #84	; 0x54
 8008fcc:	d066      	beq.n	800909c <_scanf_float+0x1cc>
 8008fce:	d811      	bhi.n	8008ff4 <_scanf_float+0x124>
 8008fd0:	2b4e      	cmp	r3, #78	; 0x4e
 8008fd2:	d1b5      	bne.n	8008f40 <_scanf_float+0x70>
 8008fd4:	2a00      	cmp	r2, #0
 8008fd6:	d146      	bne.n	8009066 <_scanf_float+0x196>
 8008fd8:	f1b9 0f00 	cmp.w	r9, #0
 8008fdc:	d145      	bne.n	800906a <_scanf_float+0x19a>
 8008fde:	6821      	ldr	r1, [r4, #0]
 8008fe0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008fe4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008fe8:	d13f      	bne.n	800906a <_scanf_float+0x19a>
 8008fea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008fee:	6021      	str	r1, [r4, #0]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	e02e      	b.n	8009052 <_scanf_float+0x182>
 8008ff4:	2b59      	cmp	r3, #89	; 0x59
 8008ff6:	d01e      	beq.n	8009036 <_scanf_float+0x166>
 8008ff8:	2b61      	cmp	r3, #97	; 0x61
 8008ffa:	e7de      	b.n	8008fba <_scanf_float+0xea>
 8008ffc:	2b6e      	cmp	r3, #110	; 0x6e
 8008ffe:	d0e9      	beq.n	8008fd4 <_scanf_float+0x104>
 8009000:	d815      	bhi.n	800902e <_scanf_float+0x15e>
 8009002:	2b66      	cmp	r3, #102	; 0x66
 8009004:	d043      	beq.n	800908e <_scanf_float+0x1be>
 8009006:	2b69      	cmp	r3, #105	; 0x69
 8009008:	d19a      	bne.n	8008f40 <_scanf_float+0x70>
 800900a:	f1bb 0f00 	cmp.w	fp, #0
 800900e:	d138      	bne.n	8009082 <_scanf_float+0x1b2>
 8009010:	f1b9 0f00 	cmp.w	r9, #0
 8009014:	d197      	bne.n	8008f46 <_scanf_float+0x76>
 8009016:	6821      	ldr	r1, [r4, #0]
 8009018:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800901c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009020:	d195      	bne.n	8008f4e <_scanf_float+0x7e>
 8009022:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009026:	6021      	str	r1, [r4, #0]
 8009028:	f04f 0b01 	mov.w	fp, #1
 800902c:	e011      	b.n	8009052 <_scanf_float+0x182>
 800902e:	2b74      	cmp	r3, #116	; 0x74
 8009030:	d034      	beq.n	800909c <_scanf_float+0x1cc>
 8009032:	2b79      	cmp	r3, #121	; 0x79
 8009034:	d184      	bne.n	8008f40 <_scanf_float+0x70>
 8009036:	f1bb 0f07 	cmp.w	fp, #7
 800903a:	d181      	bne.n	8008f40 <_scanf_float+0x70>
 800903c:	f04f 0b08 	mov.w	fp, #8
 8009040:	e007      	b.n	8009052 <_scanf_float+0x182>
 8009042:	eb12 0f0b 	cmn.w	r2, fp
 8009046:	f47f af7b 	bne.w	8008f40 <_scanf_float+0x70>
 800904a:	6821      	ldr	r1, [r4, #0]
 800904c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8009050:	6021      	str	r1, [r4, #0]
 8009052:	702b      	strb	r3, [r5, #0]
 8009054:	3501      	adds	r5, #1
 8009056:	e79a      	b.n	8008f8e <_scanf_float+0xbe>
 8009058:	6821      	ldr	r1, [r4, #0]
 800905a:	0608      	lsls	r0, r1, #24
 800905c:	f57f af70 	bpl.w	8008f40 <_scanf_float+0x70>
 8009060:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009064:	e7f4      	b.n	8009050 <_scanf_float+0x180>
 8009066:	2a02      	cmp	r2, #2
 8009068:	d047      	beq.n	80090fa <_scanf_float+0x22a>
 800906a:	f1bb 0f01 	cmp.w	fp, #1
 800906e:	d003      	beq.n	8009078 <_scanf_float+0x1a8>
 8009070:	f1bb 0f04 	cmp.w	fp, #4
 8009074:	f47f af64 	bne.w	8008f40 <_scanf_float+0x70>
 8009078:	f10b 0b01 	add.w	fp, fp, #1
 800907c:	fa5f fb8b 	uxtb.w	fp, fp
 8009080:	e7e7      	b.n	8009052 <_scanf_float+0x182>
 8009082:	f1bb 0f03 	cmp.w	fp, #3
 8009086:	d0f7      	beq.n	8009078 <_scanf_float+0x1a8>
 8009088:	f1bb 0f05 	cmp.w	fp, #5
 800908c:	e7f2      	b.n	8009074 <_scanf_float+0x1a4>
 800908e:	f1bb 0f02 	cmp.w	fp, #2
 8009092:	f47f af55 	bne.w	8008f40 <_scanf_float+0x70>
 8009096:	f04f 0b03 	mov.w	fp, #3
 800909a:	e7da      	b.n	8009052 <_scanf_float+0x182>
 800909c:	f1bb 0f06 	cmp.w	fp, #6
 80090a0:	f47f af4e 	bne.w	8008f40 <_scanf_float+0x70>
 80090a4:	f04f 0b07 	mov.w	fp, #7
 80090a8:	e7d3      	b.n	8009052 <_scanf_float+0x182>
 80090aa:	6821      	ldr	r1, [r4, #0]
 80090ac:	0588      	lsls	r0, r1, #22
 80090ae:	f57f af47 	bpl.w	8008f40 <_scanf_float+0x70>
 80090b2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80090b6:	6021      	str	r1, [r4, #0]
 80090b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80090bc:	e7c9      	b.n	8009052 <_scanf_float+0x182>
 80090be:	6821      	ldr	r1, [r4, #0]
 80090c0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80090c4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80090c8:	d006      	beq.n	80090d8 <_scanf_float+0x208>
 80090ca:	0548      	lsls	r0, r1, #21
 80090cc:	f57f af38 	bpl.w	8008f40 <_scanf_float+0x70>
 80090d0:	f1b9 0f00 	cmp.w	r9, #0
 80090d4:	f43f af3b 	beq.w	8008f4e <_scanf_float+0x7e>
 80090d8:	0588      	lsls	r0, r1, #22
 80090da:	bf58      	it	pl
 80090dc:	9802      	ldrpl	r0, [sp, #8]
 80090de:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80090e2:	bf58      	it	pl
 80090e4:	eba9 0000 	subpl.w	r0, r9, r0
 80090e8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80090ec:	bf58      	it	pl
 80090ee:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80090f2:	6021      	str	r1, [r4, #0]
 80090f4:	f04f 0900 	mov.w	r9, #0
 80090f8:	e7ab      	b.n	8009052 <_scanf_float+0x182>
 80090fa:	2203      	movs	r2, #3
 80090fc:	e7a9      	b.n	8009052 <_scanf_float+0x182>
 80090fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009102:	9205      	str	r2, [sp, #20]
 8009104:	4631      	mov	r1, r6
 8009106:	4638      	mov	r0, r7
 8009108:	4798      	blx	r3
 800910a:	9a05      	ldr	r2, [sp, #20]
 800910c:	2800      	cmp	r0, #0
 800910e:	f43f af04 	beq.w	8008f1a <_scanf_float+0x4a>
 8009112:	e715      	b.n	8008f40 <_scanf_float+0x70>
 8009114:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009118:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800911c:	4632      	mov	r2, r6
 800911e:	4638      	mov	r0, r7
 8009120:	4798      	blx	r3
 8009122:	6923      	ldr	r3, [r4, #16]
 8009124:	3b01      	subs	r3, #1
 8009126:	6123      	str	r3, [r4, #16]
 8009128:	e715      	b.n	8008f56 <_scanf_float+0x86>
 800912a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800912e:	2b06      	cmp	r3, #6
 8009130:	d80a      	bhi.n	8009148 <_scanf_float+0x278>
 8009132:	f1bb 0f02 	cmp.w	fp, #2
 8009136:	d968      	bls.n	800920a <_scanf_float+0x33a>
 8009138:	f1ab 0b03 	sub.w	fp, fp, #3
 800913c:	fa5f fb8b 	uxtb.w	fp, fp
 8009140:	eba5 0b0b 	sub.w	fp, r5, fp
 8009144:	455d      	cmp	r5, fp
 8009146:	d14b      	bne.n	80091e0 <_scanf_float+0x310>
 8009148:	6823      	ldr	r3, [r4, #0]
 800914a:	05da      	lsls	r2, r3, #23
 800914c:	d51f      	bpl.n	800918e <_scanf_float+0x2be>
 800914e:	055b      	lsls	r3, r3, #21
 8009150:	d468      	bmi.n	8009224 <_scanf_float+0x354>
 8009152:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009156:	6923      	ldr	r3, [r4, #16]
 8009158:	2965      	cmp	r1, #101	; 0x65
 800915a:	f103 33ff 	add.w	r3, r3, #4294967295
 800915e:	f105 3bff 	add.w	fp, r5, #4294967295
 8009162:	6123      	str	r3, [r4, #16]
 8009164:	d00d      	beq.n	8009182 <_scanf_float+0x2b2>
 8009166:	2945      	cmp	r1, #69	; 0x45
 8009168:	d00b      	beq.n	8009182 <_scanf_float+0x2b2>
 800916a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800916e:	4632      	mov	r2, r6
 8009170:	4638      	mov	r0, r7
 8009172:	4798      	blx	r3
 8009174:	6923      	ldr	r3, [r4, #16]
 8009176:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800917a:	3b01      	subs	r3, #1
 800917c:	f1a5 0b02 	sub.w	fp, r5, #2
 8009180:	6123      	str	r3, [r4, #16]
 8009182:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009186:	4632      	mov	r2, r6
 8009188:	4638      	mov	r0, r7
 800918a:	4798      	blx	r3
 800918c:	465d      	mov	r5, fp
 800918e:	6826      	ldr	r6, [r4, #0]
 8009190:	f016 0610 	ands.w	r6, r6, #16
 8009194:	d17a      	bne.n	800928c <_scanf_float+0x3bc>
 8009196:	702e      	strb	r6, [r5, #0]
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800919e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091a2:	d142      	bne.n	800922a <_scanf_float+0x35a>
 80091a4:	9b02      	ldr	r3, [sp, #8]
 80091a6:	eba9 0303 	sub.w	r3, r9, r3
 80091aa:	425a      	negs	r2, r3
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d149      	bne.n	8009244 <_scanf_float+0x374>
 80091b0:	2200      	movs	r2, #0
 80091b2:	4641      	mov	r1, r8
 80091b4:	4638      	mov	r0, r7
 80091b6:	f000 fea3 	bl	8009f00 <_strtod_r>
 80091ba:	6825      	ldr	r5, [r4, #0]
 80091bc:	f8da 3000 	ldr.w	r3, [sl]
 80091c0:	f015 0f02 	tst.w	r5, #2
 80091c4:	f103 0204 	add.w	r2, r3, #4
 80091c8:	ec59 8b10 	vmov	r8, r9, d0
 80091cc:	f8ca 2000 	str.w	r2, [sl]
 80091d0:	d043      	beq.n	800925a <_scanf_float+0x38a>
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	e9c3 8900 	strd	r8, r9, [r3]
 80091d8:	68e3      	ldr	r3, [r4, #12]
 80091da:	3301      	adds	r3, #1
 80091dc:	60e3      	str	r3, [r4, #12]
 80091de:	e6be      	b.n	8008f5e <_scanf_float+0x8e>
 80091e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80091e8:	4632      	mov	r2, r6
 80091ea:	4638      	mov	r0, r7
 80091ec:	4798      	blx	r3
 80091ee:	6923      	ldr	r3, [r4, #16]
 80091f0:	3b01      	subs	r3, #1
 80091f2:	6123      	str	r3, [r4, #16]
 80091f4:	e7a6      	b.n	8009144 <_scanf_float+0x274>
 80091f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091fa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80091fe:	4632      	mov	r2, r6
 8009200:	4638      	mov	r0, r7
 8009202:	4798      	blx	r3
 8009204:	6923      	ldr	r3, [r4, #16]
 8009206:	3b01      	subs	r3, #1
 8009208:	6123      	str	r3, [r4, #16]
 800920a:	4545      	cmp	r5, r8
 800920c:	d8f3      	bhi.n	80091f6 <_scanf_float+0x326>
 800920e:	e6a5      	b.n	8008f5c <_scanf_float+0x8c>
 8009210:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009214:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009218:	4632      	mov	r2, r6
 800921a:	4638      	mov	r0, r7
 800921c:	4798      	blx	r3
 800921e:	6923      	ldr	r3, [r4, #16]
 8009220:	3b01      	subs	r3, #1
 8009222:	6123      	str	r3, [r4, #16]
 8009224:	4545      	cmp	r5, r8
 8009226:	d8f3      	bhi.n	8009210 <_scanf_float+0x340>
 8009228:	e698      	b.n	8008f5c <_scanf_float+0x8c>
 800922a:	9b03      	ldr	r3, [sp, #12]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d0bf      	beq.n	80091b0 <_scanf_float+0x2e0>
 8009230:	9904      	ldr	r1, [sp, #16]
 8009232:	230a      	movs	r3, #10
 8009234:	4632      	mov	r2, r6
 8009236:	3101      	adds	r1, #1
 8009238:	4638      	mov	r0, r7
 800923a:	f000 feed 	bl	800a018 <_strtol_r>
 800923e:	9b03      	ldr	r3, [sp, #12]
 8009240:	9d04      	ldr	r5, [sp, #16]
 8009242:	1ac2      	subs	r2, r0, r3
 8009244:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009248:	429d      	cmp	r5, r3
 800924a:	bf28      	it	cs
 800924c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8009250:	490f      	ldr	r1, [pc, #60]	; (8009290 <_scanf_float+0x3c0>)
 8009252:	4628      	mov	r0, r5
 8009254:	f000 f824 	bl	80092a0 <siprintf>
 8009258:	e7aa      	b.n	80091b0 <_scanf_float+0x2e0>
 800925a:	f015 0504 	ands.w	r5, r5, #4
 800925e:	d1b8      	bne.n	80091d2 <_scanf_float+0x302>
 8009260:	681f      	ldr	r7, [r3, #0]
 8009262:	ee10 2a10 	vmov	r2, s0
 8009266:	464b      	mov	r3, r9
 8009268:	ee10 0a10 	vmov	r0, s0
 800926c:	4649      	mov	r1, r9
 800926e:	f7f7 fc7d 	bl	8000b6c <__aeabi_dcmpun>
 8009272:	b128      	cbz	r0, 8009280 <_scanf_float+0x3b0>
 8009274:	4628      	mov	r0, r5
 8009276:	f000 f80d 	bl	8009294 <nanf>
 800927a:	ed87 0a00 	vstr	s0, [r7]
 800927e:	e7ab      	b.n	80091d8 <_scanf_float+0x308>
 8009280:	4640      	mov	r0, r8
 8009282:	4649      	mov	r1, r9
 8009284:	f7f7 fcd0 	bl	8000c28 <__aeabi_d2f>
 8009288:	6038      	str	r0, [r7, #0]
 800928a:	e7a5      	b.n	80091d8 <_scanf_float+0x308>
 800928c:	2600      	movs	r6, #0
 800928e:	e666      	b.n	8008f5e <_scanf_float+0x8e>
 8009290:	0800c0f8 	.word	0x0800c0f8

08009294 <nanf>:
 8009294:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800929c <nanf+0x8>
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	7fc00000 	.word	0x7fc00000

080092a0 <siprintf>:
 80092a0:	b40e      	push	{r1, r2, r3}
 80092a2:	b500      	push	{lr}
 80092a4:	b09c      	sub	sp, #112	; 0x70
 80092a6:	ab1d      	add	r3, sp, #116	; 0x74
 80092a8:	9002      	str	r0, [sp, #8]
 80092aa:	9006      	str	r0, [sp, #24]
 80092ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092b0:	4809      	ldr	r0, [pc, #36]	; (80092d8 <siprintf+0x38>)
 80092b2:	9107      	str	r1, [sp, #28]
 80092b4:	9104      	str	r1, [sp, #16]
 80092b6:	4909      	ldr	r1, [pc, #36]	; (80092dc <siprintf+0x3c>)
 80092b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80092bc:	9105      	str	r1, [sp, #20]
 80092be:	6800      	ldr	r0, [r0, #0]
 80092c0:	9301      	str	r3, [sp, #4]
 80092c2:	a902      	add	r1, sp, #8
 80092c4:	f002 fd6e 	bl	800bda4 <_svfiprintf_r>
 80092c8:	9b02      	ldr	r3, [sp, #8]
 80092ca:	2200      	movs	r2, #0
 80092cc:	701a      	strb	r2, [r3, #0]
 80092ce:	b01c      	add	sp, #112	; 0x70
 80092d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092d4:	b003      	add	sp, #12
 80092d6:	4770      	bx	lr
 80092d8:	2000001c 	.word	0x2000001c
 80092dc:	ffff0208 	.word	0xffff0208

080092e0 <sulp>:
 80092e0:	b570      	push	{r4, r5, r6, lr}
 80092e2:	4604      	mov	r4, r0
 80092e4:	460d      	mov	r5, r1
 80092e6:	ec45 4b10 	vmov	d0, r4, r5
 80092ea:	4616      	mov	r6, r2
 80092ec:	f002 fb16 	bl	800b91c <__ulp>
 80092f0:	ec51 0b10 	vmov	r0, r1, d0
 80092f4:	b17e      	cbz	r6, 8009316 <sulp+0x36>
 80092f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80092fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092fe:	2b00      	cmp	r3, #0
 8009300:	dd09      	ble.n	8009316 <sulp+0x36>
 8009302:	051b      	lsls	r3, r3, #20
 8009304:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009308:	2400      	movs	r4, #0
 800930a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800930e:	4622      	mov	r2, r4
 8009310:	462b      	mov	r3, r5
 8009312:	f7f7 f991 	bl	8000638 <__aeabi_dmul>
 8009316:	bd70      	pop	{r4, r5, r6, pc}

08009318 <_strtod_l>:
 8009318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931c:	461f      	mov	r7, r3
 800931e:	b0a1      	sub	sp, #132	; 0x84
 8009320:	2300      	movs	r3, #0
 8009322:	4681      	mov	r9, r0
 8009324:	4638      	mov	r0, r7
 8009326:	460e      	mov	r6, r1
 8009328:	9217      	str	r2, [sp, #92]	; 0x5c
 800932a:	931c      	str	r3, [sp, #112]	; 0x70
 800932c:	f001 fff5 	bl	800b31a <__localeconv_l>
 8009330:	4680      	mov	r8, r0
 8009332:	6800      	ldr	r0, [r0, #0]
 8009334:	f7f6 ff6c 	bl	8000210 <strlen>
 8009338:	f04f 0a00 	mov.w	sl, #0
 800933c:	4604      	mov	r4, r0
 800933e:	f04f 0b00 	mov.w	fp, #0
 8009342:	961b      	str	r6, [sp, #108]	; 0x6c
 8009344:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009346:	781a      	ldrb	r2, [r3, #0]
 8009348:	2a0d      	cmp	r2, #13
 800934a:	d832      	bhi.n	80093b2 <_strtod_l+0x9a>
 800934c:	2a09      	cmp	r2, #9
 800934e:	d236      	bcs.n	80093be <_strtod_l+0xa6>
 8009350:	2a00      	cmp	r2, #0
 8009352:	d03e      	beq.n	80093d2 <_strtod_l+0xba>
 8009354:	2300      	movs	r3, #0
 8009356:	930d      	str	r3, [sp, #52]	; 0x34
 8009358:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800935a:	782b      	ldrb	r3, [r5, #0]
 800935c:	2b30      	cmp	r3, #48	; 0x30
 800935e:	f040 80ac 	bne.w	80094ba <_strtod_l+0x1a2>
 8009362:	786b      	ldrb	r3, [r5, #1]
 8009364:	2b58      	cmp	r3, #88	; 0x58
 8009366:	d001      	beq.n	800936c <_strtod_l+0x54>
 8009368:	2b78      	cmp	r3, #120	; 0x78
 800936a:	d167      	bne.n	800943c <_strtod_l+0x124>
 800936c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800936e:	9301      	str	r3, [sp, #4]
 8009370:	ab1c      	add	r3, sp, #112	; 0x70
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	9702      	str	r7, [sp, #8]
 8009376:	ab1d      	add	r3, sp, #116	; 0x74
 8009378:	4a88      	ldr	r2, [pc, #544]	; (800959c <_strtod_l+0x284>)
 800937a:	a91b      	add	r1, sp, #108	; 0x6c
 800937c:	4648      	mov	r0, r9
 800937e:	f001 fcf2 	bl	800ad66 <__gethex>
 8009382:	f010 0407 	ands.w	r4, r0, #7
 8009386:	4606      	mov	r6, r0
 8009388:	d005      	beq.n	8009396 <_strtod_l+0x7e>
 800938a:	2c06      	cmp	r4, #6
 800938c:	d12b      	bne.n	80093e6 <_strtod_l+0xce>
 800938e:	3501      	adds	r5, #1
 8009390:	2300      	movs	r3, #0
 8009392:	951b      	str	r5, [sp, #108]	; 0x6c
 8009394:	930d      	str	r3, [sp, #52]	; 0x34
 8009396:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009398:	2b00      	cmp	r3, #0
 800939a:	f040 859a 	bne.w	8009ed2 <_strtod_l+0xbba>
 800939e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093a0:	b1e3      	cbz	r3, 80093dc <_strtod_l+0xc4>
 80093a2:	4652      	mov	r2, sl
 80093a4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80093a8:	ec43 2b10 	vmov	d0, r2, r3
 80093ac:	b021      	add	sp, #132	; 0x84
 80093ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b2:	2a2b      	cmp	r2, #43	; 0x2b
 80093b4:	d015      	beq.n	80093e2 <_strtod_l+0xca>
 80093b6:	2a2d      	cmp	r2, #45	; 0x2d
 80093b8:	d004      	beq.n	80093c4 <_strtod_l+0xac>
 80093ba:	2a20      	cmp	r2, #32
 80093bc:	d1ca      	bne.n	8009354 <_strtod_l+0x3c>
 80093be:	3301      	adds	r3, #1
 80093c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80093c2:	e7bf      	b.n	8009344 <_strtod_l+0x2c>
 80093c4:	2201      	movs	r2, #1
 80093c6:	920d      	str	r2, [sp, #52]	; 0x34
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80093cc:	785b      	ldrb	r3, [r3, #1]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1c2      	bne.n	8009358 <_strtod_l+0x40>
 80093d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093d4:	961b      	str	r6, [sp, #108]	; 0x6c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f040 8579 	bne.w	8009ece <_strtod_l+0xbb6>
 80093dc:	4652      	mov	r2, sl
 80093de:	465b      	mov	r3, fp
 80093e0:	e7e2      	b.n	80093a8 <_strtod_l+0x90>
 80093e2:	2200      	movs	r2, #0
 80093e4:	e7ef      	b.n	80093c6 <_strtod_l+0xae>
 80093e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80093e8:	b13a      	cbz	r2, 80093fa <_strtod_l+0xe2>
 80093ea:	2135      	movs	r1, #53	; 0x35
 80093ec:	a81e      	add	r0, sp, #120	; 0x78
 80093ee:	f002 fb8d 	bl	800bb0c <__copybits>
 80093f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80093f4:	4648      	mov	r0, r9
 80093f6:	f001 fffa 	bl	800b3ee <_Bfree>
 80093fa:	3c01      	subs	r4, #1
 80093fc:	2c04      	cmp	r4, #4
 80093fe:	d806      	bhi.n	800940e <_strtod_l+0xf6>
 8009400:	e8df f004 	tbb	[pc, r4]
 8009404:	1714030a 	.word	0x1714030a
 8009408:	0a          	.byte	0x0a
 8009409:	00          	.byte	0x00
 800940a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800940e:	0730      	lsls	r0, r6, #28
 8009410:	d5c1      	bpl.n	8009396 <_strtod_l+0x7e>
 8009412:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009416:	e7be      	b.n	8009396 <_strtod_l+0x7e>
 8009418:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800941c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800941e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009422:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009426:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800942a:	e7f0      	b.n	800940e <_strtod_l+0xf6>
 800942c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80095a0 <_strtod_l+0x288>
 8009430:	e7ed      	b.n	800940e <_strtod_l+0xf6>
 8009432:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009436:	f04f 3aff 	mov.w	sl, #4294967295
 800943a:	e7e8      	b.n	800940e <_strtod_l+0xf6>
 800943c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800943e:	1c5a      	adds	r2, r3, #1
 8009440:	921b      	str	r2, [sp, #108]	; 0x6c
 8009442:	785b      	ldrb	r3, [r3, #1]
 8009444:	2b30      	cmp	r3, #48	; 0x30
 8009446:	d0f9      	beq.n	800943c <_strtod_l+0x124>
 8009448:	2b00      	cmp	r3, #0
 800944a:	d0a4      	beq.n	8009396 <_strtod_l+0x7e>
 800944c:	2301      	movs	r3, #1
 800944e:	2500      	movs	r5, #0
 8009450:	9306      	str	r3, [sp, #24]
 8009452:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009454:	9308      	str	r3, [sp, #32]
 8009456:	9507      	str	r5, [sp, #28]
 8009458:	9505      	str	r5, [sp, #20]
 800945a:	220a      	movs	r2, #10
 800945c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800945e:	7807      	ldrb	r7, [r0, #0]
 8009460:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009464:	b2d9      	uxtb	r1, r3
 8009466:	2909      	cmp	r1, #9
 8009468:	d929      	bls.n	80094be <_strtod_l+0x1a6>
 800946a:	4622      	mov	r2, r4
 800946c:	f8d8 1000 	ldr.w	r1, [r8]
 8009470:	f002 fda0 	bl	800bfb4 <strncmp>
 8009474:	2800      	cmp	r0, #0
 8009476:	d031      	beq.n	80094dc <_strtod_l+0x1c4>
 8009478:	2000      	movs	r0, #0
 800947a:	9c05      	ldr	r4, [sp, #20]
 800947c:	9004      	str	r0, [sp, #16]
 800947e:	463b      	mov	r3, r7
 8009480:	4602      	mov	r2, r0
 8009482:	2b65      	cmp	r3, #101	; 0x65
 8009484:	d001      	beq.n	800948a <_strtod_l+0x172>
 8009486:	2b45      	cmp	r3, #69	; 0x45
 8009488:	d114      	bne.n	80094b4 <_strtod_l+0x19c>
 800948a:	b924      	cbnz	r4, 8009496 <_strtod_l+0x17e>
 800948c:	b910      	cbnz	r0, 8009494 <_strtod_l+0x17c>
 800948e:	9b06      	ldr	r3, [sp, #24]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d09e      	beq.n	80093d2 <_strtod_l+0xba>
 8009494:	2400      	movs	r4, #0
 8009496:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009498:	1c73      	adds	r3, r6, #1
 800949a:	931b      	str	r3, [sp, #108]	; 0x6c
 800949c:	7873      	ldrb	r3, [r6, #1]
 800949e:	2b2b      	cmp	r3, #43	; 0x2b
 80094a0:	d078      	beq.n	8009594 <_strtod_l+0x27c>
 80094a2:	2b2d      	cmp	r3, #45	; 0x2d
 80094a4:	d070      	beq.n	8009588 <_strtod_l+0x270>
 80094a6:	f04f 0c00 	mov.w	ip, #0
 80094aa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80094ae:	2f09      	cmp	r7, #9
 80094b0:	d97c      	bls.n	80095ac <_strtod_l+0x294>
 80094b2:	961b      	str	r6, [sp, #108]	; 0x6c
 80094b4:	f04f 0e00 	mov.w	lr, #0
 80094b8:	e09a      	b.n	80095f0 <_strtod_l+0x2d8>
 80094ba:	2300      	movs	r3, #0
 80094bc:	e7c7      	b.n	800944e <_strtod_l+0x136>
 80094be:	9905      	ldr	r1, [sp, #20]
 80094c0:	2908      	cmp	r1, #8
 80094c2:	bfdd      	ittte	le
 80094c4:	9907      	ldrle	r1, [sp, #28]
 80094c6:	fb02 3301 	mlale	r3, r2, r1, r3
 80094ca:	9307      	strle	r3, [sp, #28]
 80094cc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80094d0:	9b05      	ldr	r3, [sp, #20]
 80094d2:	3001      	adds	r0, #1
 80094d4:	3301      	adds	r3, #1
 80094d6:	9305      	str	r3, [sp, #20]
 80094d8:	901b      	str	r0, [sp, #108]	; 0x6c
 80094da:	e7bf      	b.n	800945c <_strtod_l+0x144>
 80094dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094de:	191a      	adds	r2, r3, r4
 80094e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80094e2:	9a05      	ldr	r2, [sp, #20]
 80094e4:	5d1b      	ldrb	r3, [r3, r4]
 80094e6:	2a00      	cmp	r2, #0
 80094e8:	d037      	beq.n	800955a <_strtod_l+0x242>
 80094ea:	9c05      	ldr	r4, [sp, #20]
 80094ec:	4602      	mov	r2, r0
 80094ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80094f2:	2909      	cmp	r1, #9
 80094f4:	d913      	bls.n	800951e <_strtod_l+0x206>
 80094f6:	2101      	movs	r1, #1
 80094f8:	9104      	str	r1, [sp, #16]
 80094fa:	e7c2      	b.n	8009482 <_strtod_l+0x16a>
 80094fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	921b      	str	r2, [sp, #108]	; 0x6c
 8009502:	785b      	ldrb	r3, [r3, #1]
 8009504:	3001      	adds	r0, #1
 8009506:	2b30      	cmp	r3, #48	; 0x30
 8009508:	d0f8      	beq.n	80094fc <_strtod_l+0x1e4>
 800950a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800950e:	2a08      	cmp	r2, #8
 8009510:	f200 84e4 	bhi.w	8009edc <_strtod_l+0xbc4>
 8009514:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009516:	9208      	str	r2, [sp, #32]
 8009518:	4602      	mov	r2, r0
 800951a:	2000      	movs	r0, #0
 800951c:	4604      	mov	r4, r0
 800951e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009522:	f100 0101 	add.w	r1, r0, #1
 8009526:	d012      	beq.n	800954e <_strtod_l+0x236>
 8009528:	440a      	add	r2, r1
 800952a:	eb00 0c04 	add.w	ip, r0, r4
 800952e:	4621      	mov	r1, r4
 8009530:	270a      	movs	r7, #10
 8009532:	458c      	cmp	ip, r1
 8009534:	d113      	bne.n	800955e <_strtod_l+0x246>
 8009536:	1821      	adds	r1, r4, r0
 8009538:	2908      	cmp	r1, #8
 800953a:	f104 0401 	add.w	r4, r4, #1
 800953e:	4404      	add	r4, r0
 8009540:	dc19      	bgt.n	8009576 <_strtod_l+0x25e>
 8009542:	9b07      	ldr	r3, [sp, #28]
 8009544:	210a      	movs	r1, #10
 8009546:	fb01 e303 	mla	r3, r1, r3, lr
 800954a:	9307      	str	r3, [sp, #28]
 800954c:	2100      	movs	r1, #0
 800954e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009550:	1c58      	adds	r0, r3, #1
 8009552:	901b      	str	r0, [sp, #108]	; 0x6c
 8009554:	785b      	ldrb	r3, [r3, #1]
 8009556:	4608      	mov	r0, r1
 8009558:	e7c9      	b.n	80094ee <_strtod_l+0x1d6>
 800955a:	9805      	ldr	r0, [sp, #20]
 800955c:	e7d3      	b.n	8009506 <_strtod_l+0x1ee>
 800955e:	2908      	cmp	r1, #8
 8009560:	f101 0101 	add.w	r1, r1, #1
 8009564:	dc03      	bgt.n	800956e <_strtod_l+0x256>
 8009566:	9b07      	ldr	r3, [sp, #28]
 8009568:	437b      	muls	r3, r7
 800956a:	9307      	str	r3, [sp, #28]
 800956c:	e7e1      	b.n	8009532 <_strtod_l+0x21a>
 800956e:	2910      	cmp	r1, #16
 8009570:	bfd8      	it	le
 8009572:	437d      	mulle	r5, r7
 8009574:	e7dd      	b.n	8009532 <_strtod_l+0x21a>
 8009576:	2c10      	cmp	r4, #16
 8009578:	bfdc      	itt	le
 800957a:	210a      	movle	r1, #10
 800957c:	fb01 e505 	mlale	r5, r1, r5, lr
 8009580:	e7e4      	b.n	800954c <_strtod_l+0x234>
 8009582:	2301      	movs	r3, #1
 8009584:	9304      	str	r3, [sp, #16]
 8009586:	e781      	b.n	800948c <_strtod_l+0x174>
 8009588:	f04f 0c01 	mov.w	ip, #1
 800958c:	1cb3      	adds	r3, r6, #2
 800958e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009590:	78b3      	ldrb	r3, [r6, #2]
 8009592:	e78a      	b.n	80094aa <_strtod_l+0x192>
 8009594:	f04f 0c00 	mov.w	ip, #0
 8009598:	e7f8      	b.n	800958c <_strtod_l+0x274>
 800959a:	bf00      	nop
 800959c:	0800c100 	.word	0x0800c100
 80095a0:	7ff00000 	.word	0x7ff00000
 80095a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095a6:	1c5f      	adds	r7, r3, #1
 80095a8:	971b      	str	r7, [sp, #108]	; 0x6c
 80095aa:	785b      	ldrb	r3, [r3, #1]
 80095ac:	2b30      	cmp	r3, #48	; 0x30
 80095ae:	d0f9      	beq.n	80095a4 <_strtod_l+0x28c>
 80095b0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80095b4:	2f08      	cmp	r7, #8
 80095b6:	f63f af7d 	bhi.w	80094b4 <_strtod_l+0x19c>
 80095ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80095be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095c0:	930a      	str	r3, [sp, #40]	; 0x28
 80095c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095c4:	1c5f      	adds	r7, r3, #1
 80095c6:	971b      	str	r7, [sp, #108]	; 0x6c
 80095c8:	785b      	ldrb	r3, [r3, #1]
 80095ca:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80095ce:	f1b8 0f09 	cmp.w	r8, #9
 80095d2:	d937      	bls.n	8009644 <_strtod_l+0x32c>
 80095d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80095d6:	1a7f      	subs	r7, r7, r1
 80095d8:	2f08      	cmp	r7, #8
 80095da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80095de:	dc37      	bgt.n	8009650 <_strtod_l+0x338>
 80095e0:	45be      	cmp	lr, r7
 80095e2:	bfa8      	it	ge
 80095e4:	46be      	movge	lr, r7
 80095e6:	f1bc 0f00 	cmp.w	ip, #0
 80095ea:	d001      	beq.n	80095f0 <_strtod_l+0x2d8>
 80095ec:	f1ce 0e00 	rsb	lr, lr, #0
 80095f0:	2c00      	cmp	r4, #0
 80095f2:	d151      	bne.n	8009698 <_strtod_l+0x380>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	f47f aece 	bne.w	8009396 <_strtod_l+0x7e>
 80095fa:	9a06      	ldr	r2, [sp, #24]
 80095fc:	2a00      	cmp	r2, #0
 80095fe:	f47f aeca 	bne.w	8009396 <_strtod_l+0x7e>
 8009602:	9a04      	ldr	r2, [sp, #16]
 8009604:	2a00      	cmp	r2, #0
 8009606:	f47f aee4 	bne.w	80093d2 <_strtod_l+0xba>
 800960a:	2b4e      	cmp	r3, #78	; 0x4e
 800960c:	d027      	beq.n	800965e <_strtod_l+0x346>
 800960e:	dc21      	bgt.n	8009654 <_strtod_l+0x33c>
 8009610:	2b49      	cmp	r3, #73	; 0x49
 8009612:	f47f aede 	bne.w	80093d2 <_strtod_l+0xba>
 8009616:	49a0      	ldr	r1, [pc, #640]	; (8009898 <_strtod_l+0x580>)
 8009618:	a81b      	add	r0, sp, #108	; 0x6c
 800961a:	f001 fdd7 	bl	800b1cc <__match>
 800961e:	2800      	cmp	r0, #0
 8009620:	f43f aed7 	beq.w	80093d2 <_strtod_l+0xba>
 8009624:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009626:	499d      	ldr	r1, [pc, #628]	; (800989c <_strtod_l+0x584>)
 8009628:	3b01      	subs	r3, #1
 800962a:	a81b      	add	r0, sp, #108	; 0x6c
 800962c:	931b      	str	r3, [sp, #108]	; 0x6c
 800962e:	f001 fdcd 	bl	800b1cc <__match>
 8009632:	b910      	cbnz	r0, 800963a <_strtod_l+0x322>
 8009634:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009636:	3301      	adds	r3, #1
 8009638:	931b      	str	r3, [sp, #108]	; 0x6c
 800963a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80098b0 <_strtod_l+0x598>
 800963e:	f04f 0a00 	mov.w	sl, #0
 8009642:	e6a8      	b.n	8009396 <_strtod_l+0x7e>
 8009644:	210a      	movs	r1, #10
 8009646:	fb01 3e0e 	mla	lr, r1, lr, r3
 800964a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800964e:	e7b8      	b.n	80095c2 <_strtod_l+0x2aa>
 8009650:	46be      	mov	lr, r7
 8009652:	e7c8      	b.n	80095e6 <_strtod_l+0x2ce>
 8009654:	2b69      	cmp	r3, #105	; 0x69
 8009656:	d0de      	beq.n	8009616 <_strtod_l+0x2fe>
 8009658:	2b6e      	cmp	r3, #110	; 0x6e
 800965a:	f47f aeba 	bne.w	80093d2 <_strtod_l+0xba>
 800965e:	4990      	ldr	r1, [pc, #576]	; (80098a0 <_strtod_l+0x588>)
 8009660:	a81b      	add	r0, sp, #108	; 0x6c
 8009662:	f001 fdb3 	bl	800b1cc <__match>
 8009666:	2800      	cmp	r0, #0
 8009668:	f43f aeb3 	beq.w	80093d2 <_strtod_l+0xba>
 800966c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	2b28      	cmp	r3, #40	; 0x28
 8009672:	d10e      	bne.n	8009692 <_strtod_l+0x37a>
 8009674:	aa1e      	add	r2, sp, #120	; 0x78
 8009676:	498b      	ldr	r1, [pc, #556]	; (80098a4 <_strtod_l+0x58c>)
 8009678:	a81b      	add	r0, sp, #108	; 0x6c
 800967a:	f001 fdbb 	bl	800b1f4 <__hexnan>
 800967e:	2805      	cmp	r0, #5
 8009680:	d107      	bne.n	8009692 <_strtod_l+0x37a>
 8009682:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009684:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009688:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800968c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009690:	e681      	b.n	8009396 <_strtod_l+0x7e>
 8009692:	f8df b224 	ldr.w	fp, [pc, #548]	; 80098b8 <_strtod_l+0x5a0>
 8009696:	e7d2      	b.n	800963e <_strtod_l+0x326>
 8009698:	ebae 0302 	sub.w	r3, lr, r2
 800969c:	9306      	str	r3, [sp, #24]
 800969e:	9b05      	ldr	r3, [sp, #20]
 80096a0:	9807      	ldr	r0, [sp, #28]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	bf08      	it	eq
 80096a6:	4623      	moveq	r3, r4
 80096a8:	2c10      	cmp	r4, #16
 80096aa:	9305      	str	r3, [sp, #20]
 80096ac:	46a0      	mov	r8, r4
 80096ae:	bfa8      	it	ge
 80096b0:	f04f 0810 	movge.w	r8, #16
 80096b4:	f7f6 ff46 	bl	8000544 <__aeabi_ui2d>
 80096b8:	2c09      	cmp	r4, #9
 80096ba:	4682      	mov	sl, r0
 80096bc:	468b      	mov	fp, r1
 80096be:	dc13      	bgt.n	80096e8 <_strtod_l+0x3d0>
 80096c0:	9b06      	ldr	r3, [sp, #24]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f43f ae67 	beq.w	8009396 <_strtod_l+0x7e>
 80096c8:	9b06      	ldr	r3, [sp, #24]
 80096ca:	dd7a      	ble.n	80097c2 <_strtod_l+0x4aa>
 80096cc:	2b16      	cmp	r3, #22
 80096ce:	dc61      	bgt.n	8009794 <_strtod_l+0x47c>
 80096d0:	4a75      	ldr	r2, [pc, #468]	; (80098a8 <_strtod_l+0x590>)
 80096d2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80096d6:	e9de 0100 	ldrd	r0, r1, [lr]
 80096da:	4652      	mov	r2, sl
 80096dc:	465b      	mov	r3, fp
 80096de:	f7f6 ffab 	bl	8000638 <__aeabi_dmul>
 80096e2:	4682      	mov	sl, r0
 80096e4:	468b      	mov	fp, r1
 80096e6:	e656      	b.n	8009396 <_strtod_l+0x7e>
 80096e8:	4b6f      	ldr	r3, [pc, #444]	; (80098a8 <_strtod_l+0x590>)
 80096ea:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80096ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80096f2:	f7f6 ffa1 	bl	8000638 <__aeabi_dmul>
 80096f6:	4606      	mov	r6, r0
 80096f8:	4628      	mov	r0, r5
 80096fa:	460f      	mov	r7, r1
 80096fc:	f7f6 ff22 	bl	8000544 <__aeabi_ui2d>
 8009700:	4602      	mov	r2, r0
 8009702:	460b      	mov	r3, r1
 8009704:	4630      	mov	r0, r6
 8009706:	4639      	mov	r1, r7
 8009708:	f7f6 fde0 	bl	80002cc <__adddf3>
 800970c:	2c0f      	cmp	r4, #15
 800970e:	4682      	mov	sl, r0
 8009710:	468b      	mov	fp, r1
 8009712:	ddd5      	ble.n	80096c0 <_strtod_l+0x3a8>
 8009714:	9b06      	ldr	r3, [sp, #24]
 8009716:	eba4 0808 	sub.w	r8, r4, r8
 800971a:	4498      	add	r8, r3
 800971c:	f1b8 0f00 	cmp.w	r8, #0
 8009720:	f340 8096 	ble.w	8009850 <_strtod_l+0x538>
 8009724:	f018 030f 	ands.w	r3, r8, #15
 8009728:	d00a      	beq.n	8009740 <_strtod_l+0x428>
 800972a:	495f      	ldr	r1, [pc, #380]	; (80098a8 <_strtod_l+0x590>)
 800972c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009730:	4652      	mov	r2, sl
 8009732:	465b      	mov	r3, fp
 8009734:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009738:	f7f6 ff7e 	bl	8000638 <__aeabi_dmul>
 800973c:	4682      	mov	sl, r0
 800973e:	468b      	mov	fp, r1
 8009740:	f038 080f 	bics.w	r8, r8, #15
 8009744:	d073      	beq.n	800982e <_strtod_l+0x516>
 8009746:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800974a:	dd47      	ble.n	80097dc <_strtod_l+0x4c4>
 800974c:	2400      	movs	r4, #0
 800974e:	46a0      	mov	r8, r4
 8009750:	9407      	str	r4, [sp, #28]
 8009752:	9405      	str	r4, [sp, #20]
 8009754:	2322      	movs	r3, #34	; 0x22
 8009756:	f8df b158 	ldr.w	fp, [pc, #344]	; 80098b0 <_strtod_l+0x598>
 800975a:	f8c9 3000 	str.w	r3, [r9]
 800975e:	f04f 0a00 	mov.w	sl, #0
 8009762:	9b07      	ldr	r3, [sp, #28]
 8009764:	2b00      	cmp	r3, #0
 8009766:	f43f ae16 	beq.w	8009396 <_strtod_l+0x7e>
 800976a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800976c:	4648      	mov	r0, r9
 800976e:	f001 fe3e 	bl	800b3ee <_Bfree>
 8009772:	9905      	ldr	r1, [sp, #20]
 8009774:	4648      	mov	r0, r9
 8009776:	f001 fe3a 	bl	800b3ee <_Bfree>
 800977a:	4641      	mov	r1, r8
 800977c:	4648      	mov	r0, r9
 800977e:	f001 fe36 	bl	800b3ee <_Bfree>
 8009782:	9907      	ldr	r1, [sp, #28]
 8009784:	4648      	mov	r0, r9
 8009786:	f001 fe32 	bl	800b3ee <_Bfree>
 800978a:	4621      	mov	r1, r4
 800978c:	4648      	mov	r0, r9
 800978e:	f001 fe2e 	bl	800b3ee <_Bfree>
 8009792:	e600      	b.n	8009396 <_strtod_l+0x7e>
 8009794:	9a06      	ldr	r2, [sp, #24]
 8009796:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800979a:	4293      	cmp	r3, r2
 800979c:	dbba      	blt.n	8009714 <_strtod_l+0x3fc>
 800979e:	4d42      	ldr	r5, [pc, #264]	; (80098a8 <_strtod_l+0x590>)
 80097a0:	f1c4 040f 	rsb	r4, r4, #15
 80097a4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80097a8:	4652      	mov	r2, sl
 80097aa:	465b      	mov	r3, fp
 80097ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097b0:	f7f6 ff42 	bl	8000638 <__aeabi_dmul>
 80097b4:	9b06      	ldr	r3, [sp, #24]
 80097b6:	1b1c      	subs	r4, r3, r4
 80097b8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80097bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097c0:	e78d      	b.n	80096de <_strtod_l+0x3c6>
 80097c2:	f113 0f16 	cmn.w	r3, #22
 80097c6:	dba5      	blt.n	8009714 <_strtod_l+0x3fc>
 80097c8:	4a37      	ldr	r2, [pc, #220]	; (80098a8 <_strtod_l+0x590>)
 80097ca:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80097ce:	e9d2 2300 	ldrd	r2, r3, [r2]
 80097d2:	4650      	mov	r0, sl
 80097d4:	4659      	mov	r1, fp
 80097d6:	f7f7 f859 	bl	800088c <__aeabi_ddiv>
 80097da:	e782      	b.n	80096e2 <_strtod_l+0x3ca>
 80097dc:	2300      	movs	r3, #0
 80097de:	4e33      	ldr	r6, [pc, #204]	; (80098ac <_strtod_l+0x594>)
 80097e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80097e4:	4650      	mov	r0, sl
 80097e6:	4659      	mov	r1, fp
 80097e8:	461d      	mov	r5, r3
 80097ea:	f1b8 0f01 	cmp.w	r8, #1
 80097ee:	dc21      	bgt.n	8009834 <_strtod_l+0x51c>
 80097f0:	b10b      	cbz	r3, 80097f6 <_strtod_l+0x4de>
 80097f2:	4682      	mov	sl, r0
 80097f4:	468b      	mov	fp, r1
 80097f6:	4b2d      	ldr	r3, [pc, #180]	; (80098ac <_strtod_l+0x594>)
 80097f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80097fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009800:	4652      	mov	r2, sl
 8009802:	465b      	mov	r3, fp
 8009804:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009808:	f7f6 ff16 	bl	8000638 <__aeabi_dmul>
 800980c:	4b28      	ldr	r3, [pc, #160]	; (80098b0 <_strtod_l+0x598>)
 800980e:	460a      	mov	r2, r1
 8009810:	400b      	ands	r3, r1
 8009812:	4928      	ldr	r1, [pc, #160]	; (80098b4 <_strtod_l+0x59c>)
 8009814:	428b      	cmp	r3, r1
 8009816:	4682      	mov	sl, r0
 8009818:	d898      	bhi.n	800974c <_strtod_l+0x434>
 800981a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800981e:	428b      	cmp	r3, r1
 8009820:	bf86      	itte	hi
 8009822:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80098bc <_strtod_l+0x5a4>
 8009826:	f04f 3aff 	movhi.w	sl, #4294967295
 800982a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800982e:	2300      	movs	r3, #0
 8009830:	9304      	str	r3, [sp, #16]
 8009832:	e077      	b.n	8009924 <_strtod_l+0x60c>
 8009834:	f018 0f01 	tst.w	r8, #1
 8009838:	d006      	beq.n	8009848 <_strtod_l+0x530>
 800983a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800983e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009842:	f7f6 fef9 	bl	8000638 <__aeabi_dmul>
 8009846:	2301      	movs	r3, #1
 8009848:	3501      	adds	r5, #1
 800984a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800984e:	e7cc      	b.n	80097ea <_strtod_l+0x4d2>
 8009850:	d0ed      	beq.n	800982e <_strtod_l+0x516>
 8009852:	f1c8 0800 	rsb	r8, r8, #0
 8009856:	f018 020f 	ands.w	r2, r8, #15
 800985a:	d00a      	beq.n	8009872 <_strtod_l+0x55a>
 800985c:	4b12      	ldr	r3, [pc, #72]	; (80098a8 <_strtod_l+0x590>)
 800985e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009862:	4650      	mov	r0, sl
 8009864:	4659      	mov	r1, fp
 8009866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986a:	f7f7 f80f 	bl	800088c <__aeabi_ddiv>
 800986e:	4682      	mov	sl, r0
 8009870:	468b      	mov	fp, r1
 8009872:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009876:	d0da      	beq.n	800982e <_strtod_l+0x516>
 8009878:	f1b8 0f1f 	cmp.w	r8, #31
 800987c:	dd20      	ble.n	80098c0 <_strtod_l+0x5a8>
 800987e:	2400      	movs	r4, #0
 8009880:	46a0      	mov	r8, r4
 8009882:	9407      	str	r4, [sp, #28]
 8009884:	9405      	str	r4, [sp, #20]
 8009886:	2322      	movs	r3, #34	; 0x22
 8009888:	f04f 0a00 	mov.w	sl, #0
 800988c:	f04f 0b00 	mov.w	fp, #0
 8009890:	f8c9 3000 	str.w	r3, [r9]
 8009894:	e765      	b.n	8009762 <_strtod_l+0x44a>
 8009896:	bf00      	nop
 8009898:	0800c0c9 	.word	0x0800c0c9
 800989c:	0800c153 	.word	0x0800c153
 80098a0:	0800c0d1 	.word	0x0800c0d1
 80098a4:	0800c114 	.word	0x0800c114
 80098a8:	0800c190 	.word	0x0800c190
 80098ac:	0800c168 	.word	0x0800c168
 80098b0:	7ff00000 	.word	0x7ff00000
 80098b4:	7ca00000 	.word	0x7ca00000
 80098b8:	fff80000 	.word	0xfff80000
 80098bc:	7fefffff 	.word	0x7fefffff
 80098c0:	f018 0310 	ands.w	r3, r8, #16
 80098c4:	bf18      	it	ne
 80098c6:	236a      	movne	r3, #106	; 0x6a
 80098c8:	4da0      	ldr	r5, [pc, #640]	; (8009b4c <_strtod_l+0x834>)
 80098ca:	9304      	str	r3, [sp, #16]
 80098cc:	4650      	mov	r0, sl
 80098ce:	4659      	mov	r1, fp
 80098d0:	2300      	movs	r3, #0
 80098d2:	f1b8 0f00 	cmp.w	r8, #0
 80098d6:	f300 810a 	bgt.w	8009aee <_strtod_l+0x7d6>
 80098da:	b10b      	cbz	r3, 80098e0 <_strtod_l+0x5c8>
 80098dc:	4682      	mov	sl, r0
 80098de:	468b      	mov	fp, r1
 80098e0:	9b04      	ldr	r3, [sp, #16]
 80098e2:	b1bb      	cbz	r3, 8009914 <_strtod_l+0x5fc>
 80098e4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80098e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	4659      	mov	r1, fp
 80098f0:	dd10      	ble.n	8009914 <_strtod_l+0x5fc>
 80098f2:	2b1f      	cmp	r3, #31
 80098f4:	f340 8107 	ble.w	8009b06 <_strtod_l+0x7ee>
 80098f8:	2b34      	cmp	r3, #52	; 0x34
 80098fa:	bfde      	ittt	le
 80098fc:	3b20      	suble	r3, #32
 80098fe:	f04f 32ff 	movle.w	r2, #4294967295
 8009902:	fa02 f303 	lslle.w	r3, r2, r3
 8009906:	f04f 0a00 	mov.w	sl, #0
 800990a:	bfcc      	ite	gt
 800990c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009910:	ea03 0b01 	andle.w	fp, r3, r1
 8009914:	2200      	movs	r2, #0
 8009916:	2300      	movs	r3, #0
 8009918:	4650      	mov	r0, sl
 800991a:	4659      	mov	r1, fp
 800991c:	f7f7 f8f4 	bl	8000b08 <__aeabi_dcmpeq>
 8009920:	2800      	cmp	r0, #0
 8009922:	d1ac      	bne.n	800987e <_strtod_l+0x566>
 8009924:	9b07      	ldr	r3, [sp, #28]
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	9a05      	ldr	r2, [sp, #20]
 800992a:	9908      	ldr	r1, [sp, #32]
 800992c:	4623      	mov	r3, r4
 800992e:	4648      	mov	r0, r9
 8009930:	f001 fdaf 	bl	800b492 <__s2b>
 8009934:	9007      	str	r0, [sp, #28]
 8009936:	2800      	cmp	r0, #0
 8009938:	f43f af08 	beq.w	800974c <_strtod_l+0x434>
 800993c:	9a06      	ldr	r2, [sp, #24]
 800993e:	9b06      	ldr	r3, [sp, #24]
 8009940:	2a00      	cmp	r2, #0
 8009942:	f1c3 0300 	rsb	r3, r3, #0
 8009946:	bfa8      	it	ge
 8009948:	2300      	movge	r3, #0
 800994a:	930e      	str	r3, [sp, #56]	; 0x38
 800994c:	2400      	movs	r4, #0
 800994e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009952:	9316      	str	r3, [sp, #88]	; 0x58
 8009954:	46a0      	mov	r8, r4
 8009956:	9b07      	ldr	r3, [sp, #28]
 8009958:	4648      	mov	r0, r9
 800995a:	6859      	ldr	r1, [r3, #4]
 800995c:	f001 fd13 	bl	800b386 <_Balloc>
 8009960:	9005      	str	r0, [sp, #20]
 8009962:	2800      	cmp	r0, #0
 8009964:	f43f aef6 	beq.w	8009754 <_strtod_l+0x43c>
 8009968:	9b07      	ldr	r3, [sp, #28]
 800996a:	691a      	ldr	r2, [r3, #16]
 800996c:	3202      	adds	r2, #2
 800996e:	f103 010c 	add.w	r1, r3, #12
 8009972:	0092      	lsls	r2, r2, #2
 8009974:	300c      	adds	r0, #12
 8009976:	f001 fcfb 	bl	800b370 <memcpy>
 800997a:	aa1e      	add	r2, sp, #120	; 0x78
 800997c:	a91d      	add	r1, sp, #116	; 0x74
 800997e:	ec4b ab10 	vmov	d0, sl, fp
 8009982:	4648      	mov	r0, r9
 8009984:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009988:	f002 f83e 	bl	800ba08 <__d2b>
 800998c:	901c      	str	r0, [sp, #112]	; 0x70
 800998e:	2800      	cmp	r0, #0
 8009990:	f43f aee0 	beq.w	8009754 <_strtod_l+0x43c>
 8009994:	2101      	movs	r1, #1
 8009996:	4648      	mov	r0, r9
 8009998:	f001 fe07 	bl	800b5aa <__i2b>
 800999c:	4680      	mov	r8, r0
 800999e:	2800      	cmp	r0, #0
 80099a0:	f43f aed8 	beq.w	8009754 <_strtod_l+0x43c>
 80099a4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80099a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80099a8:	2e00      	cmp	r6, #0
 80099aa:	bfab      	itete	ge
 80099ac:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80099ae:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80099b0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80099b2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80099b4:	bfac      	ite	ge
 80099b6:	18f7      	addge	r7, r6, r3
 80099b8:	1b9d      	sublt	r5, r3, r6
 80099ba:	9b04      	ldr	r3, [sp, #16]
 80099bc:	1af6      	subs	r6, r6, r3
 80099be:	4416      	add	r6, r2
 80099c0:	4b63      	ldr	r3, [pc, #396]	; (8009b50 <_strtod_l+0x838>)
 80099c2:	3e01      	subs	r6, #1
 80099c4:	429e      	cmp	r6, r3
 80099c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80099ca:	f280 80af 	bge.w	8009b2c <_strtod_l+0x814>
 80099ce:	1b9b      	subs	r3, r3, r6
 80099d0:	2b1f      	cmp	r3, #31
 80099d2:	eba2 0203 	sub.w	r2, r2, r3
 80099d6:	f04f 0101 	mov.w	r1, #1
 80099da:	f300 809b 	bgt.w	8009b14 <_strtod_l+0x7fc>
 80099de:	fa01 f303 	lsl.w	r3, r1, r3
 80099e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80099e4:	2300      	movs	r3, #0
 80099e6:	930a      	str	r3, [sp, #40]	; 0x28
 80099e8:	18be      	adds	r6, r7, r2
 80099ea:	9b04      	ldr	r3, [sp, #16]
 80099ec:	42b7      	cmp	r7, r6
 80099ee:	4415      	add	r5, r2
 80099f0:	441d      	add	r5, r3
 80099f2:	463b      	mov	r3, r7
 80099f4:	bfa8      	it	ge
 80099f6:	4633      	movge	r3, r6
 80099f8:	42ab      	cmp	r3, r5
 80099fa:	bfa8      	it	ge
 80099fc:	462b      	movge	r3, r5
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	bfc2      	ittt	gt
 8009a02:	1af6      	subgt	r6, r6, r3
 8009a04:	1aed      	subgt	r5, r5, r3
 8009a06:	1aff      	subgt	r7, r7, r3
 8009a08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a0a:	b1bb      	cbz	r3, 8009a3c <_strtod_l+0x724>
 8009a0c:	4641      	mov	r1, r8
 8009a0e:	461a      	mov	r2, r3
 8009a10:	4648      	mov	r0, r9
 8009a12:	f001 fe69 	bl	800b6e8 <__pow5mult>
 8009a16:	4680      	mov	r8, r0
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	f43f ae9b 	beq.w	8009754 <_strtod_l+0x43c>
 8009a1e:	4601      	mov	r1, r0
 8009a20:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009a22:	4648      	mov	r0, r9
 8009a24:	f001 fdca 	bl	800b5bc <__multiply>
 8009a28:	900c      	str	r0, [sp, #48]	; 0x30
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	f43f ae92 	beq.w	8009754 <_strtod_l+0x43c>
 8009a30:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009a32:	4648      	mov	r0, r9
 8009a34:	f001 fcdb 	bl	800b3ee <_Bfree>
 8009a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a3a:	931c      	str	r3, [sp, #112]	; 0x70
 8009a3c:	2e00      	cmp	r6, #0
 8009a3e:	dc7a      	bgt.n	8009b36 <_strtod_l+0x81e>
 8009a40:	9b06      	ldr	r3, [sp, #24]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	dd08      	ble.n	8009a58 <_strtod_l+0x740>
 8009a46:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009a48:	9905      	ldr	r1, [sp, #20]
 8009a4a:	4648      	mov	r0, r9
 8009a4c:	f001 fe4c 	bl	800b6e8 <__pow5mult>
 8009a50:	9005      	str	r0, [sp, #20]
 8009a52:	2800      	cmp	r0, #0
 8009a54:	f43f ae7e 	beq.w	8009754 <_strtod_l+0x43c>
 8009a58:	2d00      	cmp	r5, #0
 8009a5a:	dd08      	ble.n	8009a6e <_strtod_l+0x756>
 8009a5c:	462a      	mov	r2, r5
 8009a5e:	9905      	ldr	r1, [sp, #20]
 8009a60:	4648      	mov	r0, r9
 8009a62:	f001 fe8f 	bl	800b784 <__lshift>
 8009a66:	9005      	str	r0, [sp, #20]
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	f43f ae73 	beq.w	8009754 <_strtod_l+0x43c>
 8009a6e:	2f00      	cmp	r7, #0
 8009a70:	dd08      	ble.n	8009a84 <_strtod_l+0x76c>
 8009a72:	4641      	mov	r1, r8
 8009a74:	463a      	mov	r2, r7
 8009a76:	4648      	mov	r0, r9
 8009a78:	f001 fe84 	bl	800b784 <__lshift>
 8009a7c:	4680      	mov	r8, r0
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	f43f ae68 	beq.w	8009754 <_strtod_l+0x43c>
 8009a84:	9a05      	ldr	r2, [sp, #20]
 8009a86:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009a88:	4648      	mov	r0, r9
 8009a8a:	f001 fee9 	bl	800b860 <__mdiff>
 8009a8e:	4604      	mov	r4, r0
 8009a90:	2800      	cmp	r0, #0
 8009a92:	f43f ae5f 	beq.w	8009754 <_strtod_l+0x43c>
 8009a96:	68c3      	ldr	r3, [r0, #12]
 8009a98:	930c      	str	r3, [sp, #48]	; 0x30
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	60c3      	str	r3, [r0, #12]
 8009a9e:	4641      	mov	r1, r8
 8009aa0:	f001 fec4 	bl	800b82c <__mcmp>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	da55      	bge.n	8009b54 <_strtod_l+0x83c>
 8009aa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009aaa:	b9e3      	cbnz	r3, 8009ae6 <_strtod_l+0x7ce>
 8009aac:	f1ba 0f00 	cmp.w	sl, #0
 8009ab0:	d119      	bne.n	8009ae6 <_strtod_l+0x7ce>
 8009ab2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ab6:	b9b3      	cbnz	r3, 8009ae6 <_strtod_l+0x7ce>
 8009ab8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009abc:	0d1b      	lsrs	r3, r3, #20
 8009abe:	051b      	lsls	r3, r3, #20
 8009ac0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009ac4:	d90f      	bls.n	8009ae6 <_strtod_l+0x7ce>
 8009ac6:	6963      	ldr	r3, [r4, #20]
 8009ac8:	b913      	cbnz	r3, 8009ad0 <_strtod_l+0x7b8>
 8009aca:	6923      	ldr	r3, [r4, #16]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	dd0a      	ble.n	8009ae6 <_strtod_l+0x7ce>
 8009ad0:	4621      	mov	r1, r4
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	4648      	mov	r0, r9
 8009ad6:	f001 fe55 	bl	800b784 <__lshift>
 8009ada:	4641      	mov	r1, r8
 8009adc:	4604      	mov	r4, r0
 8009ade:	f001 fea5 	bl	800b82c <__mcmp>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	dc67      	bgt.n	8009bb6 <_strtod_l+0x89e>
 8009ae6:	9b04      	ldr	r3, [sp, #16]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d171      	bne.n	8009bd0 <_strtod_l+0x8b8>
 8009aec:	e63d      	b.n	800976a <_strtod_l+0x452>
 8009aee:	f018 0f01 	tst.w	r8, #1
 8009af2:	d004      	beq.n	8009afe <_strtod_l+0x7e6>
 8009af4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009af8:	f7f6 fd9e 	bl	8000638 <__aeabi_dmul>
 8009afc:	2301      	movs	r3, #1
 8009afe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009b02:	3508      	adds	r5, #8
 8009b04:	e6e5      	b.n	80098d2 <_strtod_l+0x5ba>
 8009b06:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b0e:	ea03 0a0a 	and.w	sl, r3, sl
 8009b12:	e6ff      	b.n	8009914 <_strtod_l+0x5fc>
 8009b14:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009b18:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009b1c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009b20:	36e2      	adds	r6, #226	; 0xe2
 8009b22:	fa01 f306 	lsl.w	r3, r1, r6
 8009b26:	930a      	str	r3, [sp, #40]	; 0x28
 8009b28:	910f      	str	r1, [sp, #60]	; 0x3c
 8009b2a:	e75d      	b.n	80099e8 <_strtod_l+0x6d0>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b30:	2301      	movs	r3, #1
 8009b32:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b34:	e758      	b.n	80099e8 <_strtod_l+0x6d0>
 8009b36:	4632      	mov	r2, r6
 8009b38:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009b3a:	4648      	mov	r0, r9
 8009b3c:	f001 fe22 	bl	800b784 <__lshift>
 8009b40:	901c      	str	r0, [sp, #112]	; 0x70
 8009b42:	2800      	cmp	r0, #0
 8009b44:	f47f af7c 	bne.w	8009a40 <_strtod_l+0x728>
 8009b48:	e604      	b.n	8009754 <_strtod_l+0x43c>
 8009b4a:	bf00      	nop
 8009b4c:	0800c128 	.word	0x0800c128
 8009b50:	fffffc02 	.word	0xfffffc02
 8009b54:	465d      	mov	r5, fp
 8009b56:	f040 8086 	bne.w	8009c66 <_strtod_l+0x94e>
 8009b5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b60:	b32a      	cbz	r2, 8009bae <_strtod_l+0x896>
 8009b62:	4aaf      	ldr	r2, [pc, #700]	; (8009e20 <_strtod_l+0xb08>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d153      	bne.n	8009c10 <_strtod_l+0x8f8>
 8009b68:	9b04      	ldr	r3, [sp, #16]
 8009b6a:	4650      	mov	r0, sl
 8009b6c:	b1d3      	cbz	r3, 8009ba4 <_strtod_l+0x88c>
 8009b6e:	4aad      	ldr	r2, [pc, #692]	; (8009e24 <_strtod_l+0xb0c>)
 8009b70:	402a      	ands	r2, r5
 8009b72:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009b76:	f04f 31ff 	mov.w	r1, #4294967295
 8009b7a:	d816      	bhi.n	8009baa <_strtod_l+0x892>
 8009b7c:	0d12      	lsrs	r2, r2, #20
 8009b7e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009b82:	fa01 f303 	lsl.w	r3, r1, r3
 8009b86:	4298      	cmp	r0, r3
 8009b88:	d142      	bne.n	8009c10 <_strtod_l+0x8f8>
 8009b8a:	4ba7      	ldr	r3, [pc, #668]	; (8009e28 <_strtod_l+0xb10>)
 8009b8c:	429d      	cmp	r5, r3
 8009b8e:	d102      	bne.n	8009b96 <_strtod_l+0x87e>
 8009b90:	3001      	adds	r0, #1
 8009b92:	f43f addf 	beq.w	8009754 <_strtod_l+0x43c>
 8009b96:	4ba3      	ldr	r3, [pc, #652]	; (8009e24 <_strtod_l+0xb0c>)
 8009b98:	402b      	ands	r3, r5
 8009b9a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009b9e:	f04f 0a00 	mov.w	sl, #0
 8009ba2:	e7a0      	b.n	8009ae6 <_strtod_l+0x7ce>
 8009ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba8:	e7ed      	b.n	8009b86 <_strtod_l+0x86e>
 8009baa:	460b      	mov	r3, r1
 8009bac:	e7eb      	b.n	8009b86 <_strtod_l+0x86e>
 8009bae:	bb7b      	cbnz	r3, 8009c10 <_strtod_l+0x8f8>
 8009bb0:	f1ba 0f00 	cmp.w	sl, #0
 8009bb4:	d12c      	bne.n	8009c10 <_strtod_l+0x8f8>
 8009bb6:	9904      	ldr	r1, [sp, #16]
 8009bb8:	4a9a      	ldr	r2, [pc, #616]	; (8009e24 <_strtod_l+0xb0c>)
 8009bba:	465b      	mov	r3, fp
 8009bbc:	b1f1      	cbz	r1, 8009bfc <_strtod_l+0x8e4>
 8009bbe:	ea02 010b 	and.w	r1, r2, fp
 8009bc2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009bc6:	dc19      	bgt.n	8009bfc <_strtod_l+0x8e4>
 8009bc8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009bcc:	f77f ae5b 	ble.w	8009886 <_strtod_l+0x56e>
 8009bd0:	4a96      	ldr	r2, [pc, #600]	; (8009e2c <_strtod_l+0xb14>)
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009bd8:	4650      	mov	r0, sl
 8009bda:	4659      	mov	r1, fp
 8009bdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009be0:	f7f6 fd2a 	bl	8000638 <__aeabi_dmul>
 8009be4:	4682      	mov	sl, r0
 8009be6:	468b      	mov	fp, r1
 8009be8:	2900      	cmp	r1, #0
 8009bea:	f47f adbe 	bne.w	800976a <_strtod_l+0x452>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	f47f adbb 	bne.w	800976a <_strtod_l+0x452>
 8009bf4:	2322      	movs	r3, #34	; 0x22
 8009bf6:	f8c9 3000 	str.w	r3, [r9]
 8009bfa:	e5b6      	b.n	800976a <_strtod_l+0x452>
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009c02:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009c06:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009c0a:	f04f 3aff 	mov.w	sl, #4294967295
 8009c0e:	e76a      	b.n	8009ae6 <_strtod_l+0x7ce>
 8009c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c12:	b193      	cbz	r3, 8009c3a <_strtod_l+0x922>
 8009c14:	422b      	tst	r3, r5
 8009c16:	f43f af66 	beq.w	8009ae6 <_strtod_l+0x7ce>
 8009c1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c1c:	9a04      	ldr	r2, [sp, #16]
 8009c1e:	4650      	mov	r0, sl
 8009c20:	4659      	mov	r1, fp
 8009c22:	b173      	cbz	r3, 8009c42 <_strtod_l+0x92a>
 8009c24:	f7ff fb5c 	bl	80092e0 <sulp>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c30:	f7f6 fb4c 	bl	80002cc <__adddf3>
 8009c34:	4682      	mov	sl, r0
 8009c36:	468b      	mov	fp, r1
 8009c38:	e755      	b.n	8009ae6 <_strtod_l+0x7ce>
 8009c3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c3c:	ea13 0f0a 	tst.w	r3, sl
 8009c40:	e7e9      	b.n	8009c16 <_strtod_l+0x8fe>
 8009c42:	f7ff fb4d 	bl	80092e0 <sulp>
 8009c46:	4602      	mov	r2, r0
 8009c48:	460b      	mov	r3, r1
 8009c4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c4e:	f7f6 fb3b 	bl	80002c8 <__aeabi_dsub>
 8009c52:	2200      	movs	r2, #0
 8009c54:	2300      	movs	r3, #0
 8009c56:	4682      	mov	sl, r0
 8009c58:	468b      	mov	fp, r1
 8009c5a:	f7f6 ff55 	bl	8000b08 <__aeabi_dcmpeq>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	f47f ae11 	bne.w	8009886 <_strtod_l+0x56e>
 8009c64:	e73f      	b.n	8009ae6 <_strtod_l+0x7ce>
 8009c66:	4641      	mov	r1, r8
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f001 ff1c 	bl	800baa6 <__ratio>
 8009c6e:	ec57 6b10 	vmov	r6, r7, d0
 8009c72:	2200      	movs	r2, #0
 8009c74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c78:	ee10 0a10 	vmov	r0, s0
 8009c7c:	4639      	mov	r1, r7
 8009c7e:	f7f6 ff57 	bl	8000b30 <__aeabi_dcmple>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d077      	beq.n	8009d76 <_strtod_l+0xa5e>
 8009c86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d04a      	beq.n	8009d22 <_strtod_l+0xa0a>
 8009c8c:	4b68      	ldr	r3, [pc, #416]	; (8009e30 <_strtod_l+0xb18>)
 8009c8e:	2200      	movs	r2, #0
 8009c90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009c94:	4f66      	ldr	r7, [pc, #408]	; (8009e30 <_strtod_l+0xb18>)
 8009c96:	2600      	movs	r6, #0
 8009c98:	4b62      	ldr	r3, [pc, #392]	; (8009e24 <_strtod_l+0xb0c>)
 8009c9a:	402b      	ands	r3, r5
 8009c9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ca0:	4b64      	ldr	r3, [pc, #400]	; (8009e34 <_strtod_l+0xb1c>)
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	f040 80ce 	bne.w	8009e44 <_strtod_l+0xb2c>
 8009ca8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009cac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009cb0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009cb4:	ec4b ab10 	vmov	d0, sl, fp
 8009cb8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009cbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009cc0:	f001 fe2c 	bl	800b91c <__ulp>
 8009cc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009cc8:	ec53 2b10 	vmov	r2, r3, d0
 8009ccc:	f7f6 fcb4 	bl	8000638 <__aeabi_dmul>
 8009cd0:	4652      	mov	r2, sl
 8009cd2:	465b      	mov	r3, fp
 8009cd4:	f7f6 fafa 	bl	80002cc <__adddf3>
 8009cd8:	460b      	mov	r3, r1
 8009cda:	4952      	ldr	r1, [pc, #328]	; (8009e24 <_strtod_l+0xb0c>)
 8009cdc:	4a56      	ldr	r2, [pc, #344]	; (8009e38 <_strtod_l+0xb20>)
 8009cde:	4019      	ands	r1, r3
 8009ce0:	4291      	cmp	r1, r2
 8009ce2:	4682      	mov	sl, r0
 8009ce4:	d95b      	bls.n	8009d9e <_strtod_l+0xa86>
 8009ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d103      	bne.n	8009cf8 <_strtod_l+0x9e0>
 8009cf0:	9b08      	ldr	r3, [sp, #32]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	f43f ad2e 	beq.w	8009754 <_strtod_l+0x43c>
 8009cf8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009e28 <_strtod_l+0xb10>
 8009cfc:	f04f 3aff 	mov.w	sl, #4294967295
 8009d00:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009d02:	4648      	mov	r0, r9
 8009d04:	f001 fb73 	bl	800b3ee <_Bfree>
 8009d08:	9905      	ldr	r1, [sp, #20]
 8009d0a:	4648      	mov	r0, r9
 8009d0c:	f001 fb6f 	bl	800b3ee <_Bfree>
 8009d10:	4641      	mov	r1, r8
 8009d12:	4648      	mov	r0, r9
 8009d14:	f001 fb6b 	bl	800b3ee <_Bfree>
 8009d18:	4621      	mov	r1, r4
 8009d1a:	4648      	mov	r0, r9
 8009d1c:	f001 fb67 	bl	800b3ee <_Bfree>
 8009d20:	e619      	b.n	8009956 <_strtod_l+0x63e>
 8009d22:	f1ba 0f00 	cmp.w	sl, #0
 8009d26:	d11a      	bne.n	8009d5e <_strtod_l+0xa46>
 8009d28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d2c:	b9eb      	cbnz	r3, 8009d6a <_strtod_l+0xa52>
 8009d2e:	2200      	movs	r2, #0
 8009d30:	4b3f      	ldr	r3, [pc, #252]	; (8009e30 <_strtod_l+0xb18>)
 8009d32:	4630      	mov	r0, r6
 8009d34:	4639      	mov	r1, r7
 8009d36:	f7f6 fef1 	bl	8000b1c <__aeabi_dcmplt>
 8009d3a:	b9c8      	cbnz	r0, 8009d70 <_strtod_l+0xa58>
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	4639      	mov	r1, r7
 8009d40:	2200      	movs	r2, #0
 8009d42:	4b3e      	ldr	r3, [pc, #248]	; (8009e3c <_strtod_l+0xb24>)
 8009d44:	f7f6 fc78 	bl	8000638 <__aeabi_dmul>
 8009d48:	4606      	mov	r6, r0
 8009d4a:	460f      	mov	r7, r1
 8009d4c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009d50:	9618      	str	r6, [sp, #96]	; 0x60
 8009d52:	9319      	str	r3, [sp, #100]	; 0x64
 8009d54:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009d58:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009d5c:	e79c      	b.n	8009c98 <_strtod_l+0x980>
 8009d5e:	f1ba 0f01 	cmp.w	sl, #1
 8009d62:	d102      	bne.n	8009d6a <_strtod_l+0xa52>
 8009d64:	2d00      	cmp	r5, #0
 8009d66:	f43f ad8e 	beq.w	8009886 <_strtod_l+0x56e>
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	4b34      	ldr	r3, [pc, #208]	; (8009e40 <_strtod_l+0xb28>)
 8009d6e:	e78f      	b.n	8009c90 <_strtod_l+0x978>
 8009d70:	2600      	movs	r6, #0
 8009d72:	4f32      	ldr	r7, [pc, #200]	; (8009e3c <_strtod_l+0xb24>)
 8009d74:	e7ea      	b.n	8009d4c <_strtod_l+0xa34>
 8009d76:	4b31      	ldr	r3, [pc, #196]	; (8009e3c <_strtod_l+0xb24>)
 8009d78:	4630      	mov	r0, r6
 8009d7a:	4639      	mov	r1, r7
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f7f6 fc5b 	bl	8000638 <__aeabi_dmul>
 8009d82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d84:	4606      	mov	r6, r0
 8009d86:	460f      	mov	r7, r1
 8009d88:	b933      	cbnz	r3, 8009d98 <_strtod_l+0xa80>
 8009d8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d8e:	9010      	str	r0, [sp, #64]	; 0x40
 8009d90:	9311      	str	r3, [sp, #68]	; 0x44
 8009d92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d96:	e7df      	b.n	8009d58 <_strtod_l+0xa40>
 8009d98:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009d9c:	e7f9      	b.n	8009d92 <_strtod_l+0xa7a>
 8009d9e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009da2:	9b04      	ldr	r3, [sp, #16]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1ab      	bne.n	8009d00 <_strtod_l+0x9e8>
 8009da8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009dac:	0d1b      	lsrs	r3, r3, #20
 8009dae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009db0:	051b      	lsls	r3, r3, #20
 8009db2:	429a      	cmp	r2, r3
 8009db4:	465d      	mov	r5, fp
 8009db6:	d1a3      	bne.n	8009d00 <_strtod_l+0x9e8>
 8009db8:	4639      	mov	r1, r7
 8009dba:	4630      	mov	r0, r6
 8009dbc:	f7f6 feec 	bl	8000b98 <__aeabi_d2iz>
 8009dc0:	f7f6 fbd0 	bl	8000564 <__aeabi_i2d>
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	4639      	mov	r1, r7
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f7f6 fa7c 	bl	80002c8 <__aeabi_dsub>
 8009dd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dd2:	4606      	mov	r6, r0
 8009dd4:	460f      	mov	r7, r1
 8009dd6:	b933      	cbnz	r3, 8009de6 <_strtod_l+0xace>
 8009dd8:	f1ba 0f00 	cmp.w	sl, #0
 8009ddc:	d103      	bne.n	8009de6 <_strtod_l+0xace>
 8009dde:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8009de2:	2d00      	cmp	r5, #0
 8009de4:	d06d      	beq.n	8009ec2 <_strtod_l+0xbaa>
 8009de6:	a30a      	add	r3, pc, #40	; (adr r3, 8009e10 <_strtod_l+0xaf8>)
 8009de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dec:	4630      	mov	r0, r6
 8009dee:	4639      	mov	r1, r7
 8009df0:	f7f6 fe94 	bl	8000b1c <__aeabi_dcmplt>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	f47f acb8 	bne.w	800976a <_strtod_l+0x452>
 8009dfa:	a307      	add	r3, pc, #28	; (adr r3, 8009e18 <_strtod_l+0xb00>)
 8009dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e00:	4630      	mov	r0, r6
 8009e02:	4639      	mov	r1, r7
 8009e04:	f7f6 fea8 	bl	8000b58 <__aeabi_dcmpgt>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	f43f af79 	beq.w	8009d00 <_strtod_l+0x9e8>
 8009e0e:	e4ac      	b.n	800976a <_strtod_l+0x452>
 8009e10:	94a03595 	.word	0x94a03595
 8009e14:	3fdfffff 	.word	0x3fdfffff
 8009e18:	35afe535 	.word	0x35afe535
 8009e1c:	3fe00000 	.word	0x3fe00000
 8009e20:	000fffff 	.word	0x000fffff
 8009e24:	7ff00000 	.word	0x7ff00000
 8009e28:	7fefffff 	.word	0x7fefffff
 8009e2c:	39500000 	.word	0x39500000
 8009e30:	3ff00000 	.word	0x3ff00000
 8009e34:	7fe00000 	.word	0x7fe00000
 8009e38:	7c9fffff 	.word	0x7c9fffff
 8009e3c:	3fe00000 	.word	0x3fe00000
 8009e40:	bff00000 	.word	0xbff00000
 8009e44:	9b04      	ldr	r3, [sp, #16]
 8009e46:	b333      	cbz	r3, 8009e96 <_strtod_l+0xb7e>
 8009e48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e4a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e4e:	d822      	bhi.n	8009e96 <_strtod_l+0xb7e>
 8009e50:	a327      	add	r3, pc, #156	; (adr r3, 8009ef0 <_strtod_l+0xbd8>)
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	4630      	mov	r0, r6
 8009e58:	4639      	mov	r1, r7
 8009e5a:	f7f6 fe69 	bl	8000b30 <__aeabi_dcmple>
 8009e5e:	b1a0      	cbz	r0, 8009e8a <_strtod_l+0xb72>
 8009e60:	4639      	mov	r1, r7
 8009e62:	4630      	mov	r0, r6
 8009e64:	f7f6 fec0 	bl	8000be8 <__aeabi_d2uiz>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	bf08      	it	eq
 8009e6c:	2001      	moveq	r0, #1
 8009e6e:	f7f6 fb69 	bl	8000544 <__aeabi_ui2d>
 8009e72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e74:	4606      	mov	r6, r0
 8009e76:	460f      	mov	r7, r1
 8009e78:	bb03      	cbnz	r3, 8009ebc <_strtod_l+0xba4>
 8009e7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e7e:	9012      	str	r0, [sp, #72]	; 0x48
 8009e80:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e82:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009e86:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e8e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009e92:	1a9b      	subs	r3, r3, r2
 8009e94:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e96:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009e9a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009e9e:	f001 fd3d 	bl	800b91c <__ulp>
 8009ea2:	4650      	mov	r0, sl
 8009ea4:	ec53 2b10 	vmov	r2, r3, d0
 8009ea8:	4659      	mov	r1, fp
 8009eaa:	f7f6 fbc5 	bl	8000638 <__aeabi_dmul>
 8009eae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009eb2:	f7f6 fa0b 	bl	80002cc <__adddf3>
 8009eb6:	4682      	mov	sl, r0
 8009eb8:	468b      	mov	fp, r1
 8009eba:	e772      	b.n	8009da2 <_strtod_l+0xa8a>
 8009ebc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009ec0:	e7df      	b.n	8009e82 <_strtod_l+0xb6a>
 8009ec2:	a30d      	add	r3, pc, #52	; (adr r3, 8009ef8 <_strtod_l+0xbe0>)
 8009ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec8:	f7f6 fe28 	bl	8000b1c <__aeabi_dcmplt>
 8009ecc:	e79c      	b.n	8009e08 <_strtod_l+0xaf0>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	930d      	str	r3, [sp, #52]	; 0x34
 8009ed2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009ed4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ed6:	6013      	str	r3, [r2, #0]
 8009ed8:	f7ff ba61 	b.w	800939e <_strtod_l+0x86>
 8009edc:	2b65      	cmp	r3, #101	; 0x65
 8009ede:	f04f 0200 	mov.w	r2, #0
 8009ee2:	f43f ab4e 	beq.w	8009582 <_strtod_l+0x26a>
 8009ee6:	2101      	movs	r1, #1
 8009ee8:	4614      	mov	r4, r2
 8009eea:	9104      	str	r1, [sp, #16]
 8009eec:	f7ff bacb 	b.w	8009486 <_strtod_l+0x16e>
 8009ef0:	ffc00000 	.word	0xffc00000
 8009ef4:	41dfffff 	.word	0x41dfffff
 8009ef8:	94a03595 	.word	0x94a03595
 8009efc:	3fcfffff 	.word	0x3fcfffff

08009f00 <_strtod_r>:
 8009f00:	4b05      	ldr	r3, [pc, #20]	; (8009f18 <_strtod_r+0x18>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	b410      	push	{r4}
 8009f06:	6a1b      	ldr	r3, [r3, #32]
 8009f08:	4c04      	ldr	r4, [pc, #16]	; (8009f1c <_strtod_r+0x1c>)
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	bf08      	it	eq
 8009f0e:	4623      	moveq	r3, r4
 8009f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f14:	f7ff ba00 	b.w	8009318 <_strtod_l>
 8009f18:	2000001c 	.word	0x2000001c
 8009f1c:	20000080 	.word	0x20000080

08009f20 <_strtol_l.isra.0>:
 8009f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f24:	4680      	mov	r8, r0
 8009f26:	4689      	mov	r9, r1
 8009f28:	4692      	mov	sl, r2
 8009f2a:	461e      	mov	r6, r3
 8009f2c:	460f      	mov	r7, r1
 8009f2e:	463d      	mov	r5, r7
 8009f30:	9808      	ldr	r0, [sp, #32]
 8009f32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f36:	f001 f9ed 	bl	800b314 <__locale_ctype_ptr_l>
 8009f3a:	4420      	add	r0, r4
 8009f3c:	7843      	ldrb	r3, [r0, #1]
 8009f3e:	f013 0308 	ands.w	r3, r3, #8
 8009f42:	d132      	bne.n	8009faa <_strtol_l.isra.0+0x8a>
 8009f44:	2c2d      	cmp	r4, #45	; 0x2d
 8009f46:	d132      	bne.n	8009fae <_strtol_l.isra.0+0x8e>
 8009f48:	787c      	ldrb	r4, [r7, #1]
 8009f4a:	1cbd      	adds	r5, r7, #2
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	2e00      	cmp	r6, #0
 8009f50:	d05d      	beq.n	800a00e <_strtol_l.isra.0+0xee>
 8009f52:	2e10      	cmp	r6, #16
 8009f54:	d109      	bne.n	8009f6a <_strtol_l.isra.0+0x4a>
 8009f56:	2c30      	cmp	r4, #48	; 0x30
 8009f58:	d107      	bne.n	8009f6a <_strtol_l.isra.0+0x4a>
 8009f5a:	782b      	ldrb	r3, [r5, #0]
 8009f5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009f60:	2b58      	cmp	r3, #88	; 0x58
 8009f62:	d14f      	bne.n	800a004 <_strtol_l.isra.0+0xe4>
 8009f64:	786c      	ldrb	r4, [r5, #1]
 8009f66:	2610      	movs	r6, #16
 8009f68:	3502      	adds	r5, #2
 8009f6a:	2a00      	cmp	r2, #0
 8009f6c:	bf14      	ite	ne
 8009f6e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009f72:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009f76:	2700      	movs	r7, #0
 8009f78:	fbb1 fcf6 	udiv	ip, r1, r6
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009f82:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009f86:	2b09      	cmp	r3, #9
 8009f88:	d817      	bhi.n	8009fba <_strtol_l.isra.0+0x9a>
 8009f8a:	461c      	mov	r4, r3
 8009f8c:	42a6      	cmp	r6, r4
 8009f8e:	dd23      	ble.n	8009fd8 <_strtol_l.isra.0+0xb8>
 8009f90:	1c7b      	adds	r3, r7, #1
 8009f92:	d007      	beq.n	8009fa4 <_strtol_l.isra.0+0x84>
 8009f94:	4584      	cmp	ip, r0
 8009f96:	d31c      	bcc.n	8009fd2 <_strtol_l.isra.0+0xb2>
 8009f98:	d101      	bne.n	8009f9e <_strtol_l.isra.0+0x7e>
 8009f9a:	45a6      	cmp	lr, r4
 8009f9c:	db19      	blt.n	8009fd2 <_strtol_l.isra.0+0xb2>
 8009f9e:	fb00 4006 	mla	r0, r0, r6, r4
 8009fa2:	2701      	movs	r7, #1
 8009fa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fa8:	e7eb      	b.n	8009f82 <_strtol_l.isra.0+0x62>
 8009faa:	462f      	mov	r7, r5
 8009fac:	e7bf      	b.n	8009f2e <_strtol_l.isra.0+0xe>
 8009fae:	2c2b      	cmp	r4, #43	; 0x2b
 8009fb0:	bf04      	itt	eq
 8009fb2:	1cbd      	addeq	r5, r7, #2
 8009fb4:	787c      	ldrbeq	r4, [r7, #1]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	e7c9      	b.n	8009f4e <_strtol_l.isra.0+0x2e>
 8009fba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009fbe:	2b19      	cmp	r3, #25
 8009fc0:	d801      	bhi.n	8009fc6 <_strtol_l.isra.0+0xa6>
 8009fc2:	3c37      	subs	r4, #55	; 0x37
 8009fc4:	e7e2      	b.n	8009f8c <_strtol_l.isra.0+0x6c>
 8009fc6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009fca:	2b19      	cmp	r3, #25
 8009fcc:	d804      	bhi.n	8009fd8 <_strtol_l.isra.0+0xb8>
 8009fce:	3c57      	subs	r4, #87	; 0x57
 8009fd0:	e7dc      	b.n	8009f8c <_strtol_l.isra.0+0x6c>
 8009fd2:	f04f 37ff 	mov.w	r7, #4294967295
 8009fd6:	e7e5      	b.n	8009fa4 <_strtol_l.isra.0+0x84>
 8009fd8:	1c7b      	adds	r3, r7, #1
 8009fda:	d108      	bne.n	8009fee <_strtol_l.isra.0+0xce>
 8009fdc:	2322      	movs	r3, #34	; 0x22
 8009fde:	f8c8 3000 	str.w	r3, [r8]
 8009fe2:	4608      	mov	r0, r1
 8009fe4:	f1ba 0f00 	cmp.w	sl, #0
 8009fe8:	d107      	bne.n	8009ffa <_strtol_l.isra.0+0xda>
 8009fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fee:	b102      	cbz	r2, 8009ff2 <_strtol_l.isra.0+0xd2>
 8009ff0:	4240      	negs	r0, r0
 8009ff2:	f1ba 0f00 	cmp.w	sl, #0
 8009ff6:	d0f8      	beq.n	8009fea <_strtol_l.isra.0+0xca>
 8009ff8:	b10f      	cbz	r7, 8009ffe <_strtol_l.isra.0+0xde>
 8009ffa:	f105 39ff 	add.w	r9, r5, #4294967295
 8009ffe:	f8ca 9000 	str.w	r9, [sl]
 800a002:	e7f2      	b.n	8009fea <_strtol_l.isra.0+0xca>
 800a004:	2430      	movs	r4, #48	; 0x30
 800a006:	2e00      	cmp	r6, #0
 800a008:	d1af      	bne.n	8009f6a <_strtol_l.isra.0+0x4a>
 800a00a:	2608      	movs	r6, #8
 800a00c:	e7ad      	b.n	8009f6a <_strtol_l.isra.0+0x4a>
 800a00e:	2c30      	cmp	r4, #48	; 0x30
 800a010:	d0a3      	beq.n	8009f5a <_strtol_l.isra.0+0x3a>
 800a012:	260a      	movs	r6, #10
 800a014:	e7a9      	b.n	8009f6a <_strtol_l.isra.0+0x4a>
	...

0800a018 <_strtol_r>:
 800a018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a01a:	4c06      	ldr	r4, [pc, #24]	; (800a034 <_strtol_r+0x1c>)
 800a01c:	4d06      	ldr	r5, [pc, #24]	; (800a038 <_strtol_r+0x20>)
 800a01e:	6824      	ldr	r4, [r4, #0]
 800a020:	6a24      	ldr	r4, [r4, #32]
 800a022:	2c00      	cmp	r4, #0
 800a024:	bf08      	it	eq
 800a026:	462c      	moveq	r4, r5
 800a028:	9400      	str	r4, [sp, #0]
 800a02a:	f7ff ff79 	bl	8009f20 <_strtol_l.isra.0>
 800a02e:	b003      	add	sp, #12
 800a030:	bd30      	pop	{r4, r5, pc}
 800a032:	bf00      	nop
 800a034:	2000001c 	.word	0x2000001c
 800a038:	20000080 	.word	0x20000080

0800a03c <quorem>:
 800a03c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a040:	6903      	ldr	r3, [r0, #16]
 800a042:	690c      	ldr	r4, [r1, #16]
 800a044:	42a3      	cmp	r3, r4
 800a046:	4680      	mov	r8, r0
 800a048:	f2c0 8082 	blt.w	800a150 <quorem+0x114>
 800a04c:	3c01      	subs	r4, #1
 800a04e:	f101 0714 	add.w	r7, r1, #20
 800a052:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a056:	f100 0614 	add.w	r6, r0, #20
 800a05a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a05e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a062:	eb06 030c 	add.w	r3, r6, ip
 800a066:	3501      	adds	r5, #1
 800a068:	eb07 090c 	add.w	r9, r7, ip
 800a06c:	9301      	str	r3, [sp, #4]
 800a06e:	fbb0 f5f5 	udiv	r5, r0, r5
 800a072:	b395      	cbz	r5, 800a0da <quorem+0x9e>
 800a074:	f04f 0a00 	mov.w	sl, #0
 800a078:	4638      	mov	r0, r7
 800a07a:	46b6      	mov	lr, r6
 800a07c:	46d3      	mov	fp, sl
 800a07e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a082:	b293      	uxth	r3, r2
 800a084:	fb05 a303 	mla	r3, r5, r3, sl
 800a088:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	ebab 0303 	sub.w	r3, fp, r3
 800a092:	0c12      	lsrs	r2, r2, #16
 800a094:	f8de b000 	ldr.w	fp, [lr]
 800a098:	fb05 a202 	mla	r2, r5, r2, sl
 800a09c:	fa13 f38b 	uxtah	r3, r3, fp
 800a0a0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a0a4:	fa1f fb82 	uxth.w	fp, r2
 800a0a8:	f8de 2000 	ldr.w	r2, [lr]
 800a0ac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a0b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0ba:	4581      	cmp	r9, r0
 800a0bc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a0c0:	f84e 3b04 	str.w	r3, [lr], #4
 800a0c4:	d2db      	bcs.n	800a07e <quorem+0x42>
 800a0c6:	f856 300c 	ldr.w	r3, [r6, ip]
 800a0ca:	b933      	cbnz	r3, 800a0da <quorem+0x9e>
 800a0cc:	9b01      	ldr	r3, [sp, #4]
 800a0ce:	3b04      	subs	r3, #4
 800a0d0:	429e      	cmp	r6, r3
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	d330      	bcc.n	800a138 <quorem+0xfc>
 800a0d6:	f8c8 4010 	str.w	r4, [r8, #16]
 800a0da:	4640      	mov	r0, r8
 800a0dc:	f001 fba6 	bl	800b82c <__mcmp>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	db25      	blt.n	800a130 <quorem+0xf4>
 800a0e4:	3501      	adds	r5, #1
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	f04f 0c00 	mov.w	ip, #0
 800a0ec:	f857 2b04 	ldr.w	r2, [r7], #4
 800a0f0:	f8d0 e000 	ldr.w	lr, [r0]
 800a0f4:	b293      	uxth	r3, r2
 800a0f6:	ebac 0303 	sub.w	r3, ip, r3
 800a0fa:	0c12      	lsrs	r2, r2, #16
 800a0fc:	fa13 f38e 	uxtah	r3, r3, lr
 800a100:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a104:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a108:	b29b      	uxth	r3, r3
 800a10a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a10e:	45b9      	cmp	r9, r7
 800a110:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a114:	f840 3b04 	str.w	r3, [r0], #4
 800a118:	d2e8      	bcs.n	800a0ec <quorem+0xb0>
 800a11a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a11e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a122:	b92a      	cbnz	r2, 800a130 <quorem+0xf4>
 800a124:	3b04      	subs	r3, #4
 800a126:	429e      	cmp	r6, r3
 800a128:	461a      	mov	r2, r3
 800a12a:	d30b      	bcc.n	800a144 <quorem+0x108>
 800a12c:	f8c8 4010 	str.w	r4, [r8, #16]
 800a130:	4628      	mov	r0, r5
 800a132:	b003      	add	sp, #12
 800a134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a138:	6812      	ldr	r2, [r2, #0]
 800a13a:	3b04      	subs	r3, #4
 800a13c:	2a00      	cmp	r2, #0
 800a13e:	d1ca      	bne.n	800a0d6 <quorem+0x9a>
 800a140:	3c01      	subs	r4, #1
 800a142:	e7c5      	b.n	800a0d0 <quorem+0x94>
 800a144:	6812      	ldr	r2, [r2, #0]
 800a146:	3b04      	subs	r3, #4
 800a148:	2a00      	cmp	r2, #0
 800a14a:	d1ef      	bne.n	800a12c <quorem+0xf0>
 800a14c:	3c01      	subs	r4, #1
 800a14e:	e7ea      	b.n	800a126 <quorem+0xea>
 800a150:	2000      	movs	r0, #0
 800a152:	e7ee      	b.n	800a132 <quorem+0xf6>
 800a154:	0000      	movs	r0, r0
	...

0800a158 <_dtoa_r>:
 800a158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15c:	ec57 6b10 	vmov	r6, r7, d0
 800a160:	b097      	sub	sp, #92	; 0x5c
 800a162:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a164:	9106      	str	r1, [sp, #24]
 800a166:	4604      	mov	r4, r0
 800a168:	920b      	str	r2, [sp, #44]	; 0x2c
 800a16a:	9312      	str	r3, [sp, #72]	; 0x48
 800a16c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a170:	e9cd 6700 	strd	r6, r7, [sp]
 800a174:	b93d      	cbnz	r5, 800a186 <_dtoa_r+0x2e>
 800a176:	2010      	movs	r0, #16
 800a178:	f001 f8e0 	bl	800b33c <malloc>
 800a17c:	6260      	str	r0, [r4, #36]	; 0x24
 800a17e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a182:	6005      	str	r5, [r0, #0]
 800a184:	60c5      	str	r5, [r0, #12]
 800a186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a188:	6819      	ldr	r1, [r3, #0]
 800a18a:	b151      	cbz	r1, 800a1a2 <_dtoa_r+0x4a>
 800a18c:	685a      	ldr	r2, [r3, #4]
 800a18e:	604a      	str	r2, [r1, #4]
 800a190:	2301      	movs	r3, #1
 800a192:	4093      	lsls	r3, r2
 800a194:	608b      	str	r3, [r1, #8]
 800a196:	4620      	mov	r0, r4
 800a198:	f001 f929 	bl	800b3ee <_Bfree>
 800a19c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a19e:	2200      	movs	r2, #0
 800a1a0:	601a      	str	r2, [r3, #0]
 800a1a2:	1e3b      	subs	r3, r7, #0
 800a1a4:	bfbb      	ittet	lt
 800a1a6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a1aa:	9301      	strlt	r3, [sp, #4]
 800a1ac:	2300      	movge	r3, #0
 800a1ae:	2201      	movlt	r2, #1
 800a1b0:	bfac      	ite	ge
 800a1b2:	f8c8 3000 	strge.w	r3, [r8]
 800a1b6:	f8c8 2000 	strlt.w	r2, [r8]
 800a1ba:	4baf      	ldr	r3, [pc, #700]	; (800a478 <_dtoa_r+0x320>)
 800a1bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a1c0:	ea33 0308 	bics.w	r3, r3, r8
 800a1c4:	d114      	bne.n	800a1f0 <_dtoa_r+0x98>
 800a1c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1c8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a1cc:	6013      	str	r3, [r2, #0]
 800a1ce:	9b00      	ldr	r3, [sp, #0]
 800a1d0:	b923      	cbnz	r3, 800a1dc <_dtoa_r+0x84>
 800a1d2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	f000 8542 	beq.w	800ac60 <_dtoa_r+0xb08>
 800a1dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1de:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a48c <_dtoa_r+0x334>
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f000 8544 	beq.w	800ac70 <_dtoa_r+0xb18>
 800a1e8:	f10b 0303 	add.w	r3, fp, #3
 800a1ec:	f000 bd3e 	b.w	800ac6c <_dtoa_r+0xb14>
 800a1f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	4639      	mov	r1, r7
 800a1fc:	f7f6 fc84 	bl	8000b08 <__aeabi_dcmpeq>
 800a200:	4681      	mov	r9, r0
 800a202:	b168      	cbz	r0, 800a220 <_dtoa_r+0xc8>
 800a204:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a206:	2301      	movs	r3, #1
 800a208:	6013      	str	r3, [r2, #0]
 800a20a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f000 8524 	beq.w	800ac5a <_dtoa_r+0xb02>
 800a212:	4b9a      	ldr	r3, [pc, #616]	; (800a47c <_dtoa_r+0x324>)
 800a214:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a216:	f103 3bff 	add.w	fp, r3, #4294967295
 800a21a:	6013      	str	r3, [r2, #0]
 800a21c:	f000 bd28 	b.w	800ac70 <_dtoa_r+0xb18>
 800a220:	aa14      	add	r2, sp, #80	; 0x50
 800a222:	a915      	add	r1, sp, #84	; 0x54
 800a224:	ec47 6b10 	vmov	d0, r6, r7
 800a228:	4620      	mov	r0, r4
 800a22a:	f001 fbed 	bl	800ba08 <__d2b>
 800a22e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a232:	9004      	str	r0, [sp, #16]
 800a234:	2d00      	cmp	r5, #0
 800a236:	d07c      	beq.n	800a332 <_dtoa_r+0x1da>
 800a238:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a23c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a240:	46b2      	mov	sl, r6
 800a242:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a246:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a24a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a24e:	2200      	movs	r2, #0
 800a250:	4b8b      	ldr	r3, [pc, #556]	; (800a480 <_dtoa_r+0x328>)
 800a252:	4650      	mov	r0, sl
 800a254:	4659      	mov	r1, fp
 800a256:	f7f6 f837 	bl	80002c8 <__aeabi_dsub>
 800a25a:	a381      	add	r3, pc, #516	; (adr r3, 800a460 <_dtoa_r+0x308>)
 800a25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a260:	f7f6 f9ea 	bl	8000638 <__aeabi_dmul>
 800a264:	a380      	add	r3, pc, #512	; (adr r3, 800a468 <_dtoa_r+0x310>)
 800a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26a:	f7f6 f82f 	bl	80002cc <__adddf3>
 800a26e:	4606      	mov	r6, r0
 800a270:	4628      	mov	r0, r5
 800a272:	460f      	mov	r7, r1
 800a274:	f7f6 f976 	bl	8000564 <__aeabi_i2d>
 800a278:	a37d      	add	r3, pc, #500	; (adr r3, 800a470 <_dtoa_r+0x318>)
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	f7f6 f9db 	bl	8000638 <__aeabi_dmul>
 800a282:	4602      	mov	r2, r0
 800a284:	460b      	mov	r3, r1
 800a286:	4630      	mov	r0, r6
 800a288:	4639      	mov	r1, r7
 800a28a:	f7f6 f81f 	bl	80002cc <__adddf3>
 800a28e:	4606      	mov	r6, r0
 800a290:	460f      	mov	r7, r1
 800a292:	f7f6 fc81 	bl	8000b98 <__aeabi_d2iz>
 800a296:	2200      	movs	r2, #0
 800a298:	4682      	mov	sl, r0
 800a29a:	2300      	movs	r3, #0
 800a29c:	4630      	mov	r0, r6
 800a29e:	4639      	mov	r1, r7
 800a2a0:	f7f6 fc3c 	bl	8000b1c <__aeabi_dcmplt>
 800a2a4:	b148      	cbz	r0, 800a2ba <_dtoa_r+0x162>
 800a2a6:	4650      	mov	r0, sl
 800a2a8:	f7f6 f95c 	bl	8000564 <__aeabi_i2d>
 800a2ac:	4632      	mov	r2, r6
 800a2ae:	463b      	mov	r3, r7
 800a2b0:	f7f6 fc2a 	bl	8000b08 <__aeabi_dcmpeq>
 800a2b4:	b908      	cbnz	r0, 800a2ba <_dtoa_r+0x162>
 800a2b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2ba:	f1ba 0f16 	cmp.w	sl, #22
 800a2be:	d859      	bhi.n	800a374 <_dtoa_r+0x21c>
 800a2c0:	4970      	ldr	r1, [pc, #448]	; (800a484 <_dtoa_r+0x32c>)
 800a2c2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a2c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2ce:	f7f6 fc43 	bl	8000b58 <__aeabi_dcmpgt>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	d050      	beq.n	800a378 <_dtoa_r+0x220>
 800a2d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2da:	2300      	movs	r3, #0
 800a2dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2e0:	1b5d      	subs	r5, r3, r5
 800a2e2:	f1b5 0801 	subs.w	r8, r5, #1
 800a2e6:	bf49      	itett	mi
 800a2e8:	f1c5 0301 	rsbmi	r3, r5, #1
 800a2ec:	2300      	movpl	r3, #0
 800a2ee:	9305      	strmi	r3, [sp, #20]
 800a2f0:	f04f 0800 	movmi.w	r8, #0
 800a2f4:	bf58      	it	pl
 800a2f6:	9305      	strpl	r3, [sp, #20]
 800a2f8:	f1ba 0f00 	cmp.w	sl, #0
 800a2fc:	db3e      	blt.n	800a37c <_dtoa_r+0x224>
 800a2fe:	2300      	movs	r3, #0
 800a300:	44d0      	add	r8, sl
 800a302:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a306:	9307      	str	r3, [sp, #28]
 800a308:	9b06      	ldr	r3, [sp, #24]
 800a30a:	2b09      	cmp	r3, #9
 800a30c:	f200 8090 	bhi.w	800a430 <_dtoa_r+0x2d8>
 800a310:	2b05      	cmp	r3, #5
 800a312:	bfc4      	itt	gt
 800a314:	3b04      	subgt	r3, #4
 800a316:	9306      	strgt	r3, [sp, #24]
 800a318:	9b06      	ldr	r3, [sp, #24]
 800a31a:	f1a3 0302 	sub.w	r3, r3, #2
 800a31e:	bfcc      	ite	gt
 800a320:	2500      	movgt	r5, #0
 800a322:	2501      	movle	r5, #1
 800a324:	2b03      	cmp	r3, #3
 800a326:	f200 808f 	bhi.w	800a448 <_dtoa_r+0x2f0>
 800a32a:	e8df f003 	tbb	[pc, r3]
 800a32e:	7f7d      	.short	0x7f7d
 800a330:	7131      	.short	0x7131
 800a332:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a336:	441d      	add	r5, r3
 800a338:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a33c:	2820      	cmp	r0, #32
 800a33e:	dd13      	ble.n	800a368 <_dtoa_r+0x210>
 800a340:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a344:	9b00      	ldr	r3, [sp, #0]
 800a346:	fa08 f800 	lsl.w	r8, r8, r0
 800a34a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a34e:	fa23 f000 	lsr.w	r0, r3, r0
 800a352:	ea48 0000 	orr.w	r0, r8, r0
 800a356:	f7f6 f8f5 	bl	8000544 <__aeabi_ui2d>
 800a35a:	2301      	movs	r3, #1
 800a35c:	4682      	mov	sl, r0
 800a35e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a362:	3d01      	subs	r5, #1
 800a364:	9313      	str	r3, [sp, #76]	; 0x4c
 800a366:	e772      	b.n	800a24e <_dtoa_r+0xf6>
 800a368:	9b00      	ldr	r3, [sp, #0]
 800a36a:	f1c0 0020 	rsb	r0, r0, #32
 800a36e:	fa03 f000 	lsl.w	r0, r3, r0
 800a372:	e7f0      	b.n	800a356 <_dtoa_r+0x1fe>
 800a374:	2301      	movs	r3, #1
 800a376:	e7b1      	b.n	800a2dc <_dtoa_r+0x184>
 800a378:	900f      	str	r0, [sp, #60]	; 0x3c
 800a37a:	e7b0      	b.n	800a2de <_dtoa_r+0x186>
 800a37c:	9b05      	ldr	r3, [sp, #20]
 800a37e:	eba3 030a 	sub.w	r3, r3, sl
 800a382:	9305      	str	r3, [sp, #20]
 800a384:	f1ca 0300 	rsb	r3, sl, #0
 800a388:	9307      	str	r3, [sp, #28]
 800a38a:	2300      	movs	r3, #0
 800a38c:	930e      	str	r3, [sp, #56]	; 0x38
 800a38e:	e7bb      	b.n	800a308 <_dtoa_r+0x1b0>
 800a390:	2301      	movs	r3, #1
 800a392:	930a      	str	r3, [sp, #40]	; 0x28
 800a394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a396:	2b00      	cmp	r3, #0
 800a398:	dd59      	ble.n	800a44e <_dtoa_r+0x2f6>
 800a39a:	9302      	str	r3, [sp, #8]
 800a39c:	4699      	mov	r9, r3
 800a39e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	6072      	str	r2, [r6, #4]
 800a3a4:	2204      	movs	r2, #4
 800a3a6:	f102 0014 	add.w	r0, r2, #20
 800a3aa:	4298      	cmp	r0, r3
 800a3ac:	6871      	ldr	r1, [r6, #4]
 800a3ae:	d953      	bls.n	800a458 <_dtoa_r+0x300>
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f000 ffe8 	bl	800b386 <_Balloc>
 800a3b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3b8:	6030      	str	r0, [r6, #0]
 800a3ba:	f1b9 0f0e 	cmp.w	r9, #14
 800a3be:	f8d3 b000 	ldr.w	fp, [r3]
 800a3c2:	f200 80e6 	bhi.w	800a592 <_dtoa_r+0x43a>
 800a3c6:	2d00      	cmp	r5, #0
 800a3c8:	f000 80e3 	beq.w	800a592 <_dtoa_r+0x43a>
 800a3cc:	ed9d 7b00 	vldr	d7, [sp]
 800a3d0:	f1ba 0f00 	cmp.w	sl, #0
 800a3d4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a3d8:	dd74      	ble.n	800a4c4 <_dtoa_r+0x36c>
 800a3da:	4a2a      	ldr	r2, [pc, #168]	; (800a484 <_dtoa_r+0x32c>)
 800a3dc:	f00a 030f 	and.w	r3, sl, #15
 800a3e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a3e4:	ed93 7b00 	vldr	d7, [r3]
 800a3e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a3ec:	06f0      	lsls	r0, r6, #27
 800a3ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a3f2:	d565      	bpl.n	800a4c0 <_dtoa_r+0x368>
 800a3f4:	4b24      	ldr	r3, [pc, #144]	; (800a488 <_dtoa_r+0x330>)
 800a3f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a3fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a3fe:	f7f6 fa45 	bl	800088c <__aeabi_ddiv>
 800a402:	e9cd 0100 	strd	r0, r1, [sp]
 800a406:	f006 060f 	and.w	r6, r6, #15
 800a40a:	2503      	movs	r5, #3
 800a40c:	4f1e      	ldr	r7, [pc, #120]	; (800a488 <_dtoa_r+0x330>)
 800a40e:	e04c      	b.n	800a4aa <_dtoa_r+0x352>
 800a410:	2301      	movs	r3, #1
 800a412:	930a      	str	r3, [sp, #40]	; 0x28
 800a414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a416:	4453      	add	r3, sl
 800a418:	f103 0901 	add.w	r9, r3, #1
 800a41c:	9302      	str	r3, [sp, #8]
 800a41e:	464b      	mov	r3, r9
 800a420:	2b01      	cmp	r3, #1
 800a422:	bfb8      	it	lt
 800a424:	2301      	movlt	r3, #1
 800a426:	e7ba      	b.n	800a39e <_dtoa_r+0x246>
 800a428:	2300      	movs	r3, #0
 800a42a:	e7b2      	b.n	800a392 <_dtoa_r+0x23a>
 800a42c:	2300      	movs	r3, #0
 800a42e:	e7f0      	b.n	800a412 <_dtoa_r+0x2ba>
 800a430:	2501      	movs	r5, #1
 800a432:	2300      	movs	r3, #0
 800a434:	9306      	str	r3, [sp, #24]
 800a436:	950a      	str	r5, [sp, #40]	; 0x28
 800a438:	f04f 33ff 	mov.w	r3, #4294967295
 800a43c:	9302      	str	r3, [sp, #8]
 800a43e:	4699      	mov	r9, r3
 800a440:	2200      	movs	r2, #0
 800a442:	2312      	movs	r3, #18
 800a444:	920b      	str	r2, [sp, #44]	; 0x2c
 800a446:	e7aa      	b.n	800a39e <_dtoa_r+0x246>
 800a448:	2301      	movs	r3, #1
 800a44a:	930a      	str	r3, [sp, #40]	; 0x28
 800a44c:	e7f4      	b.n	800a438 <_dtoa_r+0x2e0>
 800a44e:	2301      	movs	r3, #1
 800a450:	9302      	str	r3, [sp, #8]
 800a452:	4699      	mov	r9, r3
 800a454:	461a      	mov	r2, r3
 800a456:	e7f5      	b.n	800a444 <_dtoa_r+0x2ec>
 800a458:	3101      	adds	r1, #1
 800a45a:	6071      	str	r1, [r6, #4]
 800a45c:	0052      	lsls	r2, r2, #1
 800a45e:	e7a2      	b.n	800a3a6 <_dtoa_r+0x24e>
 800a460:	636f4361 	.word	0x636f4361
 800a464:	3fd287a7 	.word	0x3fd287a7
 800a468:	8b60c8b3 	.word	0x8b60c8b3
 800a46c:	3fc68a28 	.word	0x3fc68a28
 800a470:	509f79fb 	.word	0x509f79fb
 800a474:	3fd34413 	.word	0x3fd34413
 800a478:	7ff00000 	.word	0x7ff00000
 800a47c:	0800c0d5 	.word	0x0800c0d5
 800a480:	3ff80000 	.word	0x3ff80000
 800a484:	0800c190 	.word	0x0800c190
 800a488:	0800c168 	.word	0x0800c168
 800a48c:	0800c159 	.word	0x0800c159
 800a490:	07f1      	lsls	r1, r6, #31
 800a492:	d508      	bpl.n	800a4a6 <_dtoa_r+0x34e>
 800a494:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a49c:	f7f6 f8cc 	bl	8000638 <__aeabi_dmul>
 800a4a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a4a4:	3501      	adds	r5, #1
 800a4a6:	1076      	asrs	r6, r6, #1
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	2e00      	cmp	r6, #0
 800a4ac:	d1f0      	bne.n	800a490 <_dtoa_r+0x338>
 800a4ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a4b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4b6:	f7f6 f9e9 	bl	800088c <__aeabi_ddiv>
 800a4ba:	e9cd 0100 	strd	r0, r1, [sp]
 800a4be:	e01a      	b.n	800a4f6 <_dtoa_r+0x39e>
 800a4c0:	2502      	movs	r5, #2
 800a4c2:	e7a3      	b.n	800a40c <_dtoa_r+0x2b4>
 800a4c4:	f000 80a0 	beq.w	800a608 <_dtoa_r+0x4b0>
 800a4c8:	f1ca 0600 	rsb	r6, sl, #0
 800a4cc:	4b9f      	ldr	r3, [pc, #636]	; (800a74c <_dtoa_r+0x5f4>)
 800a4ce:	4fa0      	ldr	r7, [pc, #640]	; (800a750 <_dtoa_r+0x5f8>)
 800a4d0:	f006 020f 	and.w	r2, r6, #15
 800a4d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4e0:	f7f6 f8aa 	bl	8000638 <__aeabi_dmul>
 800a4e4:	e9cd 0100 	strd	r0, r1, [sp]
 800a4e8:	1136      	asrs	r6, r6, #4
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	2502      	movs	r5, #2
 800a4ee:	2e00      	cmp	r6, #0
 800a4f0:	d17f      	bne.n	800a5f2 <_dtoa_r+0x49a>
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1e1      	bne.n	800a4ba <_dtoa_r+0x362>
 800a4f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 8087 	beq.w	800a60c <_dtoa_r+0x4b4>
 800a4fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a502:	2200      	movs	r2, #0
 800a504:	4b93      	ldr	r3, [pc, #588]	; (800a754 <_dtoa_r+0x5fc>)
 800a506:	4630      	mov	r0, r6
 800a508:	4639      	mov	r1, r7
 800a50a:	f7f6 fb07 	bl	8000b1c <__aeabi_dcmplt>
 800a50e:	2800      	cmp	r0, #0
 800a510:	d07c      	beq.n	800a60c <_dtoa_r+0x4b4>
 800a512:	f1b9 0f00 	cmp.w	r9, #0
 800a516:	d079      	beq.n	800a60c <_dtoa_r+0x4b4>
 800a518:	9b02      	ldr	r3, [sp, #8]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	dd35      	ble.n	800a58a <_dtoa_r+0x432>
 800a51e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a522:	9308      	str	r3, [sp, #32]
 800a524:	4639      	mov	r1, r7
 800a526:	2200      	movs	r2, #0
 800a528:	4b8b      	ldr	r3, [pc, #556]	; (800a758 <_dtoa_r+0x600>)
 800a52a:	4630      	mov	r0, r6
 800a52c:	f7f6 f884 	bl	8000638 <__aeabi_dmul>
 800a530:	e9cd 0100 	strd	r0, r1, [sp]
 800a534:	9f02      	ldr	r7, [sp, #8]
 800a536:	3501      	adds	r5, #1
 800a538:	4628      	mov	r0, r5
 800a53a:	f7f6 f813 	bl	8000564 <__aeabi_i2d>
 800a53e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a542:	f7f6 f879 	bl	8000638 <__aeabi_dmul>
 800a546:	2200      	movs	r2, #0
 800a548:	4b84      	ldr	r3, [pc, #528]	; (800a75c <_dtoa_r+0x604>)
 800a54a:	f7f5 febf 	bl	80002cc <__adddf3>
 800a54e:	4605      	mov	r5, r0
 800a550:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a554:	2f00      	cmp	r7, #0
 800a556:	d15d      	bne.n	800a614 <_dtoa_r+0x4bc>
 800a558:	2200      	movs	r2, #0
 800a55a:	4b81      	ldr	r3, [pc, #516]	; (800a760 <_dtoa_r+0x608>)
 800a55c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a560:	f7f5 feb2 	bl	80002c8 <__aeabi_dsub>
 800a564:	462a      	mov	r2, r5
 800a566:	4633      	mov	r3, r6
 800a568:	e9cd 0100 	strd	r0, r1, [sp]
 800a56c:	f7f6 faf4 	bl	8000b58 <__aeabi_dcmpgt>
 800a570:	2800      	cmp	r0, #0
 800a572:	f040 8288 	bne.w	800aa86 <_dtoa_r+0x92e>
 800a576:	462a      	mov	r2, r5
 800a578:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a57c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a580:	f7f6 facc 	bl	8000b1c <__aeabi_dcmplt>
 800a584:	2800      	cmp	r0, #0
 800a586:	f040 827c 	bne.w	800aa82 <_dtoa_r+0x92a>
 800a58a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a58e:	e9cd 2300 	strd	r2, r3, [sp]
 800a592:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a594:	2b00      	cmp	r3, #0
 800a596:	f2c0 8150 	blt.w	800a83a <_dtoa_r+0x6e2>
 800a59a:	f1ba 0f0e 	cmp.w	sl, #14
 800a59e:	f300 814c 	bgt.w	800a83a <_dtoa_r+0x6e2>
 800a5a2:	4b6a      	ldr	r3, [pc, #424]	; (800a74c <_dtoa_r+0x5f4>)
 800a5a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a5a8:	ed93 7b00 	vldr	d7, [r3]
 800a5ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a5b4:	f280 80d8 	bge.w	800a768 <_dtoa_r+0x610>
 800a5b8:	f1b9 0f00 	cmp.w	r9, #0
 800a5bc:	f300 80d4 	bgt.w	800a768 <_dtoa_r+0x610>
 800a5c0:	f040 825e 	bne.w	800aa80 <_dtoa_r+0x928>
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	4b66      	ldr	r3, [pc, #408]	; (800a760 <_dtoa_r+0x608>)
 800a5c8:	ec51 0b17 	vmov	r0, r1, d7
 800a5cc:	f7f6 f834 	bl	8000638 <__aeabi_dmul>
 800a5d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5d4:	f7f6 fab6 	bl	8000b44 <__aeabi_dcmpge>
 800a5d8:	464f      	mov	r7, r9
 800a5da:	464e      	mov	r6, r9
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	f040 8234 	bne.w	800aa4a <_dtoa_r+0x8f2>
 800a5e2:	2331      	movs	r3, #49	; 0x31
 800a5e4:	f10b 0501 	add.w	r5, fp, #1
 800a5e8:	f88b 3000 	strb.w	r3, [fp]
 800a5ec:	f10a 0a01 	add.w	sl, sl, #1
 800a5f0:	e22f      	b.n	800aa52 <_dtoa_r+0x8fa>
 800a5f2:	07f2      	lsls	r2, r6, #31
 800a5f4:	d505      	bpl.n	800a602 <_dtoa_r+0x4aa>
 800a5f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5fa:	f7f6 f81d 	bl	8000638 <__aeabi_dmul>
 800a5fe:	3501      	adds	r5, #1
 800a600:	2301      	movs	r3, #1
 800a602:	1076      	asrs	r6, r6, #1
 800a604:	3708      	adds	r7, #8
 800a606:	e772      	b.n	800a4ee <_dtoa_r+0x396>
 800a608:	2502      	movs	r5, #2
 800a60a:	e774      	b.n	800a4f6 <_dtoa_r+0x39e>
 800a60c:	f8cd a020 	str.w	sl, [sp, #32]
 800a610:	464f      	mov	r7, r9
 800a612:	e791      	b.n	800a538 <_dtoa_r+0x3e0>
 800a614:	4b4d      	ldr	r3, [pc, #308]	; (800a74c <_dtoa_r+0x5f4>)
 800a616:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a61a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a61e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a620:	2b00      	cmp	r3, #0
 800a622:	d047      	beq.n	800a6b4 <_dtoa_r+0x55c>
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	2000      	movs	r0, #0
 800a62a:	494e      	ldr	r1, [pc, #312]	; (800a764 <_dtoa_r+0x60c>)
 800a62c:	f7f6 f92e 	bl	800088c <__aeabi_ddiv>
 800a630:	462a      	mov	r2, r5
 800a632:	4633      	mov	r3, r6
 800a634:	f7f5 fe48 	bl	80002c8 <__aeabi_dsub>
 800a638:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a63c:	465d      	mov	r5, fp
 800a63e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a642:	f7f6 faa9 	bl	8000b98 <__aeabi_d2iz>
 800a646:	4606      	mov	r6, r0
 800a648:	f7f5 ff8c 	bl	8000564 <__aeabi_i2d>
 800a64c:	4602      	mov	r2, r0
 800a64e:	460b      	mov	r3, r1
 800a650:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a654:	f7f5 fe38 	bl	80002c8 <__aeabi_dsub>
 800a658:	3630      	adds	r6, #48	; 0x30
 800a65a:	f805 6b01 	strb.w	r6, [r5], #1
 800a65e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a662:	e9cd 0100 	strd	r0, r1, [sp]
 800a666:	f7f6 fa59 	bl	8000b1c <__aeabi_dcmplt>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	d163      	bne.n	800a736 <_dtoa_r+0x5de>
 800a66e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a672:	2000      	movs	r0, #0
 800a674:	4937      	ldr	r1, [pc, #220]	; (800a754 <_dtoa_r+0x5fc>)
 800a676:	f7f5 fe27 	bl	80002c8 <__aeabi_dsub>
 800a67a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a67e:	f7f6 fa4d 	bl	8000b1c <__aeabi_dcmplt>
 800a682:	2800      	cmp	r0, #0
 800a684:	f040 80b7 	bne.w	800a7f6 <_dtoa_r+0x69e>
 800a688:	eba5 030b 	sub.w	r3, r5, fp
 800a68c:	429f      	cmp	r7, r3
 800a68e:	f77f af7c 	ble.w	800a58a <_dtoa_r+0x432>
 800a692:	2200      	movs	r2, #0
 800a694:	4b30      	ldr	r3, [pc, #192]	; (800a758 <_dtoa_r+0x600>)
 800a696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a69a:	f7f5 ffcd 	bl	8000638 <__aeabi_dmul>
 800a69e:	2200      	movs	r2, #0
 800a6a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a6a4:	4b2c      	ldr	r3, [pc, #176]	; (800a758 <_dtoa_r+0x600>)
 800a6a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6aa:	f7f5 ffc5 	bl	8000638 <__aeabi_dmul>
 800a6ae:	e9cd 0100 	strd	r0, r1, [sp]
 800a6b2:	e7c4      	b.n	800a63e <_dtoa_r+0x4e6>
 800a6b4:	462a      	mov	r2, r5
 800a6b6:	4633      	mov	r3, r6
 800a6b8:	f7f5 ffbe 	bl	8000638 <__aeabi_dmul>
 800a6bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a6c0:	eb0b 0507 	add.w	r5, fp, r7
 800a6c4:	465e      	mov	r6, fp
 800a6c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6ca:	f7f6 fa65 	bl	8000b98 <__aeabi_d2iz>
 800a6ce:	4607      	mov	r7, r0
 800a6d0:	f7f5 ff48 	bl	8000564 <__aeabi_i2d>
 800a6d4:	3730      	adds	r7, #48	; 0x30
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6de:	f7f5 fdf3 	bl	80002c8 <__aeabi_dsub>
 800a6e2:	f806 7b01 	strb.w	r7, [r6], #1
 800a6e6:	42ae      	cmp	r6, r5
 800a6e8:	e9cd 0100 	strd	r0, r1, [sp]
 800a6ec:	f04f 0200 	mov.w	r2, #0
 800a6f0:	d126      	bne.n	800a740 <_dtoa_r+0x5e8>
 800a6f2:	4b1c      	ldr	r3, [pc, #112]	; (800a764 <_dtoa_r+0x60c>)
 800a6f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6f8:	f7f5 fde8 	bl	80002cc <__adddf3>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a704:	f7f6 fa28 	bl	8000b58 <__aeabi_dcmpgt>
 800a708:	2800      	cmp	r0, #0
 800a70a:	d174      	bne.n	800a7f6 <_dtoa_r+0x69e>
 800a70c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a710:	2000      	movs	r0, #0
 800a712:	4914      	ldr	r1, [pc, #80]	; (800a764 <_dtoa_r+0x60c>)
 800a714:	f7f5 fdd8 	bl	80002c8 <__aeabi_dsub>
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a720:	f7f6 f9fc 	bl	8000b1c <__aeabi_dcmplt>
 800a724:	2800      	cmp	r0, #0
 800a726:	f43f af30 	beq.w	800a58a <_dtoa_r+0x432>
 800a72a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a72e:	2b30      	cmp	r3, #48	; 0x30
 800a730:	f105 32ff 	add.w	r2, r5, #4294967295
 800a734:	d002      	beq.n	800a73c <_dtoa_r+0x5e4>
 800a736:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a73a:	e04a      	b.n	800a7d2 <_dtoa_r+0x67a>
 800a73c:	4615      	mov	r5, r2
 800a73e:	e7f4      	b.n	800a72a <_dtoa_r+0x5d2>
 800a740:	4b05      	ldr	r3, [pc, #20]	; (800a758 <_dtoa_r+0x600>)
 800a742:	f7f5 ff79 	bl	8000638 <__aeabi_dmul>
 800a746:	e9cd 0100 	strd	r0, r1, [sp]
 800a74a:	e7bc      	b.n	800a6c6 <_dtoa_r+0x56e>
 800a74c:	0800c190 	.word	0x0800c190
 800a750:	0800c168 	.word	0x0800c168
 800a754:	3ff00000 	.word	0x3ff00000
 800a758:	40240000 	.word	0x40240000
 800a75c:	401c0000 	.word	0x401c0000
 800a760:	40140000 	.word	0x40140000
 800a764:	3fe00000 	.word	0x3fe00000
 800a768:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a76c:	465d      	mov	r5, fp
 800a76e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a772:	4630      	mov	r0, r6
 800a774:	4639      	mov	r1, r7
 800a776:	f7f6 f889 	bl	800088c <__aeabi_ddiv>
 800a77a:	f7f6 fa0d 	bl	8000b98 <__aeabi_d2iz>
 800a77e:	4680      	mov	r8, r0
 800a780:	f7f5 fef0 	bl	8000564 <__aeabi_i2d>
 800a784:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a788:	f7f5 ff56 	bl	8000638 <__aeabi_dmul>
 800a78c:	4602      	mov	r2, r0
 800a78e:	460b      	mov	r3, r1
 800a790:	4630      	mov	r0, r6
 800a792:	4639      	mov	r1, r7
 800a794:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a798:	f7f5 fd96 	bl	80002c8 <__aeabi_dsub>
 800a79c:	f805 6b01 	strb.w	r6, [r5], #1
 800a7a0:	eba5 060b 	sub.w	r6, r5, fp
 800a7a4:	45b1      	cmp	r9, r6
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	d139      	bne.n	800a820 <_dtoa_r+0x6c8>
 800a7ac:	f7f5 fd8e 	bl	80002cc <__adddf3>
 800a7b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7b4:	4606      	mov	r6, r0
 800a7b6:	460f      	mov	r7, r1
 800a7b8:	f7f6 f9ce 	bl	8000b58 <__aeabi_dcmpgt>
 800a7bc:	b9c8      	cbnz	r0, 800a7f2 <_dtoa_r+0x69a>
 800a7be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	4639      	mov	r1, r7
 800a7c6:	f7f6 f99f 	bl	8000b08 <__aeabi_dcmpeq>
 800a7ca:	b110      	cbz	r0, 800a7d2 <_dtoa_r+0x67a>
 800a7cc:	f018 0f01 	tst.w	r8, #1
 800a7d0:	d10f      	bne.n	800a7f2 <_dtoa_r+0x69a>
 800a7d2:	9904      	ldr	r1, [sp, #16]
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f000 fe0a 	bl	800b3ee <_Bfree>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7de:	702b      	strb	r3, [r5, #0]
 800a7e0:	f10a 0301 	add.w	r3, sl, #1
 800a7e4:	6013      	str	r3, [r2, #0]
 800a7e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 8241 	beq.w	800ac70 <_dtoa_r+0xb18>
 800a7ee:	601d      	str	r5, [r3, #0]
 800a7f0:	e23e      	b.n	800ac70 <_dtoa_r+0xb18>
 800a7f2:	f8cd a020 	str.w	sl, [sp, #32]
 800a7f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a7fa:	2a39      	cmp	r2, #57	; 0x39
 800a7fc:	f105 33ff 	add.w	r3, r5, #4294967295
 800a800:	d108      	bne.n	800a814 <_dtoa_r+0x6bc>
 800a802:	459b      	cmp	fp, r3
 800a804:	d10a      	bne.n	800a81c <_dtoa_r+0x6c4>
 800a806:	9b08      	ldr	r3, [sp, #32]
 800a808:	3301      	adds	r3, #1
 800a80a:	9308      	str	r3, [sp, #32]
 800a80c:	2330      	movs	r3, #48	; 0x30
 800a80e:	f88b 3000 	strb.w	r3, [fp]
 800a812:	465b      	mov	r3, fp
 800a814:	781a      	ldrb	r2, [r3, #0]
 800a816:	3201      	adds	r2, #1
 800a818:	701a      	strb	r2, [r3, #0]
 800a81a:	e78c      	b.n	800a736 <_dtoa_r+0x5de>
 800a81c:	461d      	mov	r5, r3
 800a81e:	e7ea      	b.n	800a7f6 <_dtoa_r+0x69e>
 800a820:	2200      	movs	r2, #0
 800a822:	4b9b      	ldr	r3, [pc, #620]	; (800aa90 <_dtoa_r+0x938>)
 800a824:	f7f5 ff08 	bl	8000638 <__aeabi_dmul>
 800a828:	2200      	movs	r2, #0
 800a82a:	2300      	movs	r3, #0
 800a82c:	4606      	mov	r6, r0
 800a82e:	460f      	mov	r7, r1
 800a830:	f7f6 f96a 	bl	8000b08 <__aeabi_dcmpeq>
 800a834:	2800      	cmp	r0, #0
 800a836:	d09a      	beq.n	800a76e <_dtoa_r+0x616>
 800a838:	e7cb      	b.n	800a7d2 <_dtoa_r+0x67a>
 800a83a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a83c:	2a00      	cmp	r2, #0
 800a83e:	f000 808b 	beq.w	800a958 <_dtoa_r+0x800>
 800a842:	9a06      	ldr	r2, [sp, #24]
 800a844:	2a01      	cmp	r2, #1
 800a846:	dc6e      	bgt.n	800a926 <_dtoa_r+0x7ce>
 800a848:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a84a:	2a00      	cmp	r2, #0
 800a84c:	d067      	beq.n	800a91e <_dtoa_r+0x7c6>
 800a84e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a852:	9f07      	ldr	r7, [sp, #28]
 800a854:	9d05      	ldr	r5, [sp, #20]
 800a856:	9a05      	ldr	r2, [sp, #20]
 800a858:	2101      	movs	r1, #1
 800a85a:	441a      	add	r2, r3
 800a85c:	4620      	mov	r0, r4
 800a85e:	9205      	str	r2, [sp, #20]
 800a860:	4498      	add	r8, r3
 800a862:	f000 fea2 	bl	800b5aa <__i2b>
 800a866:	4606      	mov	r6, r0
 800a868:	2d00      	cmp	r5, #0
 800a86a:	dd0c      	ble.n	800a886 <_dtoa_r+0x72e>
 800a86c:	f1b8 0f00 	cmp.w	r8, #0
 800a870:	dd09      	ble.n	800a886 <_dtoa_r+0x72e>
 800a872:	4545      	cmp	r5, r8
 800a874:	9a05      	ldr	r2, [sp, #20]
 800a876:	462b      	mov	r3, r5
 800a878:	bfa8      	it	ge
 800a87a:	4643      	movge	r3, r8
 800a87c:	1ad2      	subs	r2, r2, r3
 800a87e:	9205      	str	r2, [sp, #20]
 800a880:	1aed      	subs	r5, r5, r3
 800a882:	eba8 0803 	sub.w	r8, r8, r3
 800a886:	9b07      	ldr	r3, [sp, #28]
 800a888:	b1eb      	cbz	r3, 800a8c6 <_dtoa_r+0x76e>
 800a88a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d067      	beq.n	800a960 <_dtoa_r+0x808>
 800a890:	b18f      	cbz	r7, 800a8b6 <_dtoa_r+0x75e>
 800a892:	4631      	mov	r1, r6
 800a894:	463a      	mov	r2, r7
 800a896:	4620      	mov	r0, r4
 800a898:	f000 ff26 	bl	800b6e8 <__pow5mult>
 800a89c:	9a04      	ldr	r2, [sp, #16]
 800a89e:	4601      	mov	r1, r0
 800a8a0:	4606      	mov	r6, r0
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f000 fe8a 	bl	800b5bc <__multiply>
 800a8a8:	9904      	ldr	r1, [sp, #16]
 800a8aa:	9008      	str	r0, [sp, #32]
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f000 fd9e 	bl	800b3ee <_Bfree>
 800a8b2:	9b08      	ldr	r3, [sp, #32]
 800a8b4:	9304      	str	r3, [sp, #16]
 800a8b6:	9b07      	ldr	r3, [sp, #28]
 800a8b8:	1bda      	subs	r2, r3, r7
 800a8ba:	d004      	beq.n	800a8c6 <_dtoa_r+0x76e>
 800a8bc:	9904      	ldr	r1, [sp, #16]
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f000 ff12 	bl	800b6e8 <__pow5mult>
 800a8c4:	9004      	str	r0, [sp, #16]
 800a8c6:	2101      	movs	r1, #1
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	f000 fe6e 	bl	800b5aa <__i2b>
 800a8ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8d0:	4607      	mov	r7, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	f000 81d0 	beq.w	800ac78 <_dtoa_r+0xb20>
 800a8d8:	461a      	mov	r2, r3
 800a8da:	4601      	mov	r1, r0
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f000 ff03 	bl	800b6e8 <__pow5mult>
 800a8e2:	9b06      	ldr	r3, [sp, #24]
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	4607      	mov	r7, r0
 800a8e8:	dc40      	bgt.n	800a96c <_dtoa_r+0x814>
 800a8ea:	9b00      	ldr	r3, [sp, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d139      	bne.n	800a964 <_dtoa_r+0x80c>
 800a8f0:	9b01      	ldr	r3, [sp, #4]
 800a8f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d136      	bne.n	800a968 <_dtoa_r+0x810>
 800a8fa:	9b01      	ldr	r3, [sp, #4]
 800a8fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a900:	0d1b      	lsrs	r3, r3, #20
 800a902:	051b      	lsls	r3, r3, #20
 800a904:	b12b      	cbz	r3, 800a912 <_dtoa_r+0x7ba>
 800a906:	9b05      	ldr	r3, [sp, #20]
 800a908:	3301      	adds	r3, #1
 800a90a:	9305      	str	r3, [sp, #20]
 800a90c:	f108 0801 	add.w	r8, r8, #1
 800a910:	2301      	movs	r3, #1
 800a912:	9307      	str	r3, [sp, #28]
 800a914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a916:	2b00      	cmp	r3, #0
 800a918:	d12a      	bne.n	800a970 <_dtoa_r+0x818>
 800a91a:	2001      	movs	r0, #1
 800a91c:	e030      	b.n	800a980 <_dtoa_r+0x828>
 800a91e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a920:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a924:	e795      	b.n	800a852 <_dtoa_r+0x6fa>
 800a926:	9b07      	ldr	r3, [sp, #28]
 800a928:	f109 37ff 	add.w	r7, r9, #4294967295
 800a92c:	42bb      	cmp	r3, r7
 800a92e:	bfbf      	itttt	lt
 800a930:	9b07      	ldrlt	r3, [sp, #28]
 800a932:	9707      	strlt	r7, [sp, #28]
 800a934:	1afa      	sublt	r2, r7, r3
 800a936:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a938:	bfbb      	ittet	lt
 800a93a:	189b      	addlt	r3, r3, r2
 800a93c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a93e:	1bdf      	subge	r7, r3, r7
 800a940:	2700      	movlt	r7, #0
 800a942:	f1b9 0f00 	cmp.w	r9, #0
 800a946:	bfb5      	itete	lt
 800a948:	9b05      	ldrlt	r3, [sp, #20]
 800a94a:	9d05      	ldrge	r5, [sp, #20]
 800a94c:	eba3 0509 	sublt.w	r5, r3, r9
 800a950:	464b      	movge	r3, r9
 800a952:	bfb8      	it	lt
 800a954:	2300      	movlt	r3, #0
 800a956:	e77e      	b.n	800a856 <_dtoa_r+0x6fe>
 800a958:	9f07      	ldr	r7, [sp, #28]
 800a95a:	9d05      	ldr	r5, [sp, #20]
 800a95c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a95e:	e783      	b.n	800a868 <_dtoa_r+0x710>
 800a960:	9a07      	ldr	r2, [sp, #28]
 800a962:	e7ab      	b.n	800a8bc <_dtoa_r+0x764>
 800a964:	2300      	movs	r3, #0
 800a966:	e7d4      	b.n	800a912 <_dtoa_r+0x7ba>
 800a968:	9b00      	ldr	r3, [sp, #0]
 800a96a:	e7d2      	b.n	800a912 <_dtoa_r+0x7ba>
 800a96c:	2300      	movs	r3, #0
 800a96e:	9307      	str	r3, [sp, #28]
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a976:	6918      	ldr	r0, [r3, #16]
 800a978:	f000 fdc9 	bl	800b50e <__hi0bits>
 800a97c:	f1c0 0020 	rsb	r0, r0, #32
 800a980:	4440      	add	r0, r8
 800a982:	f010 001f 	ands.w	r0, r0, #31
 800a986:	d047      	beq.n	800aa18 <_dtoa_r+0x8c0>
 800a988:	f1c0 0320 	rsb	r3, r0, #32
 800a98c:	2b04      	cmp	r3, #4
 800a98e:	dd3b      	ble.n	800aa08 <_dtoa_r+0x8b0>
 800a990:	9b05      	ldr	r3, [sp, #20]
 800a992:	f1c0 001c 	rsb	r0, r0, #28
 800a996:	4403      	add	r3, r0
 800a998:	9305      	str	r3, [sp, #20]
 800a99a:	4405      	add	r5, r0
 800a99c:	4480      	add	r8, r0
 800a99e:	9b05      	ldr	r3, [sp, #20]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	dd05      	ble.n	800a9b0 <_dtoa_r+0x858>
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	9904      	ldr	r1, [sp, #16]
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f000 feeb 	bl	800b784 <__lshift>
 800a9ae:	9004      	str	r0, [sp, #16]
 800a9b0:	f1b8 0f00 	cmp.w	r8, #0
 800a9b4:	dd05      	ble.n	800a9c2 <_dtoa_r+0x86a>
 800a9b6:	4639      	mov	r1, r7
 800a9b8:	4642      	mov	r2, r8
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f000 fee2 	bl	800b784 <__lshift>
 800a9c0:	4607      	mov	r7, r0
 800a9c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9c4:	b353      	cbz	r3, 800aa1c <_dtoa_r+0x8c4>
 800a9c6:	4639      	mov	r1, r7
 800a9c8:	9804      	ldr	r0, [sp, #16]
 800a9ca:	f000 ff2f 	bl	800b82c <__mcmp>
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	da24      	bge.n	800aa1c <_dtoa_r+0x8c4>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	220a      	movs	r2, #10
 800a9d6:	9904      	ldr	r1, [sp, #16]
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f000 fd1f 	bl	800b41c <__multadd>
 800a9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9e0:	9004      	str	r0, [sp, #16]
 800a9e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f000 814d 	beq.w	800ac86 <_dtoa_r+0xb2e>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	4631      	mov	r1, r6
 800a9f0:	220a      	movs	r2, #10
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f000 fd12 	bl	800b41c <__multadd>
 800a9f8:	9b02      	ldr	r3, [sp, #8]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	4606      	mov	r6, r0
 800a9fe:	dc4f      	bgt.n	800aaa0 <_dtoa_r+0x948>
 800aa00:	9b06      	ldr	r3, [sp, #24]
 800aa02:	2b02      	cmp	r3, #2
 800aa04:	dd4c      	ble.n	800aaa0 <_dtoa_r+0x948>
 800aa06:	e011      	b.n	800aa2c <_dtoa_r+0x8d4>
 800aa08:	d0c9      	beq.n	800a99e <_dtoa_r+0x846>
 800aa0a:	9a05      	ldr	r2, [sp, #20]
 800aa0c:	331c      	adds	r3, #28
 800aa0e:	441a      	add	r2, r3
 800aa10:	9205      	str	r2, [sp, #20]
 800aa12:	441d      	add	r5, r3
 800aa14:	4498      	add	r8, r3
 800aa16:	e7c2      	b.n	800a99e <_dtoa_r+0x846>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	e7f6      	b.n	800aa0a <_dtoa_r+0x8b2>
 800aa1c:	f1b9 0f00 	cmp.w	r9, #0
 800aa20:	dc38      	bgt.n	800aa94 <_dtoa_r+0x93c>
 800aa22:	9b06      	ldr	r3, [sp, #24]
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	dd35      	ble.n	800aa94 <_dtoa_r+0x93c>
 800aa28:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa2c:	9b02      	ldr	r3, [sp, #8]
 800aa2e:	b963      	cbnz	r3, 800aa4a <_dtoa_r+0x8f2>
 800aa30:	4639      	mov	r1, r7
 800aa32:	2205      	movs	r2, #5
 800aa34:	4620      	mov	r0, r4
 800aa36:	f000 fcf1 	bl	800b41c <__multadd>
 800aa3a:	4601      	mov	r1, r0
 800aa3c:	4607      	mov	r7, r0
 800aa3e:	9804      	ldr	r0, [sp, #16]
 800aa40:	f000 fef4 	bl	800b82c <__mcmp>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	f73f adcc 	bgt.w	800a5e2 <_dtoa_r+0x48a>
 800aa4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa4c:	465d      	mov	r5, fp
 800aa4e:	ea6f 0a03 	mvn.w	sl, r3
 800aa52:	f04f 0900 	mov.w	r9, #0
 800aa56:	4639      	mov	r1, r7
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f000 fcc8 	bl	800b3ee <_Bfree>
 800aa5e:	2e00      	cmp	r6, #0
 800aa60:	f43f aeb7 	beq.w	800a7d2 <_dtoa_r+0x67a>
 800aa64:	f1b9 0f00 	cmp.w	r9, #0
 800aa68:	d005      	beq.n	800aa76 <_dtoa_r+0x91e>
 800aa6a:	45b1      	cmp	r9, r6
 800aa6c:	d003      	beq.n	800aa76 <_dtoa_r+0x91e>
 800aa6e:	4649      	mov	r1, r9
 800aa70:	4620      	mov	r0, r4
 800aa72:	f000 fcbc 	bl	800b3ee <_Bfree>
 800aa76:	4631      	mov	r1, r6
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f000 fcb8 	bl	800b3ee <_Bfree>
 800aa7e:	e6a8      	b.n	800a7d2 <_dtoa_r+0x67a>
 800aa80:	2700      	movs	r7, #0
 800aa82:	463e      	mov	r6, r7
 800aa84:	e7e1      	b.n	800aa4a <_dtoa_r+0x8f2>
 800aa86:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aa8a:	463e      	mov	r6, r7
 800aa8c:	e5a9      	b.n	800a5e2 <_dtoa_r+0x48a>
 800aa8e:	bf00      	nop
 800aa90:	40240000 	.word	0x40240000
 800aa94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa96:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f000 80fa 	beq.w	800ac94 <_dtoa_r+0xb3c>
 800aaa0:	2d00      	cmp	r5, #0
 800aaa2:	dd05      	ble.n	800aab0 <_dtoa_r+0x958>
 800aaa4:	4631      	mov	r1, r6
 800aaa6:	462a      	mov	r2, r5
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f000 fe6b 	bl	800b784 <__lshift>
 800aaae:	4606      	mov	r6, r0
 800aab0:	9b07      	ldr	r3, [sp, #28]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d04c      	beq.n	800ab50 <_dtoa_r+0x9f8>
 800aab6:	6871      	ldr	r1, [r6, #4]
 800aab8:	4620      	mov	r0, r4
 800aaba:	f000 fc64 	bl	800b386 <_Balloc>
 800aabe:	6932      	ldr	r2, [r6, #16]
 800aac0:	3202      	adds	r2, #2
 800aac2:	4605      	mov	r5, r0
 800aac4:	0092      	lsls	r2, r2, #2
 800aac6:	f106 010c 	add.w	r1, r6, #12
 800aaca:	300c      	adds	r0, #12
 800aacc:	f000 fc50 	bl	800b370 <memcpy>
 800aad0:	2201      	movs	r2, #1
 800aad2:	4629      	mov	r1, r5
 800aad4:	4620      	mov	r0, r4
 800aad6:	f000 fe55 	bl	800b784 <__lshift>
 800aada:	9b00      	ldr	r3, [sp, #0]
 800aadc:	f8cd b014 	str.w	fp, [sp, #20]
 800aae0:	f003 0301 	and.w	r3, r3, #1
 800aae4:	46b1      	mov	r9, r6
 800aae6:	9307      	str	r3, [sp, #28]
 800aae8:	4606      	mov	r6, r0
 800aaea:	4639      	mov	r1, r7
 800aaec:	9804      	ldr	r0, [sp, #16]
 800aaee:	f7ff faa5 	bl	800a03c <quorem>
 800aaf2:	4649      	mov	r1, r9
 800aaf4:	4605      	mov	r5, r0
 800aaf6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800aafa:	9804      	ldr	r0, [sp, #16]
 800aafc:	f000 fe96 	bl	800b82c <__mcmp>
 800ab00:	4632      	mov	r2, r6
 800ab02:	9000      	str	r0, [sp, #0]
 800ab04:	4639      	mov	r1, r7
 800ab06:	4620      	mov	r0, r4
 800ab08:	f000 feaa 	bl	800b860 <__mdiff>
 800ab0c:	68c3      	ldr	r3, [r0, #12]
 800ab0e:	4602      	mov	r2, r0
 800ab10:	bb03      	cbnz	r3, 800ab54 <_dtoa_r+0x9fc>
 800ab12:	4601      	mov	r1, r0
 800ab14:	9008      	str	r0, [sp, #32]
 800ab16:	9804      	ldr	r0, [sp, #16]
 800ab18:	f000 fe88 	bl	800b82c <__mcmp>
 800ab1c:	9a08      	ldr	r2, [sp, #32]
 800ab1e:	4603      	mov	r3, r0
 800ab20:	4611      	mov	r1, r2
 800ab22:	4620      	mov	r0, r4
 800ab24:	9308      	str	r3, [sp, #32]
 800ab26:	f000 fc62 	bl	800b3ee <_Bfree>
 800ab2a:	9b08      	ldr	r3, [sp, #32]
 800ab2c:	b9a3      	cbnz	r3, 800ab58 <_dtoa_r+0xa00>
 800ab2e:	9a06      	ldr	r2, [sp, #24]
 800ab30:	b992      	cbnz	r2, 800ab58 <_dtoa_r+0xa00>
 800ab32:	9a07      	ldr	r2, [sp, #28]
 800ab34:	b982      	cbnz	r2, 800ab58 <_dtoa_r+0xa00>
 800ab36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ab3a:	d029      	beq.n	800ab90 <_dtoa_r+0xa38>
 800ab3c:	9b00      	ldr	r3, [sp, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	dd01      	ble.n	800ab46 <_dtoa_r+0x9ee>
 800ab42:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ab46:	9b05      	ldr	r3, [sp, #20]
 800ab48:	1c5d      	adds	r5, r3, #1
 800ab4a:	f883 8000 	strb.w	r8, [r3]
 800ab4e:	e782      	b.n	800aa56 <_dtoa_r+0x8fe>
 800ab50:	4630      	mov	r0, r6
 800ab52:	e7c2      	b.n	800aada <_dtoa_r+0x982>
 800ab54:	2301      	movs	r3, #1
 800ab56:	e7e3      	b.n	800ab20 <_dtoa_r+0x9c8>
 800ab58:	9a00      	ldr	r2, [sp, #0]
 800ab5a:	2a00      	cmp	r2, #0
 800ab5c:	db04      	blt.n	800ab68 <_dtoa_r+0xa10>
 800ab5e:	d125      	bne.n	800abac <_dtoa_r+0xa54>
 800ab60:	9a06      	ldr	r2, [sp, #24]
 800ab62:	bb1a      	cbnz	r2, 800abac <_dtoa_r+0xa54>
 800ab64:	9a07      	ldr	r2, [sp, #28]
 800ab66:	bb0a      	cbnz	r2, 800abac <_dtoa_r+0xa54>
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	ddec      	ble.n	800ab46 <_dtoa_r+0x9ee>
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	9904      	ldr	r1, [sp, #16]
 800ab70:	4620      	mov	r0, r4
 800ab72:	f000 fe07 	bl	800b784 <__lshift>
 800ab76:	4639      	mov	r1, r7
 800ab78:	9004      	str	r0, [sp, #16]
 800ab7a:	f000 fe57 	bl	800b82c <__mcmp>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	dc03      	bgt.n	800ab8a <_dtoa_r+0xa32>
 800ab82:	d1e0      	bne.n	800ab46 <_dtoa_r+0x9ee>
 800ab84:	f018 0f01 	tst.w	r8, #1
 800ab88:	d0dd      	beq.n	800ab46 <_dtoa_r+0x9ee>
 800ab8a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ab8e:	d1d8      	bne.n	800ab42 <_dtoa_r+0x9ea>
 800ab90:	9b05      	ldr	r3, [sp, #20]
 800ab92:	9a05      	ldr	r2, [sp, #20]
 800ab94:	1c5d      	adds	r5, r3, #1
 800ab96:	2339      	movs	r3, #57	; 0x39
 800ab98:	7013      	strb	r3, [r2, #0]
 800ab9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab9e:	2b39      	cmp	r3, #57	; 0x39
 800aba0:	f105 32ff 	add.w	r2, r5, #4294967295
 800aba4:	d04f      	beq.n	800ac46 <_dtoa_r+0xaee>
 800aba6:	3301      	adds	r3, #1
 800aba8:	7013      	strb	r3, [r2, #0]
 800abaa:	e754      	b.n	800aa56 <_dtoa_r+0x8fe>
 800abac:	9a05      	ldr	r2, [sp, #20]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f102 0501 	add.w	r5, r2, #1
 800abb4:	dd06      	ble.n	800abc4 <_dtoa_r+0xa6c>
 800abb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800abba:	d0e9      	beq.n	800ab90 <_dtoa_r+0xa38>
 800abbc:	f108 0801 	add.w	r8, r8, #1
 800abc0:	9b05      	ldr	r3, [sp, #20]
 800abc2:	e7c2      	b.n	800ab4a <_dtoa_r+0x9f2>
 800abc4:	9a02      	ldr	r2, [sp, #8]
 800abc6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800abca:	eba5 030b 	sub.w	r3, r5, fp
 800abce:	4293      	cmp	r3, r2
 800abd0:	d021      	beq.n	800ac16 <_dtoa_r+0xabe>
 800abd2:	2300      	movs	r3, #0
 800abd4:	220a      	movs	r2, #10
 800abd6:	9904      	ldr	r1, [sp, #16]
 800abd8:	4620      	mov	r0, r4
 800abda:	f000 fc1f 	bl	800b41c <__multadd>
 800abde:	45b1      	cmp	r9, r6
 800abe0:	9004      	str	r0, [sp, #16]
 800abe2:	f04f 0300 	mov.w	r3, #0
 800abe6:	f04f 020a 	mov.w	r2, #10
 800abea:	4649      	mov	r1, r9
 800abec:	4620      	mov	r0, r4
 800abee:	d105      	bne.n	800abfc <_dtoa_r+0xaa4>
 800abf0:	f000 fc14 	bl	800b41c <__multadd>
 800abf4:	4681      	mov	r9, r0
 800abf6:	4606      	mov	r6, r0
 800abf8:	9505      	str	r5, [sp, #20]
 800abfa:	e776      	b.n	800aaea <_dtoa_r+0x992>
 800abfc:	f000 fc0e 	bl	800b41c <__multadd>
 800ac00:	4631      	mov	r1, r6
 800ac02:	4681      	mov	r9, r0
 800ac04:	2300      	movs	r3, #0
 800ac06:	220a      	movs	r2, #10
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f000 fc07 	bl	800b41c <__multadd>
 800ac0e:	4606      	mov	r6, r0
 800ac10:	e7f2      	b.n	800abf8 <_dtoa_r+0xaa0>
 800ac12:	f04f 0900 	mov.w	r9, #0
 800ac16:	2201      	movs	r2, #1
 800ac18:	9904      	ldr	r1, [sp, #16]
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f000 fdb2 	bl	800b784 <__lshift>
 800ac20:	4639      	mov	r1, r7
 800ac22:	9004      	str	r0, [sp, #16]
 800ac24:	f000 fe02 	bl	800b82c <__mcmp>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	dcb6      	bgt.n	800ab9a <_dtoa_r+0xa42>
 800ac2c:	d102      	bne.n	800ac34 <_dtoa_r+0xadc>
 800ac2e:	f018 0f01 	tst.w	r8, #1
 800ac32:	d1b2      	bne.n	800ab9a <_dtoa_r+0xa42>
 800ac34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac38:	2b30      	cmp	r3, #48	; 0x30
 800ac3a:	f105 32ff 	add.w	r2, r5, #4294967295
 800ac3e:	f47f af0a 	bne.w	800aa56 <_dtoa_r+0x8fe>
 800ac42:	4615      	mov	r5, r2
 800ac44:	e7f6      	b.n	800ac34 <_dtoa_r+0xadc>
 800ac46:	4593      	cmp	fp, r2
 800ac48:	d105      	bne.n	800ac56 <_dtoa_r+0xafe>
 800ac4a:	2331      	movs	r3, #49	; 0x31
 800ac4c:	f10a 0a01 	add.w	sl, sl, #1
 800ac50:	f88b 3000 	strb.w	r3, [fp]
 800ac54:	e6ff      	b.n	800aa56 <_dtoa_r+0x8fe>
 800ac56:	4615      	mov	r5, r2
 800ac58:	e79f      	b.n	800ab9a <_dtoa_r+0xa42>
 800ac5a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800acc0 <_dtoa_r+0xb68>
 800ac5e:	e007      	b.n	800ac70 <_dtoa_r+0xb18>
 800ac60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac62:	f8df b060 	ldr.w	fp, [pc, #96]	; 800acc4 <_dtoa_r+0xb6c>
 800ac66:	b11b      	cbz	r3, 800ac70 <_dtoa_r+0xb18>
 800ac68:	f10b 0308 	add.w	r3, fp, #8
 800ac6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac6e:	6013      	str	r3, [r2, #0]
 800ac70:	4658      	mov	r0, fp
 800ac72:	b017      	add	sp, #92	; 0x5c
 800ac74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac78:	9b06      	ldr	r3, [sp, #24]
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	f77f ae35 	ble.w	800a8ea <_dtoa_r+0x792>
 800ac80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac82:	9307      	str	r3, [sp, #28]
 800ac84:	e649      	b.n	800a91a <_dtoa_r+0x7c2>
 800ac86:	9b02      	ldr	r3, [sp, #8]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	dc03      	bgt.n	800ac94 <_dtoa_r+0xb3c>
 800ac8c:	9b06      	ldr	r3, [sp, #24]
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	f73f aecc 	bgt.w	800aa2c <_dtoa_r+0x8d4>
 800ac94:	465d      	mov	r5, fp
 800ac96:	4639      	mov	r1, r7
 800ac98:	9804      	ldr	r0, [sp, #16]
 800ac9a:	f7ff f9cf 	bl	800a03c <quorem>
 800ac9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800aca2:	f805 8b01 	strb.w	r8, [r5], #1
 800aca6:	9a02      	ldr	r2, [sp, #8]
 800aca8:	eba5 030b 	sub.w	r3, r5, fp
 800acac:	429a      	cmp	r2, r3
 800acae:	ddb0      	ble.n	800ac12 <_dtoa_r+0xaba>
 800acb0:	2300      	movs	r3, #0
 800acb2:	220a      	movs	r2, #10
 800acb4:	9904      	ldr	r1, [sp, #16]
 800acb6:	4620      	mov	r0, r4
 800acb8:	f000 fbb0 	bl	800b41c <__multadd>
 800acbc:	9004      	str	r0, [sp, #16]
 800acbe:	e7ea      	b.n	800ac96 <_dtoa_r+0xb3e>
 800acc0:	0800c0d4 	.word	0x0800c0d4
 800acc4:	0800c150 	.word	0x0800c150

0800acc8 <rshift>:
 800acc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acca:	6906      	ldr	r6, [r0, #16]
 800accc:	114b      	asrs	r3, r1, #5
 800acce:	429e      	cmp	r6, r3
 800acd0:	f100 0414 	add.w	r4, r0, #20
 800acd4:	dd30      	ble.n	800ad38 <rshift+0x70>
 800acd6:	f011 011f 	ands.w	r1, r1, #31
 800acda:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800acde:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ace2:	d108      	bne.n	800acf6 <rshift+0x2e>
 800ace4:	4621      	mov	r1, r4
 800ace6:	42b2      	cmp	r2, r6
 800ace8:	460b      	mov	r3, r1
 800acea:	d211      	bcs.n	800ad10 <rshift+0x48>
 800acec:	f852 3b04 	ldr.w	r3, [r2], #4
 800acf0:	f841 3b04 	str.w	r3, [r1], #4
 800acf4:	e7f7      	b.n	800ace6 <rshift+0x1e>
 800acf6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800acfa:	f1c1 0c20 	rsb	ip, r1, #32
 800acfe:	40cd      	lsrs	r5, r1
 800ad00:	3204      	adds	r2, #4
 800ad02:	4623      	mov	r3, r4
 800ad04:	42b2      	cmp	r2, r6
 800ad06:	4617      	mov	r7, r2
 800ad08:	d30c      	bcc.n	800ad24 <rshift+0x5c>
 800ad0a:	601d      	str	r5, [r3, #0]
 800ad0c:	b105      	cbz	r5, 800ad10 <rshift+0x48>
 800ad0e:	3304      	adds	r3, #4
 800ad10:	1b1a      	subs	r2, r3, r4
 800ad12:	42a3      	cmp	r3, r4
 800ad14:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ad18:	bf08      	it	eq
 800ad1a:	2300      	moveq	r3, #0
 800ad1c:	6102      	str	r2, [r0, #16]
 800ad1e:	bf08      	it	eq
 800ad20:	6143      	streq	r3, [r0, #20]
 800ad22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad24:	683f      	ldr	r7, [r7, #0]
 800ad26:	fa07 f70c 	lsl.w	r7, r7, ip
 800ad2a:	433d      	orrs	r5, r7
 800ad2c:	f843 5b04 	str.w	r5, [r3], #4
 800ad30:	f852 5b04 	ldr.w	r5, [r2], #4
 800ad34:	40cd      	lsrs	r5, r1
 800ad36:	e7e5      	b.n	800ad04 <rshift+0x3c>
 800ad38:	4623      	mov	r3, r4
 800ad3a:	e7e9      	b.n	800ad10 <rshift+0x48>

0800ad3c <__hexdig_fun>:
 800ad3c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ad40:	2b09      	cmp	r3, #9
 800ad42:	d802      	bhi.n	800ad4a <__hexdig_fun+0xe>
 800ad44:	3820      	subs	r0, #32
 800ad46:	b2c0      	uxtb	r0, r0
 800ad48:	4770      	bx	lr
 800ad4a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ad4e:	2b05      	cmp	r3, #5
 800ad50:	d801      	bhi.n	800ad56 <__hexdig_fun+0x1a>
 800ad52:	3847      	subs	r0, #71	; 0x47
 800ad54:	e7f7      	b.n	800ad46 <__hexdig_fun+0xa>
 800ad56:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ad5a:	2b05      	cmp	r3, #5
 800ad5c:	d801      	bhi.n	800ad62 <__hexdig_fun+0x26>
 800ad5e:	3827      	subs	r0, #39	; 0x27
 800ad60:	e7f1      	b.n	800ad46 <__hexdig_fun+0xa>
 800ad62:	2000      	movs	r0, #0
 800ad64:	4770      	bx	lr

0800ad66 <__gethex>:
 800ad66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6a:	b08b      	sub	sp, #44	; 0x2c
 800ad6c:	468a      	mov	sl, r1
 800ad6e:	9002      	str	r0, [sp, #8]
 800ad70:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ad72:	9306      	str	r3, [sp, #24]
 800ad74:	4690      	mov	r8, r2
 800ad76:	f000 fad0 	bl	800b31a <__localeconv_l>
 800ad7a:	6803      	ldr	r3, [r0, #0]
 800ad7c:	9303      	str	r3, [sp, #12]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7f5 fa46 	bl	8000210 <strlen>
 800ad84:	9b03      	ldr	r3, [sp, #12]
 800ad86:	9001      	str	r0, [sp, #4]
 800ad88:	4403      	add	r3, r0
 800ad8a:	f04f 0b00 	mov.w	fp, #0
 800ad8e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ad92:	9307      	str	r3, [sp, #28]
 800ad94:	f8da 3000 	ldr.w	r3, [sl]
 800ad98:	3302      	adds	r3, #2
 800ad9a:	461f      	mov	r7, r3
 800ad9c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ada0:	2830      	cmp	r0, #48	; 0x30
 800ada2:	d06c      	beq.n	800ae7e <__gethex+0x118>
 800ada4:	f7ff ffca 	bl	800ad3c <__hexdig_fun>
 800ada8:	4604      	mov	r4, r0
 800adaa:	2800      	cmp	r0, #0
 800adac:	d16a      	bne.n	800ae84 <__gethex+0x11e>
 800adae:	9a01      	ldr	r2, [sp, #4]
 800adb0:	9903      	ldr	r1, [sp, #12]
 800adb2:	4638      	mov	r0, r7
 800adb4:	f001 f8fe 	bl	800bfb4 <strncmp>
 800adb8:	2800      	cmp	r0, #0
 800adba:	d166      	bne.n	800ae8a <__gethex+0x124>
 800adbc:	9b01      	ldr	r3, [sp, #4]
 800adbe:	5cf8      	ldrb	r0, [r7, r3]
 800adc0:	18fe      	adds	r6, r7, r3
 800adc2:	f7ff ffbb 	bl	800ad3c <__hexdig_fun>
 800adc6:	2800      	cmp	r0, #0
 800adc8:	d062      	beq.n	800ae90 <__gethex+0x12a>
 800adca:	4633      	mov	r3, r6
 800adcc:	7818      	ldrb	r0, [r3, #0]
 800adce:	2830      	cmp	r0, #48	; 0x30
 800add0:	461f      	mov	r7, r3
 800add2:	f103 0301 	add.w	r3, r3, #1
 800add6:	d0f9      	beq.n	800adcc <__gethex+0x66>
 800add8:	f7ff ffb0 	bl	800ad3c <__hexdig_fun>
 800addc:	fab0 f580 	clz	r5, r0
 800ade0:	096d      	lsrs	r5, r5, #5
 800ade2:	4634      	mov	r4, r6
 800ade4:	f04f 0b01 	mov.w	fp, #1
 800ade8:	463a      	mov	r2, r7
 800adea:	4616      	mov	r6, r2
 800adec:	3201      	adds	r2, #1
 800adee:	7830      	ldrb	r0, [r6, #0]
 800adf0:	f7ff ffa4 	bl	800ad3c <__hexdig_fun>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	d1f8      	bne.n	800adea <__gethex+0x84>
 800adf8:	9a01      	ldr	r2, [sp, #4]
 800adfa:	9903      	ldr	r1, [sp, #12]
 800adfc:	4630      	mov	r0, r6
 800adfe:	f001 f8d9 	bl	800bfb4 <strncmp>
 800ae02:	b950      	cbnz	r0, 800ae1a <__gethex+0xb4>
 800ae04:	b954      	cbnz	r4, 800ae1c <__gethex+0xb6>
 800ae06:	9b01      	ldr	r3, [sp, #4]
 800ae08:	18f4      	adds	r4, r6, r3
 800ae0a:	4622      	mov	r2, r4
 800ae0c:	4616      	mov	r6, r2
 800ae0e:	3201      	adds	r2, #1
 800ae10:	7830      	ldrb	r0, [r6, #0]
 800ae12:	f7ff ff93 	bl	800ad3c <__hexdig_fun>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d1f8      	bne.n	800ae0c <__gethex+0xa6>
 800ae1a:	b10c      	cbz	r4, 800ae20 <__gethex+0xba>
 800ae1c:	1ba4      	subs	r4, r4, r6
 800ae1e:	00a4      	lsls	r4, r4, #2
 800ae20:	7833      	ldrb	r3, [r6, #0]
 800ae22:	2b50      	cmp	r3, #80	; 0x50
 800ae24:	d001      	beq.n	800ae2a <__gethex+0xc4>
 800ae26:	2b70      	cmp	r3, #112	; 0x70
 800ae28:	d140      	bne.n	800aeac <__gethex+0x146>
 800ae2a:	7873      	ldrb	r3, [r6, #1]
 800ae2c:	2b2b      	cmp	r3, #43	; 0x2b
 800ae2e:	d031      	beq.n	800ae94 <__gethex+0x12e>
 800ae30:	2b2d      	cmp	r3, #45	; 0x2d
 800ae32:	d033      	beq.n	800ae9c <__gethex+0x136>
 800ae34:	1c71      	adds	r1, r6, #1
 800ae36:	f04f 0900 	mov.w	r9, #0
 800ae3a:	7808      	ldrb	r0, [r1, #0]
 800ae3c:	f7ff ff7e 	bl	800ad3c <__hexdig_fun>
 800ae40:	1e43      	subs	r3, r0, #1
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	2b18      	cmp	r3, #24
 800ae46:	d831      	bhi.n	800aeac <__gethex+0x146>
 800ae48:	f1a0 0210 	sub.w	r2, r0, #16
 800ae4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ae50:	f7ff ff74 	bl	800ad3c <__hexdig_fun>
 800ae54:	1e43      	subs	r3, r0, #1
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b18      	cmp	r3, #24
 800ae5a:	d922      	bls.n	800aea2 <__gethex+0x13c>
 800ae5c:	f1b9 0f00 	cmp.w	r9, #0
 800ae60:	d000      	beq.n	800ae64 <__gethex+0xfe>
 800ae62:	4252      	negs	r2, r2
 800ae64:	4414      	add	r4, r2
 800ae66:	f8ca 1000 	str.w	r1, [sl]
 800ae6a:	b30d      	cbz	r5, 800aeb0 <__gethex+0x14a>
 800ae6c:	f1bb 0f00 	cmp.w	fp, #0
 800ae70:	bf0c      	ite	eq
 800ae72:	2706      	moveq	r7, #6
 800ae74:	2700      	movne	r7, #0
 800ae76:	4638      	mov	r0, r7
 800ae78:	b00b      	add	sp, #44	; 0x2c
 800ae7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae7e:	f10b 0b01 	add.w	fp, fp, #1
 800ae82:	e78a      	b.n	800ad9a <__gethex+0x34>
 800ae84:	2500      	movs	r5, #0
 800ae86:	462c      	mov	r4, r5
 800ae88:	e7ae      	b.n	800ade8 <__gethex+0x82>
 800ae8a:	463e      	mov	r6, r7
 800ae8c:	2501      	movs	r5, #1
 800ae8e:	e7c7      	b.n	800ae20 <__gethex+0xba>
 800ae90:	4604      	mov	r4, r0
 800ae92:	e7fb      	b.n	800ae8c <__gethex+0x126>
 800ae94:	f04f 0900 	mov.w	r9, #0
 800ae98:	1cb1      	adds	r1, r6, #2
 800ae9a:	e7ce      	b.n	800ae3a <__gethex+0xd4>
 800ae9c:	f04f 0901 	mov.w	r9, #1
 800aea0:	e7fa      	b.n	800ae98 <__gethex+0x132>
 800aea2:	230a      	movs	r3, #10
 800aea4:	fb03 0202 	mla	r2, r3, r2, r0
 800aea8:	3a10      	subs	r2, #16
 800aeaa:	e7cf      	b.n	800ae4c <__gethex+0xe6>
 800aeac:	4631      	mov	r1, r6
 800aeae:	e7da      	b.n	800ae66 <__gethex+0x100>
 800aeb0:	1bf3      	subs	r3, r6, r7
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	4629      	mov	r1, r5
 800aeb6:	2b07      	cmp	r3, #7
 800aeb8:	dc49      	bgt.n	800af4e <__gethex+0x1e8>
 800aeba:	9802      	ldr	r0, [sp, #8]
 800aebc:	f000 fa63 	bl	800b386 <_Balloc>
 800aec0:	9b01      	ldr	r3, [sp, #4]
 800aec2:	f100 0914 	add.w	r9, r0, #20
 800aec6:	f04f 0b00 	mov.w	fp, #0
 800aeca:	f1c3 0301 	rsb	r3, r3, #1
 800aece:	4605      	mov	r5, r0
 800aed0:	f8cd 9010 	str.w	r9, [sp, #16]
 800aed4:	46da      	mov	sl, fp
 800aed6:	9308      	str	r3, [sp, #32]
 800aed8:	42b7      	cmp	r7, r6
 800aeda:	d33b      	bcc.n	800af54 <__gethex+0x1ee>
 800aedc:	9804      	ldr	r0, [sp, #16]
 800aede:	f840 ab04 	str.w	sl, [r0], #4
 800aee2:	eba0 0009 	sub.w	r0, r0, r9
 800aee6:	1080      	asrs	r0, r0, #2
 800aee8:	6128      	str	r0, [r5, #16]
 800aeea:	0147      	lsls	r7, r0, #5
 800aeec:	4650      	mov	r0, sl
 800aeee:	f000 fb0e 	bl	800b50e <__hi0bits>
 800aef2:	f8d8 6000 	ldr.w	r6, [r8]
 800aef6:	1a3f      	subs	r7, r7, r0
 800aef8:	42b7      	cmp	r7, r6
 800aefa:	dd64      	ble.n	800afc6 <__gethex+0x260>
 800aefc:	1bbf      	subs	r7, r7, r6
 800aefe:	4639      	mov	r1, r7
 800af00:	4628      	mov	r0, r5
 800af02:	f000 fe1d 	bl	800bb40 <__any_on>
 800af06:	4682      	mov	sl, r0
 800af08:	b178      	cbz	r0, 800af2a <__gethex+0x1c4>
 800af0a:	1e7b      	subs	r3, r7, #1
 800af0c:	1159      	asrs	r1, r3, #5
 800af0e:	f003 021f 	and.w	r2, r3, #31
 800af12:	f04f 0a01 	mov.w	sl, #1
 800af16:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800af1a:	fa0a f202 	lsl.w	r2, sl, r2
 800af1e:	420a      	tst	r2, r1
 800af20:	d003      	beq.n	800af2a <__gethex+0x1c4>
 800af22:	4553      	cmp	r3, sl
 800af24:	dc46      	bgt.n	800afb4 <__gethex+0x24e>
 800af26:	f04f 0a02 	mov.w	sl, #2
 800af2a:	4639      	mov	r1, r7
 800af2c:	4628      	mov	r0, r5
 800af2e:	f7ff fecb 	bl	800acc8 <rshift>
 800af32:	443c      	add	r4, r7
 800af34:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af38:	42a3      	cmp	r3, r4
 800af3a:	da52      	bge.n	800afe2 <__gethex+0x27c>
 800af3c:	4629      	mov	r1, r5
 800af3e:	9802      	ldr	r0, [sp, #8]
 800af40:	f000 fa55 	bl	800b3ee <_Bfree>
 800af44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800af46:	2300      	movs	r3, #0
 800af48:	6013      	str	r3, [r2, #0]
 800af4a:	27a3      	movs	r7, #163	; 0xa3
 800af4c:	e793      	b.n	800ae76 <__gethex+0x110>
 800af4e:	3101      	adds	r1, #1
 800af50:	105b      	asrs	r3, r3, #1
 800af52:	e7b0      	b.n	800aeb6 <__gethex+0x150>
 800af54:	1e73      	subs	r3, r6, #1
 800af56:	9305      	str	r3, [sp, #20]
 800af58:	9a07      	ldr	r2, [sp, #28]
 800af5a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800af5e:	4293      	cmp	r3, r2
 800af60:	d018      	beq.n	800af94 <__gethex+0x22e>
 800af62:	f1bb 0f20 	cmp.w	fp, #32
 800af66:	d107      	bne.n	800af78 <__gethex+0x212>
 800af68:	9b04      	ldr	r3, [sp, #16]
 800af6a:	f8c3 a000 	str.w	sl, [r3]
 800af6e:	3304      	adds	r3, #4
 800af70:	f04f 0a00 	mov.w	sl, #0
 800af74:	9304      	str	r3, [sp, #16]
 800af76:	46d3      	mov	fp, sl
 800af78:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800af7c:	f7ff fede 	bl	800ad3c <__hexdig_fun>
 800af80:	f000 000f 	and.w	r0, r0, #15
 800af84:	fa00 f00b 	lsl.w	r0, r0, fp
 800af88:	ea4a 0a00 	orr.w	sl, sl, r0
 800af8c:	f10b 0b04 	add.w	fp, fp, #4
 800af90:	9b05      	ldr	r3, [sp, #20]
 800af92:	e00d      	b.n	800afb0 <__gethex+0x24a>
 800af94:	9b05      	ldr	r3, [sp, #20]
 800af96:	9a08      	ldr	r2, [sp, #32]
 800af98:	4413      	add	r3, r2
 800af9a:	42bb      	cmp	r3, r7
 800af9c:	d3e1      	bcc.n	800af62 <__gethex+0x1fc>
 800af9e:	4618      	mov	r0, r3
 800afa0:	9a01      	ldr	r2, [sp, #4]
 800afa2:	9903      	ldr	r1, [sp, #12]
 800afa4:	9309      	str	r3, [sp, #36]	; 0x24
 800afa6:	f001 f805 	bl	800bfb4 <strncmp>
 800afaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afac:	2800      	cmp	r0, #0
 800afae:	d1d8      	bne.n	800af62 <__gethex+0x1fc>
 800afb0:	461e      	mov	r6, r3
 800afb2:	e791      	b.n	800aed8 <__gethex+0x172>
 800afb4:	1eb9      	subs	r1, r7, #2
 800afb6:	4628      	mov	r0, r5
 800afb8:	f000 fdc2 	bl	800bb40 <__any_on>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	d0b2      	beq.n	800af26 <__gethex+0x1c0>
 800afc0:	f04f 0a03 	mov.w	sl, #3
 800afc4:	e7b1      	b.n	800af2a <__gethex+0x1c4>
 800afc6:	da09      	bge.n	800afdc <__gethex+0x276>
 800afc8:	1bf7      	subs	r7, r6, r7
 800afca:	4629      	mov	r1, r5
 800afcc:	463a      	mov	r2, r7
 800afce:	9802      	ldr	r0, [sp, #8]
 800afd0:	f000 fbd8 	bl	800b784 <__lshift>
 800afd4:	1be4      	subs	r4, r4, r7
 800afd6:	4605      	mov	r5, r0
 800afd8:	f100 0914 	add.w	r9, r0, #20
 800afdc:	f04f 0a00 	mov.w	sl, #0
 800afe0:	e7a8      	b.n	800af34 <__gethex+0x1ce>
 800afe2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800afe6:	42a0      	cmp	r0, r4
 800afe8:	dd6a      	ble.n	800b0c0 <__gethex+0x35a>
 800afea:	1b04      	subs	r4, r0, r4
 800afec:	42a6      	cmp	r6, r4
 800afee:	dc2e      	bgt.n	800b04e <__gethex+0x2e8>
 800aff0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	d022      	beq.n	800b03e <__gethex+0x2d8>
 800aff8:	2b03      	cmp	r3, #3
 800affa:	d024      	beq.n	800b046 <__gethex+0x2e0>
 800affc:	2b01      	cmp	r3, #1
 800affe:	d115      	bne.n	800b02c <__gethex+0x2c6>
 800b000:	42a6      	cmp	r6, r4
 800b002:	d113      	bne.n	800b02c <__gethex+0x2c6>
 800b004:	2e01      	cmp	r6, #1
 800b006:	dc0b      	bgt.n	800b020 <__gethex+0x2ba>
 800b008:	9a06      	ldr	r2, [sp, #24]
 800b00a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b00e:	6013      	str	r3, [r2, #0]
 800b010:	2301      	movs	r3, #1
 800b012:	612b      	str	r3, [r5, #16]
 800b014:	f8c9 3000 	str.w	r3, [r9]
 800b018:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b01a:	2762      	movs	r7, #98	; 0x62
 800b01c:	601d      	str	r5, [r3, #0]
 800b01e:	e72a      	b.n	800ae76 <__gethex+0x110>
 800b020:	1e71      	subs	r1, r6, #1
 800b022:	4628      	mov	r0, r5
 800b024:	f000 fd8c 	bl	800bb40 <__any_on>
 800b028:	2800      	cmp	r0, #0
 800b02a:	d1ed      	bne.n	800b008 <__gethex+0x2a2>
 800b02c:	4629      	mov	r1, r5
 800b02e:	9802      	ldr	r0, [sp, #8]
 800b030:	f000 f9dd 	bl	800b3ee <_Bfree>
 800b034:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b036:	2300      	movs	r3, #0
 800b038:	6013      	str	r3, [r2, #0]
 800b03a:	2750      	movs	r7, #80	; 0x50
 800b03c:	e71b      	b.n	800ae76 <__gethex+0x110>
 800b03e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b040:	2b00      	cmp	r3, #0
 800b042:	d0e1      	beq.n	800b008 <__gethex+0x2a2>
 800b044:	e7f2      	b.n	800b02c <__gethex+0x2c6>
 800b046:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1dd      	bne.n	800b008 <__gethex+0x2a2>
 800b04c:	e7ee      	b.n	800b02c <__gethex+0x2c6>
 800b04e:	1e67      	subs	r7, r4, #1
 800b050:	f1ba 0f00 	cmp.w	sl, #0
 800b054:	d131      	bne.n	800b0ba <__gethex+0x354>
 800b056:	b127      	cbz	r7, 800b062 <__gethex+0x2fc>
 800b058:	4639      	mov	r1, r7
 800b05a:	4628      	mov	r0, r5
 800b05c:	f000 fd70 	bl	800bb40 <__any_on>
 800b060:	4682      	mov	sl, r0
 800b062:	117a      	asrs	r2, r7, #5
 800b064:	2301      	movs	r3, #1
 800b066:	f007 071f 	and.w	r7, r7, #31
 800b06a:	fa03 f707 	lsl.w	r7, r3, r7
 800b06e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b072:	4621      	mov	r1, r4
 800b074:	421f      	tst	r7, r3
 800b076:	4628      	mov	r0, r5
 800b078:	bf18      	it	ne
 800b07a:	f04a 0a02 	orrne.w	sl, sl, #2
 800b07e:	1b36      	subs	r6, r6, r4
 800b080:	f7ff fe22 	bl	800acc8 <rshift>
 800b084:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b088:	2702      	movs	r7, #2
 800b08a:	f1ba 0f00 	cmp.w	sl, #0
 800b08e:	d048      	beq.n	800b122 <__gethex+0x3bc>
 800b090:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b094:	2b02      	cmp	r3, #2
 800b096:	d015      	beq.n	800b0c4 <__gethex+0x35e>
 800b098:	2b03      	cmp	r3, #3
 800b09a:	d017      	beq.n	800b0cc <__gethex+0x366>
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d109      	bne.n	800b0b4 <__gethex+0x34e>
 800b0a0:	f01a 0f02 	tst.w	sl, #2
 800b0a4:	d006      	beq.n	800b0b4 <__gethex+0x34e>
 800b0a6:	f8d9 3000 	ldr.w	r3, [r9]
 800b0aa:	ea4a 0a03 	orr.w	sl, sl, r3
 800b0ae:	f01a 0f01 	tst.w	sl, #1
 800b0b2:	d10e      	bne.n	800b0d2 <__gethex+0x36c>
 800b0b4:	f047 0710 	orr.w	r7, r7, #16
 800b0b8:	e033      	b.n	800b122 <__gethex+0x3bc>
 800b0ba:	f04f 0a01 	mov.w	sl, #1
 800b0be:	e7d0      	b.n	800b062 <__gethex+0x2fc>
 800b0c0:	2701      	movs	r7, #1
 800b0c2:	e7e2      	b.n	800b08a <__gethex+0x324>
 800b0c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0c6:	f1c3 0301 	rsb	r3, r3, #1
 800b0ca:	9315      	str	r3, [sp, #84]	; 0x54
 800b0cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d0f0      	beq.n	800b0b4 <__gethex+0x34e>
 800b0d2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b0d6:	f105 0314 	add.w	r3, r5, #20
 800b0da:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b0de:	eb03 010a 	add.w	r1, r3, sl
 800b0e2:	f04f 0c00 	mov.w	ip, #0
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b0f0:	d01c      	beq.n	800b12c <__gethex+0x3c6>
 800b0f2:	3201      	adds	r2, #1
 800b0f4:	6002      	str	r2, [r0, #0]
 800b0f6:	2f02      	cmp	r7, #2
 800b0f8:	f105 0314 	add.w	r3, r5, #20
 800b0fc:	d138      	bne.n	800b170 <__gethex+0x40a>
 800b0fe:	f8d8 2000 	ldr.w	r2, [r8]
 800b102:	3a01      	subs	r2, #1
 800b104:	42b2      	cmp	r2, r6
 800b106:	d10a      	bne.n	800b11e <__gethex+0x3b8>
 800b108:	1171      	asrs	r1, r6, #5
 800b10a:	2201      	movs	r2, #1
 800b10c:	f006 061f 	and.w	r6, r6, #31
 800b110:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b114:	fa02 f606 	lsl.w	r6, r2, r6
 800b118:	421e      	tst	r6, r3
 800b11a:	bf18      	it	ne
 800b11c:	4617      	movne	r7, r2
 800b11e:	f047 0720 	orr.w	r7, r7, #32
 800b122:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b124:	601d      	str	r5, [r3, #0]
 800b126:	9b06      	ldr	r3, [sp, #24]
 800b128:	601c      	str	r4, [r3, #0]
 800b12a:	e6a4      	b.n	800ae76 <__gethex+0x110>
 800b12c:	4299      	cmp	r1, r3
 800b12e:	f843 cc04 	str.w	ip, [r3, #-4]
 800b132:	d8d8      	bhi.n	800b0e6 <__gethex+0x380>
 800b134:	68ab      	ldr	r3, [r5, #8]
 800b136:	4599      	cmp	r9, r3
 800b138:	db12      	blt.n	800b160 <__gethex+0x3fa>
 800b13a:	6869      	ldr	r1, [r5, #4]
 800b13c:	9802      	ldr	r0, [sp, #8]
 800b13e:	3101      	adds	r1, #1
 800b140:	f000 f921 	bl	800b386 <_Balloc>
 800b144:	692a      	ldr	r2, [r5, #16]
 800b146:	3202      	adds	r2, #2
 800b148:	f105 010c 	add.w	r1, r5, #12
 800b14c:	4683      	mov	fp, r0
 800b14e:	0092      	lsls	r2, r2, #2
 800b150:	300c      	adds	r0, #12
 800b152:	f000 f90d 	bl	800b370 <memcpy>
 800b156:	4629      	mov	r1, r5
 800b158:	9802      	ldr	r0, [sp, #8]
 800b15a:	f000 f948 	bl	800b3ee <_Bfree>
 800b15e:	465d      	mov	r5, fp
 800b160:	692b      	ldr	r3, [r5, #16]
 800b162:	1c5a      	adds	r2, r3, #1
 800b164:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b168:	612a      	str	r2, [r5, #16]
 800b16a:	2201      	movs	r2, #1
 800b16c:	615a      	str	r2, [r3, #20]
 800b16e:	e7c2      	b.n	800b0f6 <__gethex+0x390>
 800b170:	692a      	ldr	r2, [r5, #16]
 800b172:	454a      	cmp	r2, r9
 800b174:	dd0b      	ble.n	800b18e <__gethex+0x428>
 800b176:	2101      	movs	r1, #1
 800b178:	4628      	mov	r0, r5
 800b17a:	f7ff fda5 	bl	800acc8 <rshift>
 800b17e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b182:	3401      	adds	r4, #1
 800b184:	42a3      	cmp	r3, r4
 800b186:	f6ff aed9 	blt.w	800af3c <__gethex+0x1d6>
 800b18a:	2701      	movs	r7, #1
 800b18c:	e7c7      	b.n	800b11e <__gethex+0x3b8>
 800b18e:	f016 061f 	ands.w	r6, r6, #31
 800b192:	d0fa      	beq.n	800b18a <__gethex+0x424>
 800b194:	449a      	add	sl, r3
 800b196:	f1c6 0620 	rsb	r6, r6, #32
 800b19a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b19e:	f000 f9b6 	bl	800b50e <__hi0bits>
 800b1a2:	42b0      	cmp	r0, r6
 800b1a4:	dbe7      	blt.n	800b176 <__gethex+0x410>
 800b1a6:	e7f0      	b.n	800b18a <__gethex+0x424>

0800b1a8 <L_shift>:
 800b1a8:	f1c2 0208 	rsb	r2, r2, #8
 800b1ac:	0092      	lsls	r2, r2, #2
 800b1ae:	b570      	push	{r4, r5, r6, lr}
 800b1b0:	f1c2 0620 	rsb	r6, r2, #32
 800b1b4:	6843      	ldr	r3, [r0, #4]
 800b1b6:	6804      	ldr	r4, [r0, #0]
 800b1b8:	fa03 f506 	lsl.w	r5, r3, r6
 800b1bc:	432c      	orrs	r4, r5
 800b1be:	40d3      	lsrs	r3, r2
 800b1c0:	6004      	str	r4, [r0, #0]
 800b1c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800b1c6:	4288      	cmp	r0, r1
 800b1c8:	d3f4      	bcc.n	800b1b4 <L_shift+0xc>
 800b1ca:	bd70      	pop	{r4, r5, r6, pc}

0800b1cc <__match>:
 800b1cc:	b530      	push	{r4, r5, lr}
 800b1ce:	6803      	ldr	r3, [r0, #0]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1d6:	b914      	cbnz	r4, 800b1de <__match+0x12>
 800b1d8:	6003      	str	r3, [r0, #0]
 800b1da:	2001      	movs	r0, #1
 800b1dc:	bd30      	pop	{r4, r5, pc}
 800b1de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b1e6:	2d19      	cmp	r5, #25
 800b1e8:	bf98      	it	ls
 800b1ea:	3220      	addls	r2, #32
 800b1ec:	42a2      	cmp	r2, r4
 800b1ee:	d0f0      	beq.n	800b1d2 <__match+0x6>
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	e7f3      	b.n	800b1dc <__match+0x10>

0800b1f4 <__hexnan>:
 800b1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f8:	680b      	ldr	r3, [r1, #0]
 800b1fa:	6801      	ldr	r1, [r0, #0]
 800b1fc:	115f      	asrs	r7, r3, #5
 800b1fe:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b202:	f013 031f 	ands.w	r3, r3, #31
 800b206:	b087      	sub	sp, #28
 800b208:	bf18      	it	ne
 800b20a:	3704      	addne	r7, #4
 800b20c:	2500      	movs	r5, #0
 800b20e:	1f3e      	subs	r6, r7, #4
 800b210:	4682      	mov	sl, r0
 800b212:	4690      	mov	r8, r2
 800b214:	9301      	str	r3, [sp, #4]
 800b216:	f847 5c04 	str.w	r5, [r7, #-4]
 800b21a:	46b1      	mov	r9, r6
 800b21c:	4634      	mov	r4, r6
 800b21e:	9502      	str	r5, [sp, #8]
 800b220:	46ab      	mov	fp, r5
 800b222:	784a      	ldrb	r2, [r1, #1]
 800b224:	1c4b      	adds	r3, r1, #1
 800b226:	9303      	str	r3, [sp, #12]
 800b228:	b342      	cbz	r2, 800b27c <__hexnan+0x88>
 800b22a:	4610      	mov	r0, r2
 800b22c:	9105      	str	r1, [sp, #20]
 800b22e:	9204      	str	r2, [sp, #16]
 800b230:	f7ff fd84 	bl	800ad3c <__hexdig_fun>
 800b234:	2800      	cmp	r0, #0
 800b236:	d143      	bne.n	800b2c0 <__hexnan+0xcc>
 800b238:	9a04      	ldr	r2, [sp, #16]
 800b23a:	9905      	ldr	r1, [sp, #20]
 800b23c:	2a20      	cmp	r2, #32
 800b23e:	d818      	bhi.n	800b272 <__hexnan+0x7e>
 800b240:	9b02      	ldr	r3, [sp, #8]
 800b242:	459b      	cmp	fp, r3
 800b244:	dd13      	ble.n	800b26e <__hexnan+0x7a>
 800b246:	454c      	cmp	r4, r9
 800b248:	d206      	bcs.n	800b258 <__hexnan+0x64>
 800b24a:	2d07      	cmp	r5, #7
 800b24c:	dc04      	bgt.n	800b258 <__hexnan+0x64>
 800b24e:	462a      	mov	r2, r5
 800b250:	4649      	mov	r1, r9
 800b252:	4620      	mov	r0, r4
 800b254:	f7ff ffa8 	bl	800b1a8 <L_shift>
 800b258:	4544      	cmp	r4, r8
 800b25a:	d944      	bls.n	800b2e6 <__hexnan+0xf2>
 800b25c:	2300      	movs	r3, #0
 800b25e:	f1a4 0904 	sub.w	r9, r4, #4
 800b262:	f844 3c04 	str.w	r3, [r4, #-4]
 800b266:	f8cd b008 	str.w	fp, [sp, #8]
 800b26a:	464c      	mov	r4, r9
 800b26c:	461d      	mov	r5, r3
 800b26e:	9903      	ldr	r1, [sp, #12]
 800b270:	e7d7      	b.n	800b222 <__hexnan+0x2e>
 800b272:	2a29      	cmp	r2, #41	; 0x29
 800b274:	d14a      	bne.n	800b30c <__hexnan+0x118>
 800b276:	3102      	adds	r1, #2
 800b278:	f8ca 1000 	str.w	r1, [sl]
 800b27c:	f1bb 0f00 	cmp.w	fp, #0
 800b280:	d044      	beq.n	800b30c <__hexnan+0x118>
 800b282:	454c      	cmp	r4, r9
 800b284:	d206      	bcs.n	800b294 <__hexnan+0xa0>
 800b286:	2d07      	cmp	r5, #7
 800b288:	dc04      	bgt.n	800b294 <__hexnan+0xa0>
 800b28a:	462a      	mov	r2, r5
 800b28c:	4649      	mov	r1, r9
 800b28e:	4620      	mov	r0, r4
 800b290:	f7ff ff8a 	bl	800b1a8 <L_shift>
 800b294:	4544      	cmp	r4, r8
 800b296:	d928      	bls.n	800b2ea <__hexnan+0xf6>
 800b298:	4643      	mov	r3, r8
 800b29a:	f854 2b04 	ldr.w	r2, [r4], #4
 800b29e:	f843 2b04 	str.w	r2, [r3], #4
 800b2a2:	42a6      	cmp	r6, r4
 800b2a4:	d2f9      	bcs.n	800b29a <__hexnan+0xa6>
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f843 2b04 	str.w	r2, [r3], #4
 800b2ac:	429e      	cmp	r6, r3
 800b2ae:	d2fb      	bcs.n	800b2a8 <__hexnan+0xb4>
 800b2b0:	6833      	ldr	r3, [r6, #0]
 800b2b2:	b91b      	cbnz	r3, 800b2bc <__hexnan+0xc8>
 800b2b4:	4546      	cmp	r6, r8
 800b2b6:	d127      	bne.n	800b308 <__hexnan+0x114>
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	6033      	str	r3, [r6, #0]
 800b2bc:	2005      	movs	r0, #5
 800b2be:	e026      	b.n	800b30e <__hexnan+0x11a>
 800b2c0:	3501      	adds	r5, #1
 800b2c2:	2d08      	cmp	r5, #8
 800b2c4:	f10b 0b01 	add.w	fp, fp, #1
 800b2c8:	dd06      	ble.n	800b2d8 <__hexnan+0xe4>
 800b2ca:	4544      	cmp	r4, r8
 800b2cc:	d9cf      	bls.n	800b26e <__hexnan+0x7a>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b2d4:	2501      	movs	r5, #1
 800b2d6:	3c04      	subs	r4, #4
 800b2d8:	6822      	ldr	r2, [r4, #0]
 800b2da:	f000 000f 	and.w	r0, r0, #15
 800b2de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b2e2:	6020      	str	r0, [r4, #0]
 800b2e4:	e7c3      	b.n	800b26e <__hexnan+0x7a>
 800b2e6:	2508      	movs	r5, #8
 800b2e8:	e7c1      	b.n	800b26e <__hexnan+0x7a>
 800b2ea:	9b01      	ldr	r3, [sp, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d0df      	beq.n	800b2b0 <__hexnan+0xbc>
 800b2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f4:	f1c3 0320 	rsb	r3, r3, #32
 800b2f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b2fc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b300:	401a      	ands	r2, r3
 800b302:	f847 2c04 	str.w	r2, [r7, #-4]
 800b306:	e7d3      	b.n	800b2b0 <__hexnan+0xbc>
 800b308:	3e04      	subs	r6, #4
 800b30a:	e7d1      	b.n	800b2b0 <__hexnan+0xbc>
 800b30c:	2004      	movs	r0, #4
 800b30e:	b007      	add	sp, #28
 800b310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b314 <__locale_ctype_ptr_l>:
 800b314:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b318:	4770      	bx	lr

0800b31a <__localeconv_l>:
 800b31a:	30f0      	adds	r0, #240	; 0xf0
 800b31c:	4770      	bx	lr
	...

0800b320 <_localeconv_r>:
 800b320:	4b04      	ldr	r3, [pc, #16]	; (800b334 <_localeconv_r+0x14>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	6a18      	ldr	r0, [r3, #32]
 800b326:	4b04      	ldr	r3, [pc, #16]	; (800b338 <_localeconv_r+0x18>)
 800b328:	2800      	cmp	r0, #0
 800b32a:	bf08      	it	eq
 800b32c:	4618      	moveq	r0, r3
 800b32e:	30f0      	adds	r0, #240	; 0xf0
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	2000001c 	.word	0x2000001c
 800b338:	20000080 	.word	0x20000080

0800b33c <malloc>:
 800b33c:	4b02      	ldr	r3, [pc, #8]	; (800b348 <malloc+0xc>)
 800b33e:	4601      	mov	r1, r0
 800b340:	6818      	ldr	r0, [r3, #0]
 800b342:	f000 bc7b 	b.w	800bc3c <_malloc_r>
 800b346:	bf00      	nop
 800b348:	2000001c 	.word	0x2000001c

0800b34c <__ascii_mbtowc>:
 800b34c:	b082      	sub	sp, #8
 800b34e:	b901      	cbnz	r1, 800b352 <__ascii_mbtowc+0x6>
 800b350:	a901      	add	r1, sp, #4
 800b352:	b142      	cbz	r2, 800b366 <__ascii_mbtowc+0x1a>
 800b354:	b14b      	cbz	r3, 800b36a <__ascii_mbtowc+0x1e>
 800b356:	7813      	ldrb	r3, [r2, #0]
 800b358:	600b      	str	r3, [r1, #0]
 800b35a:	7812      	ldrb	r2, [r2, #0]
 800b35c:	1c10      	adds	r0, r2, #0
 800b35e:	bf18      	it	ne
 800b360:	2001      	movne	r0, #1
 800b362:	b002      	add	sp, #8
 800b364:	4770      	bx	lr
 800b366:	4610      	mov	r0, r2
 800b368:	e7fb      	b.n	800b362 <__ascii_mbtowc+0x16>
 800b36a:	f06f 0001 	mvn.w	r0, #1
 800b36e:	e7f8      	b.n	800b362 <__ascii_mbtowc+0x16>

0800b370 <memcpy>:
 800b370:	b510      	push	{r4, lr}
 800b372:	1e43      	subs	r3, r0, #1
 800b374:	440a      	add	r2, r1
 800b376:	4291      	cmp	r1, r2
 800b378:	d100      	bne.n	800b37c <memcpy+0xc>
 800b37a:	bd10      	pop	{r4, pc}
 800b37c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b380:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b384:	e7f7      	b.n	800b376 <memcpy+0x6>

0800b386 <_Balloc>:
 800b386:	b570      	push	{r4, r5, r6, lr}
 800b388:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b38a:	4604      	mov	r4, r0
 800b38c:	460e      	mov	r6, r1
 800b38e:	b93d      	cbnz	r5, 800b3a0 <_Balloc+0x1a>
 800b390:	2010      	movs	r0, #16
 800b392:	f7ff ffd3 	bl	800b33c <malloc>
 800b396:	6260      	str	r0, [r4, #36]	; 0x24
 800b398:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b39c:	6005      	str	r5, [r0, #0]
 800b39e:	60c5      	str	r5, [r0, #12]
 800b3a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b3a2:	68eb      	ldr	r3, [r5, #12]
 800b3a4:	b183      	cbz	r3, 800b3c8 <_Balloc+0x42>
 800b3a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b3ae:	b9b8      	cbnz	r0, 800b3e0 <_Balloc+0x5a>
 800b3b0:	2101      	movs	r1, #1
 800b3b2:	fa01 f506 	lsl.w	r5, r1, r6
 800b3b6:	1d6a      	adds	r2, r5, #5
 800b3b8:	0092      	lsls	r2, r2, #2
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f000 fbe1 	bl	800bb82 <_calloc_r>
 800b3c0:	b160      	cbz	r0, 800b3dc <_Balloc+0x56>
 800b3c2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b3c6:	e00e      	b.n	800b3e6 <_Balloc+0x60>
 800b3c8:	2221      	movs	r2, #33	; 0x21
 800b3ca:	2104      	movs	r1, #4
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f000 fbd8 	bl	800bb82 <_calloc_r>
 800b3d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3d4:	60e8      	str	r0, [r5, #12]
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1e4      	bne.n	800b3a6 <_Balloc+0x20>
 800b3dc:	2000      	movs	r0, #0
 800b3de:	bd70      	pop	{r4, r5, r6, pc}
 800b3e0:	6802      	ldr	r2, [r0, #0]
 800b3e2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3ec:	e7f7      	b.n	800b3de <_Balloc+0x58>

0800b3ee <_Bfree>:
 800b3ee:	b570      	push	{r4, r5, r6, lr}
 800b3f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b3f2:	4606      	mov	r6, r0
 800b3f4:	460d      	mov	r5, r1
 800b3f6:	b93c      	cbnz	r4, 800b408 <_Bfree+0x1a>
 800b3f8:	2010      	movs	r0, #16
 800b3fa:	f7ff ff9f 	bl	800b33c <malloc>
 800b3fe:	6270      	str	r0, [r6, #36]	; 0x24
 800b400:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b404:	6004      	str	r4, [r0, #0]
 800b406:	60c4      	str	r4, [r0, #12]
 800b408:	b13d      	cbz	r5, 800b41a <_Bfree+0x2c>
 800b40a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b40c:	686a      	ldr	r2, [r5, #4]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b414:	6029      	str	r1, [r5, #0]
 800b416:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b41a:	bd70      	pop	{r4, r5, r6, pc}

0800b41c <__multadd>:
 800b41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b420:	690d      	ldr	r5, [r1, #16]
 800b422:	461f      	mov	r7, r3
 800b424:	4606      	mov	r6, r0
 800b426:	460c      	mov	r4, r1
 800b428:	f101 0c14 	add.w	ip, r1, #20
 800b42c:	2300      	movs	r3, #0
 800b42e:	f8dc 0000 	ldr.w	r0, [ip]
 800b432:	b281      	uxth	r1, r0
 800b434:	fb02 7101 	mla	r1, r2, r1, r7
 800b438:	0c0f      	lsrs	r7, r1, #16
 800b43a:	0c00      	lsrs	r0, r0, #16
 800b43c:	fb02 7000 	mla	r0, r2, r0, r7
 800b440:	b289      	uxth	r1, r1
 800b442:	3301      	adds	r3, #1
 800b444:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b448:	429d      	cmp	r5, r3
 800b44a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b44e:	f84c 1b04 	str.w	r1, [ip], #4
 800b452:	dcec      	bgt.n	800b42e <__multadd+0x12>
 800b454:	b1d7      	cbz	r7, 800b48c <__multadd+0x70>
 800b456:	68a3      	ldr	r3, [r4, #8]
 800b458:	42ab      	cmp	r3, r5
 800b45a:	dc12      	bgt.n	800b482 <__multadd+0x66>
 800b45c:	6861      	ldr	r1, [r4, #4]
 800b45e:	4630      	mov	r0, r6
 800b460:	3101      	adds	r1, #1
 800b462:	f7ff ff90 	bl	800b386 <_Balloc>
 800b466:	6922      	ldr	r2, [r4, #16]
 800b468:	3202      	adds	r2, #2
 800b46a:	f104 010c 	add.w	r1, r4, #12
 800b46e:	4680      	mov	r8, r0
 800b470:	0092      	lsls	r2, r2, #2
 800b472:	300c      	adds	r0, #12
 800b474:	f7ff ff7c 	bl	800b370 <memcpy>
 800b478:	4621      	mov	r1, r4
 800b47a:	4630      	mov	r0, r6
 800b47c:	f7ff ffb7 	bl	800b3ee <_Bfree>
 800b480:	4644      	mov	r4, r8
 800b482:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b486:	3501      	adds	r5, #1
 800b488:	615f      	str	r7, [r3, #20]
 800b48a:	6125      	str	r5, [r4, #16]
 800b48c:	4620      	mov	r0, r4
 800b48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b492 <__s2b>:
 800b492:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b496:	460c      	mov	r4, r1
 800b498:	4615      	mov	r5, r2
 800b49a:	461f      	mov	r7, r3
 800b49c:	2209      	movs	r2, #9
 800b49e:	3308      	adds	r3, #8
 800b4a0:	4606      	mov	r6, r0
 800b4a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	db20      	blt.n	800b4f0 <__s2b+0x5e>
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	f7ff ff69 	bl	800b386 <_Balloc>
 800b4b4:	9b08      	ldr	r3, [sp, #32]
 800b4b6:	6143      	str	r3, [r0, #20]
 800b4b8:	2d09      	cmp	r5, #9
 800b4ba:	f04f 0301 	mov.w	r3, #1
 800b4be:	6103      	str	r3, [r0, #16]
 800b4c0:	dd19      	ble.n	800b4f6 <__s2b+0x64>
 800b4c2:	f104 0809 	add.w	r8, r4, #9
 800b4c6:	46c1      	mov	r9, r8
 800b4c8:	442c      	add	r4, r5
 800b4ca:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b4ce:	4601      	mov	r1, r0
 800b4d0:	3b30      	subs	r3, #48	; 0x30
 800b4d2:	220a      	movs	r2, #10
 800b4d4:	4630      	mov	r0, r6
 800b4d6:	f7ff ffa1 	bl	800b41c <__multadd>
 800b4da:	45a1      	cmp	r9, r4
 800b4dc:	d1f5      	bne.n	800b4ca <__s2b+0x38>
 800b4de:	eb08 0405 	add.w	r4, r8, r5
 800b4e2:	3c08      	subs	r4, #8
 800b4e4:	1b2d      	subs	r5, r5, r4
 800b4e6:	1963      	adds	r3, r4, r5
 800b4e8:	42bb      	cmp	r3, r7
 800b4ea:	db07      	blt.n	800b4fc <__s2b+0x6a>
 800b4ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4f0:	0052      	lsls	r2, r2, #1
 800b4f2:	3101      	adds	r1, #1
 800b4f4:	e7d9      	b.n	800b4aa <__s2b+0x18>
 800b4f6:	340a      	adds	r4, #10
 800b4f8:	2509      	movs	r5, #9
 800b4fa:	e7f3      	b.n	800b4e4 <__s2b+0x52>
 800b4fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b500:	4601      	mov	r1, r0
 800b502:	3b30      	subs	r3, #48	; 0x30
 800b504:	220a      	movs	r2, #10
 800b506:	4630      	mov	r0, r6
 800b508:	f7ff ff88 	bl	800b41c <__multadd>
 800b50c:	e7eb      	b.n	800b4e6 <__s2b+0x54>

0800b50e <__hi0bits>:
 800b50e:	0c02      	lsrs	r2, r0, #16
 800b510:	0412      	lsls	r2, r2, #16
 800b512:	4603      	mov	r3, r0
 800b514:	b9b2      	cbnz	r2, 800b544 <__hi0bits+0x36>
 800b516:	0403      	lsls	r3, r0, #16
 800b518:	2010      	movs	r0, #16
 800b51a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b51e:	bf04      	itt	eq
 800b520:	021b      	lsleq	r3, r3, #8
 800b522:	3008      	addeq	r0, #8
 800b524:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b528:	bf04      	itt	eq
 800b52a:	011b      	lsleq	r3, r3, #4
 800b52c:	3004      	addeq	r0, #4
 800b52e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b532:	bf04      	itt	eq
 800b534:	009b      	lsleq	r3, r3, #2
 800b536:	3002      	addeq	r0, #2
 800b538:	2b00      	cmp	r3, #0
 800b53a:	db06      	blt.n	800b54a <__hi0bits+0x3c>
 800b53c:	005b      	lsls	r3, r3, #1
 800b53e:	d503      	bpl.n	800b548 <__hi0bits+0x3a>
 800b540:	3001      	adds	r0, #1
 800b542:	4770      	bx	lr
 800b544:	2000      	movs	r0, #0
 800b546:	e7e8      	b.n	800b51a <__hi0bits+0xc>
 800b548:	2020      	movs	r0, #32
 800b54a:	4770      	bx	lr

0800b54c <__lo0bits>:
 800b54c:	6803      	ldr	r3, [r0, #0]
 800b54e:	f013 0207 	ands.w	r2, r3, #7
 800b552:	4601      	mov	r1, r0
 800b554:	d00b      	beq.n	800b56e <__lo0bits+0x22>
 800b556:	07da      	lsls	r2, r3, #31
 800b558:	d423      	bmi.n	800b5a2 <__lo0bits+0x56>
 800b55a:	0798      	lsls	r0, r3, #30
 800b55c:	bf49      	itett	mi
 800b55e:	085b      	lsrmi	r3, r3, #1
 800b560:	089b      	lsrpl	r3, r3, #2
 800b562:	2001      	movmi	r0, #1
 800b564:	600b      	strmi	r3, [r1, #0]
 800b566:	bf5c      	itt	pl
 800b568:	600b      	strpl	r3, [r1, #0]
 800b56a:	2002      	movpl	r0, #2
 800b56c:	4770      	bx	lr
 800b56e:	b298      	uxth	r0, r3
 800b570:	b9a8      	cbnz	r0, 800b59e <__lo0bits+0x52>
 800b572:	0c1b      	lsrs	r3, r3, #16
 800b574:	2010      	movs	r0, #16
 800b576:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b57a:	bf04      	itt	eq
 800b57c:	0a1b      	lsreq	r3, r3, #8
 800b57e:	3008      	addeq	r0, #8
 800b580:	071a      	lsls	r2, r3, #28
 800b582:	bf04      	itt	eq
 800b584:	091b      	lsreq	r3, r3, #4
 800b586:	3004      	addeq	r0, #4
 800b588:	079a      	lsls	r2, r3, #30
 800b58a:	bf04      	itt	eq
 800b58c:	089b      	lsreq	r3, r3, #2
 800b58e:	3002      	addeq	r0, #2
 800b590:	07da      	lsls	r2, r3, #31
 800b592:	d402      	bmi.n	800b59a <__lo0bits+0x4e>
 800b594:	085b      	lsrs	r3, r3, #1
 800b596:	d006      	beq.n	800b5a6 <__lo0bits+0x5a>
 800b598:	3001      	adds	r0, #1
 800b59a:	600b      	str	r3, [r1, #0]
 800b59c:	4770      	bx	lr
 800b59e:	4610      	mov	r0, r2
 800b5a0:	e7e9      	b.n	800b576 <__lo0bits+0x2a>
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	4770      	bx	lr
 800b5a6:	2020      	movs	r0, #32
 800b5a8:	4770      	bx	lr

0800b5aa <__i2b>:
 800b5aa:	b510      	push	{r4, lr}
 800b5ac:	460c      	mov	r4, r1
 800b5ae:	2101      	movs	r1, #1
 800b5b0:	f7ff fee9 	bl	800b386 <_Balloc>
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	6144      	str	r4, [r0, #20]
 800b5b8:	6102      	str	r2, [r0, #16]
 800b5ba:	bd10      	pop	{r4, pc}

0800b5bc <__multiply>:
 800b5bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c0:	4614      	mov	r4, r2
 800b5c2:	690a      	ldr	r2, [r1, #16]
 800b5c4:	6923      	ldr	r3, [r4, #16]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	bfb8      	it	lt
 800b5ca:	460b      	movlt	r3, r1
 800b5cc:	4688      	mov	r8, r1
 800b5ce:	bfbc      	itt	lt
 800b5d0:	46a0      	movlt	r8, r4
 800b5d2:	461c      	movlt	r4, r3
 800b5d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b5d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b5dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b5e4:	eb07 0609 	add.w	r6, r7, r9
 800b5e8:	42b3      	cmp	r3, r6
 800b5ea:	bfb8      	it	lt
 800b5ec:	3101      	addlt	r1, #1
 800b5ee:	f7ff feca 	bl	800b386 <_Balloc>
 800b5f2:	f100 0514 	add.w	r5, r0, #20
 800b5f6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b5fa:	462b      	mov	r3, r5
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	4573      	cmp	r3, lr
 800b600:	d316      	bcc.n	800b630 <__multiply+0x74>
 800b602:	f104 0214 	add.w	r2, r4, #20
 800b606:	f108 0114 	add.w	r1, r8, #20
 800b60a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b60e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	9b00      	ldr	r3, [sp, #0]
 800b616:	9201      	str	r2, [sp, #4]
 800b618:	4293      	cmp	r3, r2
 800b61a:	d80c      	bhi.n	800b636 <__multiply+0x7a>
 800b61c:	2e00      	cmp	r6, #0
 800b61e:	dd03      	ble.n	800b628 <__multiply+0x6c>
 800b620:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b624:	2b00      	cmp	r3, #0
 800b626:	d05d      	beq.n	800b6e4 <__multiply+0x128>
 800b628:	6106      	str	r6, [r0, #16]
 800b62a:	b003      	add	sp, #12
 800b62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b630:	f843 2b04 	str.w	r2, [r3], #4
 800b634:	e7e3      	b.n	800b5fe <__multiply+0x42>
 800b636:	f8b2 b000 	ldrh.w	fp, [r2]
 800b63a:	f1bb 0f00 	cmp.w	fp, #0
 800b63e:	d023      	beq.n	800b688 <__multiply+0xcc>
 800b640:	4689      	mov	r9, r1
 800b642:	46ac      	mov	ip, r5
 800b644:	f04f 0800 	mov.w	r8, #0
 800b648:	f859 4b04 	ldr.w	r4, [r9], #4
 800b64c:	f8dc a000 	ldr.w	sl, [ip]
 800b650:	b2a3      	uxth	r3, r4
 800b652:	fa1f fa8a 	uxth.w	sl, sl
 800b656:	fb0b a303 	mla	r3, fp, r3, sl
 800b65a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b65e:	f8dc 4000 	ldr.w	r4, [ip]
 800b662:	4443      	add	r3, r8
 800b664:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b668:	fb0b 840a 	mla	r4, fp, sl, r8
 800b66c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b670:	46e2      	mov	sl, ip
 800b672:	b29b      	uxth	r3, r3
 800b674:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b678:	454f      	cmp	r7, r9
 800b67a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b67e:	f84a 3b04 	str.w	r3, [sl], #4
 800b682:	d82b      	bhi.n	800b6dc <__multiply+0x120>
 800b684:	f8cc 8004 	str.w	r8, [ip, #4]
 800b688:	9b01      	ldr	r3, [sp, #4]
 800b68a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b68e:	3204      	adds	r2, #4
 800b690:	f1ba 0f00 	cmp.w	sl, #0
 800b694:	d020      	beq.n	800b6d8 <__multiply+0x11c>
 800b696:	682b      	ldr	r3, [r5, #0]
 800b698:	4689      	mov	r9, r1
 800b69a:	46a8      	mov	r8, r5
 800b69c:	f04f 0b00 	mov.w	fp, #0
 800b6a0:	f8b9 c000 	ldrh.w	ip, [r9]
 800b6a4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b6a8:	fb0a 440c 	mla	r4, sl, ip, r4
 800b6ac:	445c      	add	r4, fp
 800b6ae:	46c4      	mov	ip, r8
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b6b6:	f84c 3b04 	str.w	r3, [ip], #4
 800b6ba:	f859 3b04 	ldr.w	r3, [r9], #4
 800b6be:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b6c2:	0c1b      	lsrs	r3, r3, #16
 800b6c4:	fb0a b303 	mla	r3, sl, r3, fp
 800b6c8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b6cc:	454f      	cmp	r7, r9
 800b6ce:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b6d2:	d805      	bhi.n	800b6e0 <__multiply+0x124>
 800b6d4:	f8c8 3004 	str.w	r3, [r8, #4]
 800b6d8:	3504      	adds	r5, #4
 800b6da:	e79b      	b.n	800b614 <__multiply+0x58>
 800b6dc:	46d4      	mov	ip, sl
 800b6de:	e7b3      	b.n	800b648 <__multiply+0x8c>
 800b6e0:	46e0      	mov	r8, ip
 800b6e2:	e7dd      	b.n	800b6a0 <__multiply+0xe4>
 800b6e4:	3e01      	subs	r6, #1
 800b6e6:	e799      	b.n	800b61c <__multiply+0x60>

0800b6e8 <__pow5mult>:
 800b6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6ec:	4615      	mov	r5, r2
 800b6ee:	f012 0203 	ands.w	r2, r2, #3
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	460f      	mov	r7, r1
 800b6f6:	d007      	beq.n	800b708 <__pow5mult+0x20>
 800b6f8:	3a01      	subs	r2, #1
 800b6fa:	4c21      	ldr	r4, [pc, #132]	; (800b780 <__pow5mult+0x98>)
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b702:	f7ff fe8b 	bl	800b41c <__multadd>
 800b706:	4607      	mov	r7, r0
 800b708:	10ad      	asrs	r5, r5, #2
 800b70a:	d035      	beq.n	800b778 <__pow5mult+0x90>
 800b70c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b70e:	b93c      	cbnz	r4, 800b720 <__pow5mult+0x38>
 800b710:	2010      	movs	r0, #16
 800b712:	f7ff fe13 	bl	800b33c <malloc>
 800b716:	6270      	str	r0, [r6, #36]	; 0x24
 800b718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b71c:	6004      	str	r4, [r0, #0]
 800b71e:	60c4      	str	r4, [r0, #12]
 800b720:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b728:	b94c      	cbnz	r4, 800b73e <__pow5mult+0x56>
 800b72a:	f240 2171 	movw	r1, #625	; 0x271
 800b72e:	4630      	mov	r0, r6
 800b730:	f7ff ff3b 	bl	800b5aa <__i2b>
 800b734:	2300      	movs	r3, #0
 800b736:	f8c8 0008 	str.w	r0, [r8, #8]
 800b73a:	4604      	mov	r4, r0
 800b73c:	6003      	str	r3, [r0, #0]
 800b73e:	f04f 0800 	mov.w	r8, #0
 800b742:	07eb      	lsls	r3, r5, #31
 800b744:	d50a      	bpl.n	800b75c <__pow5mult+0x74>
 800b746:	4639      	mov	r1, r7
 800b748:	4622      	mov	r2, r4
 800b74a:	4630      	mov	r0, r6
 800b74c:	f7ff ff36 	bl	800b5bc <__multiply>
 800b750:	4639      	mov	r1, r7
 800b752:	4681      	mov	r9, r0
 800b754:	4630      	mov	r0, r6
 800b756:	f7ff fe4a 	bl	800b3ee <_Bfree>
 800b75a:	464f      	mov	r7, r9
 800b75c:	106d      	asrs	r5, r5, #1
 800b75e:	d00b      	beq.n	800b778 <__pow5mult+0x90>
 800b760:	6820      	ldr	r0, [r4, #0]
 800b762:	b938      	cbnz	r0, 800b774 <__pow5mult+0x8c>
 800b764:	4622      	mov	r2, r4
 800b766:	4621      	mov	r1, r4
 800b768:	4630      	mov	r0, r6
 800b76a:	f7ff ff27 	bl	800b5bc <__multiply>
 800b76e:	6020      	str	r0, [r4, #0]
 800b770:	f8c0 8000 	str.w	r8, [r0]
 800b774:	4604      	mov	r4, r0
 800b776:	e7e4      	b.n	800b742 <__pow5mult+0x5a>
 800b778:	4638      	mov	r0, r7
 800b77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b77e:	bf00      	nop
 800b780:	0800c258 	.word	0x0800c258

0800b784 <__lshift>:
 800b784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b788:	460c      	mov	r4, r1
 800b78a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b78e:	6923      	ldr	r3, [r4, #16]
 800b790:	6849      	ldr	r1, [r1, #4]
 800b792:	eb0a 0903 	add.w	r9, sl, r3
 800b796:	68a3      	ldr	r3, [r4, #8]
 800b798:	4607      	mov	r7, r0
 800b79a:	4616      	mov	r6, r2
 800b79c:	f109 0501 	add.w	r5, r9, #1
 800b7a0:	42ab      	cmp	r3, r5
 800b7a2:	db32      	blt.n	800b80a <__lshift+0x86>
 800b7a4:	4638      	mov	r0, r7
 800b7a6:	f7ff fdee 	bl	800b386 <_Balloc>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	4680      	mov	r8, r0
 800b7ae:	f100 0114 	add.w	r1, r0, #20
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	4553      	cmp	r3, sl
 800b7b6:	db2b      	blt.n	800b810 <__lshift+0x8c>
 800b7b8:	6920      	ldr	r0, [r4, #16]
 800b7ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7be:	f104 0314 	add.w	r3, r4, #20
 800b7c2:	f016 021f 	ands.w	r2, r6, #31
 800b7c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7ce:	d025      	beq.n	800b81c <__lshift+0x98>
 800b7d0:	f1c2 0e20 	rsb	lr, r2, #32
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	681e      	ldr	r6, [r3, #0]
 800b7d8:	468a      	mov	sl, r1
 800b7da:	4096      	lsls	r6, r2
 800b7dc:	4330      	orrs	r0, r6
 800b7de:	f84a 0b04 	str.w	r0, [sl], #4
 800b7e2:	f853 0b04 	ldr.w	r0, [r3], #4
 800b7e6:	459c      	cmp	ip, r3
 800b7e8:	fa20 f00e 	lsr.w	r0, r0, lr
 800b7ec:	d814      	bhi.n	800b818 <__lshift+0x94>
 800b7ee:	6048      	str	r0, [r1, #4]
 800b7f0:	b108      	cbz	r0, 800b7f6 <__lshift+0x72>
 800b7f2:	f109 0502 	add.w	r5, r9, #2
 800b7f6:	3d01      	subs	r5, #1
 800b7f8:	4638      	mov	r0, r7
 800b7fa:	f8c8 5010 	str.w	r5, [r8, #16]
 800b7fe:	4621      	mov	r1, r4
 800b800:	f7ff fdf5 	bl	800b3ee <_Bfree>
 800b804:	4640      	mov	r0, r8
 800b806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b80a:	3101      	adds	r1, #1
 800b80c:	005b      	lsls	r3, r3, #1
 800b80e:	e7c7      	b.n	800b7a0 <__lshift+0x1c>
 800b810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b814:	3301      	adds	r3, #1
 800b816:	e7cd      	b.n	800b7b4 <__lshift+0x30>
 800b818:	4651      	mov	r1, sl
 800b81a:	e7dc      	b.n	800b7d6 <__lshift+0x52>
 800b81c:	3904      	subs	r1, #4
 800b81e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b822:	f841 2f04 	str.w	r2, [r1, #4]!
 800b826:	459c      	cmp	ip, r3
 800b828:	d8f9      	bhi.n	800b81e <__lshift+0x9a>
 800b82a:	e7e4      	b.n	800b7f6 <__lshift+0x72>

0800b82c <__mcmp>:
 800b82c:	6903      	ldr	r3, [r0, #16]
 800b82e:	690a      	ldr	r2, [r1, #16]
 800b830:	1a9b      	subs	r3, r3, r2
 800b832:	b530      	push	{r4, r5, lr}
 800b834:	d10c      	bne.n	800b850 <__mcmp+0x24>
 800b836:	0092      	lsls	r2, r2, #2
 800b838:	3014      	adds	r0, #20
 800b83a:	3114      	adds	r1, #20
 800b83c:	1884      	adds	r4, r0, r2
 800b83e:	4411      	add	r1, r2
 800b840:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b844:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b848:	4295      	cmp	r5, r2
 800b84a:	d003      	beq.n	800b854 <__mcmp+0x28>
 800b84c:	d305      	bcc.n	800b85a <__mcmp+0x2e>
 800b84e:	2301      	movs	r3, #1
 800b850:	4618      	mov	r0, r3
 800b852:	bd30      	pop	{r4, r5, pc}
 800b854:	42a0      	cmp	r0, r4
 800b856:	d3f3      	bcc.n	800b840 <__mcmp+0x14>
 800b858:	e7fa      	b.n	800b850 <__mcmp+0x24>
 800b85a:	f04f 33ff 	mov.w	r3, #4294967295
 800b85e:	e7f7      	b.n	800b850 <__mcmp+0x24>

0800b860 <__mdiff>:
 800b860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b864:	460d      	mov	r5, r1
 800b866:	4607      	mov	r7, r0
 800b868:	4611      	mov	r1, r2
 800b86a:	4628      	mov	r0, r5
 800b86c:	4614      	mov	r4, r2
 800b86e:	f7ff ffdd 	bl	800b82c <__mcmp>
 800b872:	1e06      	subs	r6, r0, #0
 800b874:	d108      	bne.n	800b888 <__mdiff+0x28>
 800b876:	4631      	mov	r1, r6
 800b878:	4638      	mov	r0, r7
 800b87a:	f7ff fd84 	bl	800b386 <_Balloc>
 800b87e:	2301      	movs	r3, #1
 800b880:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b888:	bfa4      	itt	ge
 800b88a:	4623      	movge	r3, r4
 800b88c:	462c      	movge	r4, r5
 800b88e:	4638      	mov	r0, r7
 800b890:	6861      	ldr	r1, [r4, #4]
 800b892:	bfa6      	itte	ge
 800b894:	461d      	movge	r5, r3
 800b896:	2600      	movge	r6, #0
 800b898:	2601      	movlt	r6, #1
 800b89a:	f7ff fd74 	bl	800b386 <_Balloc>
 800b89e:	692b      	ldr	r3, [r5, #16]
 800b8a0:	60c6      	str	r6, [r0, #12]
 800b8a2:	6926      	ldr	r6, [r4, #16]
 800b8a4:	f105 0914 	add.w	r9, r5, #20
 800b8a8:	f104 0214 	add.w	r2, r4, #20
 800b8ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b8b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b8b4:	f100 0514 	add.w	r5, r0, #20
 800b8b8:	f04f 0e00 	mov.w	lr, #0
 800b8bc:	f852 ab04 	ldr.w	sl, [r2], #4
 800b8c0:	f859 4b04 	ldr.w	r4, [r9], #4
 800b8c4:	fa1e f18a 	uxtah	r1, lr, sl
 800b8c8:	b2a3      	uxth	r3, r4
 800b8ca:	1ac9      	subs	r1, r1, r3
 800b8cc:	0c23      	lsrs	r3, r4, #16
 800b8ce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b8d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b8d6:	b289      	uxth	r1, r1
 800b8d8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b8dc:	45c8      	cmp	r8, r9
 800b8de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b8e2:	4694      	mov	ip, r2
 800b8e4:	f845 3b04 	str.w	r3, [r5], #4
 800b8e8:	d8e8      	bhi.n	800b8bc <__mdiff+0x5c>
 800b8ea:	45bc      	cmp	ip, r7
 800b8ec:	d304      	bcc.n	800b8f8 <__mdiff+0x98>
 800b8ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b8f2:	b183      	cbz	r3, 800b916 <__mdiff+0xb6>
 800b8f4:	6106      	str	r6, [r0, #16]
 800b8f6:	e7c5      	b.n	800b884 <__mdiff+0x24>
 800b8f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b8fc:	fa1e f381 	uxtah	r3, lr, r1
 800b900:	141a      	asrs	r2, r3, #16
 800b902:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b906:	b29b      	uxth	r3, r3
 800b908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b90c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b910:	f845 3b04 	str.w	r3, [r5], #4
 800b914:	e7e9      	b.n	800b8ea <__mdiff+0x8a>
 800b916:	3e01      	subs	r6, #1
 800b918:	e7e9      	b.n	800b8ee <__mdiff+0x8e>
	...

0800b91c <__ulp>:
 800b91c:	4b12      	ldr	r3, [pc, #72]	; (800b968 <__ulp+0x4c>)
 800b91e:	ee10 2a90 	vmov	r2, s1
 800b922:	401a      	ands	r2, r3
 800b924:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b928:	2b00      	cmp	r3, #0
 800b92a:	dd04      	ble.n	800b936 <__ulp+0x1a>
 800b92c:	2000      	movs	r0, #0
 800b92e:	4619      	mov	r1, r3
 800b930:	ec41 0b10 	vmov	d0, r0, r1
 800b934:	4770      	bx	lr
 800b936:	425b      	negs	r3, r3
 800b938:	151b      	asrs	r3, r3, #20
 800b93a:	2b13      	cmp	r3, #19
 800b93c:	f04f 0000 	mov.w	r0, #0
 800b940:	f04f 0100 	mov.w	r1, #0
 800b944:	dc04      	bgt.n	800b950 <__ulp+0x34>
 800b946:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b94a:	fa42 f103 	asr.w	r1, r2, r3
 800b94e:	e7ef      	b.n	800b930 <__ulp+0x14>
 800b950:	3b14      	subs	r3, #20
 800b952:	2b1e      	cmp	r3, #30
 800b954:	f04f 0201 	mov.w	r2, #1
 800b958:	bfda      	itte	le
 800b95a:	f1c3 031f 	rsble	r3, r3, #31
 800b95e:	fa02 f303 	lslle.w	r3, r2, r3
 800b962:	4613      	movgt	r3, r2
 800b964:	4618      	mov	r0, r3
 800b966:	e7e3      	b.n	800b930 <__ulp+0x14>
 800b968:	7ff00000 	.word	0x7ff00000

0800b96c <__b2d>:
 800b96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b96e:	6905      	ldr	r5, [r0, #16]
 800b970:	f100 0714 	add.w	r7, r0, #20
 800b974:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b978:	1f2e      	subs	r6, r5, #4
 800b97a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b97e:	4620      	mov	r0, r4
 800b980:	f7ff fdc5 	bl	800b50e <__hi0bits>
 800b984:	f1c0 0320 	rsb	r3, r0, #32
 800b988:	280a      	cmp	r0, #10
 800b98a:	600b      	str	r3, [r1, #0]
 800b98c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800ba04 <__b2d+0x98>
 800b990:	dc14      	bgt.n	800b9bc <__b2d+0x50>
 800b992:	f1c0 0e0b 	rsb	lr, r0, #11
 800b996:	fa24 f10e 	lsr.w	r1, r4, lr
 800b99a:	42b7      	cmp	r7, r6
 800b99c:	ea41 030c 	orr.w	r3, r1, ip
 800b9a0:	bf34      	ite	cc
 800b9a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b9a6:	2100      	movcs	r1, #0
 800b9a8:	3015      	adds	r0, #21
 800b9aa:	fa04 f000 	lsl.w	r0, r4, r0
 800b9ae:	fa21 f10e 	lsr.w	r1, r1, lr
 800b9b2:	ea40 0201 	orr.w	r2, r0, r1
 800b9b6:	ec43 2b10 	vmov	d0, r2, r3
 800b9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9bc:	42b7      	cmp	r7, r6
 800b9be:	bf3a      	itte	cc
 800b9c0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b9c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b9c8:	2100      	movcs	r1, #0
 800b9ca:	380b      	subs	r0, #11
 800b9cc:	d015      	beq.n	800b9fa <__b2d+0x8e>
 800b9ce:	4084      	lsls	r4, r0
 800b9d0:	f1c0 0520 	rsb	r5, r0, #32
 800b9d4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b9d8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b9dc:	42be      	cmp	r6, r7
 800b9de:	fa21 fc05 	lsr.w	ip, r1, r5
 800b9e2:	ea44 030c 	orr.w	r3, r4, ip
 800b9e6:	bf8c      	ite	hi
 800b9e8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b9ec:	2400      	movls	r4, #0
 800b9ee:	fa01 f000 	lsl.w	r0, r1, r0
 800b9f2:	40ec      	lsrs	r4, r5
 800b9f4:	ea40 0204 	orr.w	r2, r0, r4
 800b9f8:	e7dd      	b.n	800b9b6 <__b2d+0x4a>
 800b9fa:	ea44 030c 	orr.w	r3, r4, ip
 800b9fe:	460a      	mov	r2, r1
 800ba00:	e7d9      	b.n	800b9b6 <__b2d+0x4a>
 800ba02:	bf00      	nop
 800ba04:	3ff00000 	.word	0x3ff00000

0800ba08 <__d2b>:
 800ba08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba0c:	460e      	mov	r6, r1
 800ba0e:	2101      	movs	r1, #1
 800ba10:	ec59 8b10 	vmov	r8, r9, d0
 800ba14:	4615      	mov	r5, r2
 800ba16:	f7ff fcb6 	bl	800b386 <_Balloc>
 800ba1a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ba1e:	4607      	mov	r7, r0
 800ba20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba24:	bb34      	cbnz	r4, 800ba74 <__d2b+0x6c>
 800ba26:	9301      	str	r3, [sp, #4]
 800ba28:	f1b8 0300 	subs.w	r3, r8, #0
 800ba2c:	d027      	beq.n	800ba7e <__d2b+0x76>
 800ba2e:	a802      	add	r0, sp, #8
 800ba30:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ba34:	f7ff fd8a 	bl	800b54c <__lo0bits>
 800ba38:	9900      	ldr	r1, [sp, #0]
 800ba3a:	b1f0      	cbz	r0, 800ba7a <__d2b+0x72>
 800ba3c:	9a01      	ldr	r2, [sp, #4]
 800ba3e:	f1c0 0320 	rsb	r3, r0, #32
 800ba42:	fa02 f303 	lsl.w	r3, r2, r3
 800ba46:	430b      	orrs	r3, r1
 800ba48:	40c2      	lsrs	r2, r0
 800ba4a:	617b      	str	r3, [r7, #20]
 800ba4c:	9201      	str	r2, [sp, #4]
 800ba4e:	9b01      	ldr	r3, [sp, #4]
 800ba50:	61bb      	str	r3, [r7, #24]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	bf14      	ite	ne
 800ba56:	2102      	movne	r1, #2
 800ba58:	2101      	moveq	r1, #1
 800ba5a:	6139      	str	r1, [r7, #16]
 800ba5c:	b1c4      	cbz	r4, 800ba90 <__d2b+0x88>
 800ba5e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ba62:	4404      	add	r4, r0
 800ba64:	6034      	str	r4, [r6, #0]
 800ba66:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba6a:	6028      	str	r0, [r5, #0]
 800ba6c:	4638      	mov	r0, r7
 800ba6e:	b003      	add	sp, #12
 800ba70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba78:	e7d5      	b.n	800ba26 <__d2b+0x1e>
 800ba7a:	6179      	str	r1, [r7, #20]
 800ba7c:	e7e7      	b.n	800ba4e <__d2b+0x46>
 800ba7e:	a801      	add	r0, sp, #4
 800ba80:	f7ff fd64 	bl	800b54c <__lo0bits>
 800ba84:	9b01      	ldr	r3, [sp, #4]
 800ba86:	617b      	str	r3, [r7, #20]
 800ba88:	2101      	movs	r1, #1
 800ba8a:	6139      	str	r1, [r7, #16]
 800ba8c:	3020      	adds	r0, #32
 800ba8e:	e7e5      	b.n	800ba5c <__d2b+0x54>
 800ba90:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ba94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba98:	6030      	str	r0, [r6, #0]
 800ba9a:	6918      	ldr	r0, [r3, #16]
 800ba9c:	f7ff fd37 	bl	800b50e <__hi0bits>
 800baa0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800baa4:	e7e1      	b.n	800ba6a <__d2b+0x62>

0800baa6 <__ratio>:
 800baa6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baaa:	4688      	mov	r8, r1
 800baac:	4669      	mov	r1, sp
 800baae:	4681      	mov	r9, r0
 800bab0:	f7ff ff5c 	bl	800b96c <__b2d>
 800bab4:	a901      	add	r1, sp, #4
 800bab6:	4640      	mov	r0, r8
 800bab8:	ec57 6b10 	vmov	r6, r7, d0
 800babc:	f7ff ff56 	bl	800b96c <__b2d>
 800bac0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bac4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bac8:	eba3 0c02 	sub.w	ip, r3, r2
 800bacc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bad0:	1a9b      	subs	r3, r3, r2
 800bad2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bad6:	ec5b ab10 	vmov	sl, fp, d0
 800bada:	2b00      	cmp	r3, #0
 800badc:	bfce      	itee	gt
 800bade:	463a      	movgt	r2, r7
 800bae0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bae4:	465a      	movle	r2, fp
 800bae6:	4659      	mov	r1, fp
 800bae8:	463d      	mov	r5, r7
 800baea:	bfd4      	ite	le
 800baec:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800baf0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800baf4:	4630      	mov	r0, r6
 800baf6:	ee10 2a10 	vmov	r2, s0
 800bafa:	460b      	mov	r3, r1
 800bafc:	4629      	mov	r1, r5
 800bafe:	f7f4 fec5 	bl	800088c <__aeabi_ddiv>
 800bb02:	ec41 0b10 	vmov	d0, r0, r1
 800bb06:	b003      	add	sp, #12
 800bb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb0c <__copybits>:
 800bb0c:	3901      	subs	r1, #1
 800bb0e:	b510      	push	{r4, lr}
 800bb10:	1149      	asrs	r1, r1, #5
 800bb12:	6914      	ldr	r4, [r2, #16]
 800bb14:	3101      	adds	r1, #1
 800bb16:	f102 0314 	add.w	r3, r2, #20
 800bb1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bb1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb22:	42a3      	cmp	r3, r4
 800bb24:	4602      	mov	r2, r0
 800bb26:	d303      	bcc.n	800bb30 <__copybits+0x24>
 800bb28:	2300      	movs	r3, #0
 800bb2a:	428a      	cmp	r2, r1
 800bb2c:	d305      	bcc.n	800bb3a <__copybits+0x2e>
 800bb2e:	bd10      	pop	{r4, pc}
 800bb30:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb34:	f840 2b04 	str.w	r2, [r0], #4
 800bb38:	e7f3      	b.n	800bb22 <__copybits+0x16>
 800bb3a:	f842 3b04 	str.w	r3, [r2], #4
 800bb3e:	e7f4      	b.n	800bb2a <__copybits+0x1e>

0800bb40 <__any_on>:
 800bb40:	f100 0214 	add.w	r2, r0, #20
 800bb44:	6900      	ldr	r0, [r0, #16]
 800bb46:	114b      	asrs	r3, r1, #5
 800bb48:	4298      	cmp	r0, r3
 800bb4a:	b510      	push	{r4, lr}
 800bb4c:	db11      	blt.n	800bb72 <__any_on+0x32>
 800bb4e:	dd0a      	ble.n	800bb66 <__any_on+0x26>
 800bb50:	f011 011f 	ands.w	r1, r1, #31
 800bb54:	d007      	beq.n	800bb66 <__any_on+0x26>
 800bb56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bb5a:	fa24 f001 	lsr.w	r0, r4, r1
 800bb5e:	fa00 f101 	lsl.w	r1, r0, r1
 800bb62:	428c      	cmp	r4, r1
 800bb64:	d10b      	bne.n	800bb7e <__any_on+0x3e>
 800bb66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d803      	bhi.n	800bb76 <__any_on+0x36>
 800bb6e:	2000      	movs	r0, #0
 800bb70:	bd10      	pop	{r4, pc}
 800bb72:	4603      	mov	r3, r0
 800bb74:	e7f7      	b.n	800bb66 <__any_on+0x26>
 800bb76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb7a:	2900      	cmp	r1, #0
 800bb7c:	d0f5      	beq.n	800bb6a <__any_on+0x2a>
 800bb7e:	2001      	movs	r0, #1
 800bb80:	e7f6      	b.n	800bb70 <__any_on+0x30>

0800bb82 <_calloc_r>:
 800bb82:	b538      	push	{r3, r4, r5, lr}
 800bb84:	fb02 f401 	mul.w	r4, r2, r1
 800bb88:	4621      	mov	r1, r4
 800bb8a:	f000 f857 	bl	800bc3c <_malloc_r>
 800bb8e:	4605      	mov	r5, r0
 800bb90:	b118      	cbz	r0, 800bb9a <_calloc_r+0x18>
 800bb92:	4622      	mov	r2, r4
 800bb94:	2100      	movs	r1, #0
 800bb96:	f7fc fd37 	bl	8008608 <memset>
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bba0 <_free_r>:
 800bba0:	b538      	push	{r3, r4, r5, lr}
 800bba2:	4605      	mov	r5, r0
 800bba4:	2900      	cmp	r1, #0
 800bba6:	d045      	beq.n	800bc34 <_free_r+0x94>
 800bba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbac:	1f0c      	subs	r4, r1, #4
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	bfb8      	it	lt
 800bbb2:	18e4      	addlt	r4, r4, r3
 800bbb4:	f000 fa36 	bl	800c024 <__malloc_lock>
 800bbb8:	4a1f      	ldr	r2, [pc, #124]	; (800bc38 <_free_r+0x98>)
 800bbba:	6813      	ldr	r3, [r2, #0]
 800bbbc:	4610      	mov	r0, r2
 800bbbe:	b933      	cbnz	r3, 800bbce <_free_r+0x2e>
 800bbc0:	6063      	str	r3, [r4, #4]
 800bbc2:	6014      	str	r4, [r2, #0]
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbca:	f000 ba2c 	b.w	800c026 <__malloc_unlock>
 800bbce:	42a3      	cmp	r3, r4
 800bbd0:	d90c      	bls.n	800bbec <_free_r+0x4c>
 800bbd2:	6821      	ldr	r1, [r4, #0]
 800bbd4:	1862      	adds	r2, r4, r1
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	bf04      	itt	eq
 800bbda:	681a      	ldreq	r2, [r3, #0]
 800bbdc:	685b      	ldreq	r3, [r3, #4]
 800bbde:	6063      	str	r3, [r4, #4]
 800bbe0:	bf04      	itt	eq
 800bbe2:	1852      	addeq	r2, r2, r1
 800bbe4:	6022      	streq	r2, [r4, #0]
 800bbe6:	6004      	str	r4, [r0, #0]
 800bbe8:	e7ec      	b.n	800bbc4 <_free_r+0x24>
 800bbea:	4613      	mov	r3, r2
 800bbec:	685a      	ldr	r2, [r3, #4]
 800bbee:	b10a      	cbz	r2, 800bbf4 <_free_r+0x54>
 800bbf0:	42a2      	cmp	r2, r4
 800bbf2:	d9fa      	bls.n	800bbea <_free_r+0x4a>
 800bbf4:	6819      	ldr	r1, [r3, #0]
 800bbf6:	1858      	adds	r0, r3, r1
 800bbf8:	42a0      	cmp	r0, r4
 800bbfa:	d10b      	bne.n	800bc14 <_free_r+0x74>
 800bbfc:	6820      	ldr	r0, [r4, #0]
 800bbfe:	4401      	add	r1, r0
 800bc00:	1858      	adds	r0, r3, r1
 800bc02:	4282      	cmp	r2, r0
 800bc04:	6019      	str	r1, [r3, #0]
 800bc06:	d1dd      	bne.n	800bbc4 <_free_r+0x24>
 800bc08:	6810      	ldr	r0, [r2, #0]
 800bc0a:	6852      	ldr	r2, [r2, #4]
 800bc0c:	605a      	str	r2, [r3, #4]
 800bc0e:	4401      	add	r1, r0
 800bc10:	6019      	str	r1, [r3, #0]
 800bc12:	e7d7      	b.n	800bbc4 <_free_r+0x24>
 800bc14:	d902      	bls.n	800bc1c <_free_r+0x7c>
 800bc16:	230c      	movs	r3, #12
 800bc18:	602b      	str	r3, [r5, #0]
 800bc1a:	e7d3      	b.n	800bbc4 <_free_r+0x24>
 800bc1c:	6820      	ldr	r0, [r4, #0]
 800bc1e:	1821      	adds	r1, r4, r0
 800bc20:	428a      	cmp	r2, r1
 800bc22:	bf04      	itt	eq
 800bc24:	6811      	ldreq	r1, [r2, #0]
 800bc26:	6852      	ldreq	r2, [r2, #4]
 800bc28:	6062      	str	r2, [r4, #4]
 800bc2a:	bf04      	itt	eq
 800bc2c:	1809      	addeq	r1, r1, r0
 800bc2e:	6021      	streq	r1, [r4, #0]
 800bc30:	605c      	str	r4, [r3, #4]
 800bc32:	e7c7      	b.n	800bbc4 <_free_r+0x24>
 800bc34:	bd38      	pop	{r3, r4, r5, pc}
 800bc36:	bf00      	nop
 800bc38:	20000210 	.word	0x20000210

0800bc3c <_malloc_r>:
 800bc3c:	b570      	push	{r4, r5, r6, lr}
 800bc3e:	1ccd      	adds	r5, r1, #3
 800bc40:	f025 0503 	bic.w	r5, r5, #3
 800bc44:	3508      	adds	r5, #8
 800bc46:	2d0c      	cmp	r5, #12
 800bc48:	bf38      	it	cc
 800bc4a:	250c      	movcc	r5, #12
 800bc4c:	2d00      	cmp	r5, #0
 800bc4e:	4606      	mov	r6, r0
 800bc50:	db01      	blt.n	800bc56 <_malloc_r+0x1a>
 800bc52:	42a9      	cmp	r1, r5
 800bc54:	d903      	bls.n	800bc5e <_malloc_r+0x22>
 800bc56:	230c      	movs	r3, #12
 800bc58:	6033      	str	r3, [r6, #0]
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	bd70      	pop	{r4, r5, r6, pc}
 800bc5e:	f000 f9e1 	bl	800c024 <__malloc_lock>
 800bc62:	4a21      	ldr	r2, [pc, #132]	; (800bce8 <_malloc_r+0xac>)
 800bc64:	6814      	ldr	r4, [r2, #0]
 800bc66:	4621      	mov	r1, r4
 800bc68:	b991      	cbnz	r1, 800bc90 <_malloc_r+0x54>
 800bc6a:	4c20      	ldr	r4, [pc, #128]	; (800bcec <_malloc_r+0xb0>)
 800bc6c:	6823      	ldr	r3, [r4, #0]
 800bc6e:	b91b      	cbnz	r3, 800bc78 <_malloc_r+0x3c>
 800bc70:	4630      	mov	r0, r6
 800bc72:	f000 f98f 	bl	800bf94 <_sbrk_r>
 800bc76:	6020      	str	r0, [r4, #0]
 800bc78:	4629      	mov	r1, r5
 800bc7a:	4630      	mov	r0, r6
 800bc7c:	f000 f98a 	bl	800bf94 <_sbrk_r>
 800bc80:	1c43      	adds	r3, r0, #1
 800bc82:	d124      	bne.n	800bcce <_malloc_r+0x92>
 800bc84:	230c      	movs	r3, #12
 800bc86:	6033      	str	r3, [r6, #0]
 800bc88:	4630      	mov	r0, r6
 800bc8a:	f000 f9cc 	bl	800c026 <__malloc_unlock>
 800bc8e:	e7e4      	b.n	800bc5a <_malloc_r+0x1e>
 800bc90:	680b      	ldr	r3, [r1, #0]
 800bc92:	1b5b      	subs	r3, r3, r5
 800bc94:	d418      	bmi.n	800bcc8 <_malloc_r+0x8c>
 800bc96:	2b0b      	cmp	r3, #11
 800bc98:	d90f      	bls.n	800bcba <_malloc_r+0x7e>
 800bc9a:	600b      	str	r3, [r1, #0]
 800bc9c:	50cd      	str	r5, [r1, r3]
 800bc9e:	18cc      	adds	r4, r1, r3
 800bca0:	4630      	mov	r0, r6
 800bca2:	f000 f9c0 	bl	800c026 <__malloc_unlock>
 800bca6:	f104 000b 	add.w	r0, r4, #11
 800bcaa:	1d23      	adds	r3, r4, #4
 800bcac:	f020 0007 	bic.w	r0, r0, #7
 800bcb0:	1ac3      	subs	r3, r0, r3
 800bcb2:	d0d3      	beq.n	800bc5c <_malloc_r+0x20>
 800bcb4:	425a      	negs	r2, r3
 800bcb6:	50e2      	str	r2, [r4, r3]
 800bcb8:	e7d0      	b.n	800bc5c <_malloc_r+0x20>
 800bcba:	428c      	cmp	r4, r1
 800bcbc:	684b      	ldr	r3, [r1, #4]
 800bcbe:	bf16      	itet	ne
 800bcc0:	6063      	strne	r3, [r4, #4]
 800bcc2:	6013      	streq	r3, [r2, #0]
 800bcc4:	460c      	movne	r4, r1
 800bcc6:	e7eb      	b.n	800bca0 <_malloc_r+0x64>
 800bcc8:	460c      	mov	r4, r1
 800bcca:	6849      	ldr	r1, [r1, #4]
 800bccc:	e7cc      	b.n	800bc68 <_malloc_r+0x2c>
 800bcce:	1cc4      	adds	r4, r0, #3
 800bcd0:	f024 0403 	bic.w	r4, r4, #3
 800bcd4:	42a0      	cmp	r0, r4
 800bcd6:	d005      	beq.n	800bce4 <_malloc_r+0xa8>
 800bcd8:	1a21      	subs	r1, r4, r0
 800bcda:	4630      	mov	r0, r6
 800bcdc:	f000 f95a 	bl	800bf94 <_sbrk_r>
 800bce0:	3001      	adds	r0, #1
 800bce2:	d0cf      	beq.n	800bc84 <_malloc_r+0x48>
 800bce4:	6025      	str	r5, [r4, #0]
 800bce6:	e7db      	b.n	800bca0 <_malloc_r+0x64>
 800bce8:	20000210 	.word	0x20000210
 800bcec:	20000214 	.word	0x20000214

0800bcf0 <__ssputs_r>:
 800bcf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcf4:	688e      	ldr	r6, [r1, #8]
 800bcf6:	429e      	cmp	r6, r3
 800bcf8:	4682      	mov	sl, r0
 800bcfa:	460c      	mov	r4, r1
 800bcfc:	4690      	mov	r8, r2
 800bcfe:	4699      	mov	r9, r3
 800bd00:	d837      	bhi.n	800bd72 <__ssputs_r+0x82>
 800bd02:	898a      	ldrh	r2, [r1, #12]
 800bd04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd08:	d031      	beq.n	800bd6e <__ssputs_r+0x7e>
 800bd0a:	6825      	ldr	r5, [r4, #0]
 800bd0c:	6909      	ldr	r1, [r1, #16]
 800bd0e:	1a6f      	subs	r7, r5, r1
 800bd10:	6965      	ldr	r5, [r4, #20]
 800bd12:	2302      	movs	r3, #2
 800bd14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd18:	fb95 f5f3 	sdiv	r5, r5, r3
 800bd1c:	f109 0301 	add.w	r3, r9, #1
 800bd20:	443b      	add	r3, r7
 800bd22:	429d      	cmp	r5, r3
 800bd24:	bf38      	it	cc
 800bd26:	461d      	movcc	r5, r3
 800bd28:	0553      	lsls	r3, r2, #21
 800bd2a:	d530      	bpl.n	800bd8e <__ssputs_r+0x9e>
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	f7ff ff85 	bl	800bc3c <_malloc_r>
 800bd32:	4606      	mov	r6, r0
 800bd34:	b950      	cbnz	r0, 800bd4c <__ssputs_r+0x5c>
 800bd36:	230c      	movs	r3, #12
 800bd38:	f8ca 3000 	str.w	r3, [sl]
 800bd3c:	89a3      	ldrh	r3, [r4, #12]
 800bd3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd42:	81a3      	strh	r3, [r4, #12]
 800bd44:	f04f 30ff 	mov.w	r0, #4294967295
 800bd48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd4c:	463a      	mov	r2, r7
 800bd4e:	6921      	ldr	r1, [r4, #16]
 800bd50:	f7ff fb0e 	bl	800b370 <memcpy>
 800bd54:	89a3      	ldrh	r3, [r4, #12]
 800bd56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd5e:	81a3      	strh	r3, [r4, #12]
 800bd60:	6126      	str	r6, [r4, #16]
 800bd62:	6165      	str	r5, [r4, #20]
 800bd64:	443e      	add	r6, r7
 800bd66:	1bed      	subs	r5, r5, r7
 800bd68:	6026      	str	r6, [r4, #0]
 800bd6a:	60a5      	str	r5, [r4, #8]
 800bd6c:	464e      	mov	r6, r9
 800bd6e:	454e      	cmp	r6, r9
 800bd70:	d900      	bls.n	800bd74 <__ssputs_r+0x84>
 800bd72:	464e      	mov	r6, r9
 800bd74:	4632      	mov	r2, r6
 800bd76:	4641      	mov	r1, r8
 800bd78:	6820      	ldr	r0, [r4, #0]
 800bd7a:	f000 f93a 	bl	800bff2 <memmove>
 800bd7e:	68a3      	ldr	r3, [r4, #8]
 800bd80:	1b9b      	subs	r3, r3, r6
 800bd82:	60a3      	str	r3, [r4, #8]
 800bd84:	6823      	ldr	r3, [r4, #0]
 800bd86:	441e      	add	r6, r3
 800bd88:	6026      	str	r6, [r4, #0]
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	e7dc      	b.n	800bd48 <__ssputs_r+0x58>
 800bd8e:	462a      	mov	r2, r5
 800bd90:	f000 f94a 	bl	800c028 <_realloc_r>
 800bd94:	4606      	mov	r6, r0
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d1e2      	bne.n	800bd60 <__ssputs_r+0x70>
 800bd9a:	6921      	ldr	r1, [r4, #16]
 800bd9c:	4650      	mov	r0, sl
 800bd9e:	f7ff feff 	bl	800bba0 <_free_r>
 800bda2:	e7c8      	b.n	800bd36 <__ssputs_r+0x46>

0800bda4 <_svfiprintf_r>:
 800bda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda8:	461d      	mov	r5, r3
 800bdaa:	898b      	ldrh	r3, [r1, #12]
 800bdac:	061f      	lsls	r7, r3, #24
 800bdae:	b09d      	sub	sp, #116	; 0x74
 800bdb0:	4680      	mov	r8, r0
 800bdb2:	460c      	mov	r4, r1
 800bdb4:	4616      	mov	r6, r2
 800bdb6:	d50f      	bpl.n	800bdd8 <_svfiprintf_r+0x34>
 800bdb8:	690b      	ldr	r3, [r1, #16]
 800bdba:	b96b      	cbnz	r3, 800bdd8 <_svfiprintf_r+0x34>
 800bdbc:	2140      	movs	r1, #64	; 0x40
 800bdbe:	f7ff ff3d 	bl	800bc3c <_malloc_r>
 800bdc2:	6020      	str	r0, [r4, #0]
 800bdc4:	6120      	str	r0, [r4, #16]
 800bdc6:	b928      	cbnz	r0, 800bdd4 <_svfiprintf_r+0x30>
 800bdc8:	230c      	movs	r3, #12
 800bdca:	f8c8 3000 	str.w	r3, [r8]
 800bdce:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd2:	e0c8      	b.n	800bf66 <_svfiprintf_r+0x1c2>
 800bdd4:	2340      	movs	r3, #64	; 0x40
 800bdd6:	6163      	str	r3, [r4, #20]
 800bdd8:	2300      	movs	r3, #0
 800bdda:	9309      	str	r3, [sp, #36]	; 0x24
 800bddc:	2320      	movs	r3, #32
 800bdde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bde2:	2330      	movs	r3, #48	; 0x30
 800bde4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bde8:	9503      	str	r5, [sp, #12]
 800bdea:	f04f 0b01 	mov.w	fp, #1
 800bdee:	4637      	mov	r7, r6
 800bdf0:	463d      	mov	r5, r7
 800bdf2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bdf6:	b10b      	cbz	r3, 800bdfc <_svfiprintf_r+0x58>
 800bdf8:	2b25      	cmp	r3, #37	; 0x25
 800bdfa:	d13e      	bne.n	800be7a <_svfiprintf_r+0xd6>
 800bdfc:	ebb7 0a06 	subs.w	sl, r7, r6
 800be00:	d00b      	beq.n	800be1a <_svfiprintf_r+0x76>
 800be02:	4653      	mov	r3, sl
 800be04:	4632      	mov	r2, r6
 800be06:	4621      	mov	r1, r4
 800be08:	4640      	mov	r0, r8
 800be0a:	f7ff ff71 	bl	800bcf0 <__ssputs_r>
 800be0e:	3001      	adds	r0, #1
 800be10:	f000 80a4 	beq.w	800bf5c <_svfiprintf_r+0x1b8>
 800be14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be16:	4453      	add	r3, sl
 800be18:	9309      	str	r3, [sp, #36]	; 0x24
 800be1a:	783b      	ldrb	r3, [r7, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f000 809d 	beq.w	800bf5c <_svfiprintf_r+0x1b8>
 800be22:	2300      	movs	r3, #0
 800be24:	f04f 32ff 	mov.w	r2, #4294967295
 800be28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be2c:	9304      	str	r3, [sp, #16]
 800be2e:	9307      	str	r3, [sp, #28]
 800be30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be34:	931a      	str	r3, [sp, #104]	; 0x68
 800be36:	462f      	mov	r7, r5
 800be38:	2205      	movs	r2, #5
 800be3a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800be3e:	4850      	ldr	r0, [pc, #320]	; (800bf80 <_svfiprintf_r+0x1dc>)
 800be40:	f7f4 f9ee 	bl	8000220 <memchr>
 800be44:	9b04      	ldr	r3, [sp, #16]
 800be46:	b9d0      	cbnz	r0, 800be7e <_svfiprintf_r+0xda>
 800be48:	06d9      	lsls	r1, r3, #27
 800be4a:	bf44      	itt	mi
 800be4c:	2220      	movmi	r2, #32
 800be4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be52:	071a      	lsls	r2, r3, #28
 800be54:	bf44      	itt	mi
 800be56:	222b      	movmi	r2, #43	; 0x2b
 800be58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be5c:	782a      	ldrb	r2, [r5, #0]
 800be5e:	2a2a      	cmp	r2, #42	; 0x2a
 800be60:	d015      	beq.n	800be8e <_svfiprintf_r+0xea>
 800be62:	9a07      	ldr	r2, [sp, #28]
 800be64:	462f      	mov	r7, r5
 800be66:	2000      	movs	r0, #0
 800be68:	250a      	movs	r5, #10
 800be6a:	4639      	mov	r1, r7
 800be6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be70:	3b30      	subs	r3, #48	; 0x30
 800be72:	2b09      	cmp	r3, #9
 800be74:	d94d      	bls.n	800bf12 <_svfiprintf_r+0x16e>
 800be76:	b1b8      	cbz	r0, 800bea8 <_svfiprintf_r+0x104>
 800be78:	e00f      	b.n	800be9a <_svfiprintf_r+0xf6>
 800be7a:	462f      	mov	r7, r5
 800be7c:	e7b8      	b.n	800bdf0 <_svfiprintf_r+0x4c>
 800be7e:	4a40      	ldr	r2, [pc, #256]	; (800bf80 <_svfiprintf_r+0x1dc>)
 800be80:	1a80      	subs	r0, r0, r2
 800be82:	fa0b f000 	lsl.w	r0, fp, r0
 800be86:	4318      	orrs	r0, r3
 800be88:	9004      	str	r0, [sp, #16]
 800be8a:	463d      	mov	r5, r7
 800be8c:	e7d3      	b.n	800be36 <_svfiprintf_r+0x92>
 800be8e:	9a03      	ldr	r2, [sp, #12]
 800be90:	1d11      	adds	r1, r2, #4
 800be92:	6812      	ldr	r2, [r2, #0]
 800be94:	9103      	str	r1, [sp, #12]
 800be96:	2a00      	cmp	r2, #0
 800be98:	db01      	blt.n	800be9e <_svfiprintf_r+0xfa>
 800be9a:	9207      	str	r2, [sp, #28]
 800be9c:	e004      	b.n	800bea8 <_svfiprintf_r+0x104>
 800be9e:	4252      	negs	r2, r2
 800bea0:	f043 0302 	orr.w	r3, r3, #2
 800bea4:	9207      	str	r2, [sp, #28]
 800bea6:	9304      	str	r3, [sp, #16]
 800bea8:	783b      	ldrb	r3, [r7, #0]
 800beaa:	2b2e      	cmp	r3, #46	; 0x2e
 800beac:	d10c      	bne.n	800bec8 <_svfiprintf_r+0x124>
 800beae:	787b      	ldrb	r3, [r7, #1]
 800beb0:	2b2a      	cmp	r3, #42	; 0x2a
 800beb2:	d133      	bne.n	800bf1c <_svfiprintf_r+0x178>
 800beb4:	9b03      	ldr	r3, [sp, #12]
 800beb6:	1d1a      	adds	r2, r3, #4
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	9203      	str	r2, [sp, #12]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	bfb8      	it	lt
 800bec0:	f04f 33ff 	movlt.w	r3, #4294967295
 800bec4:	3702      	adds	r7, #2
 800bec6:	9305      	str	r3, [sp, #20]
 800bec8:	4d2e      	ldr	r5, [pc, #184]	; (800bf84 <_svfiprintf_r+0x1e0>)
 800beca:	7839      	ldrb	r1, [r7, #0]
 800becc:	2203      	movs	r2, #3
 800bece:	4628      	mov	r0, r5
 800bed0:	f7f4 f9a6 	bl	8000220 <memchr>
 800bed4:	b138      	cbz	r0, 800bee6 <_svfiprintf_r+0x142>
 800bed6:	2340      	movs	r3, #64	; 0x40
 800bed8:	1b40      	subs	r0, r0, r5
 800beda:	fa03 f000 	lsl.w	r0, r3, r0
 800bede:	9b04      	ldr	r3, [sp, #16]
 800bee0:	4303      	orrs	r3, r0
 800bee2:	3701      	adds	r7, #1
 800bee4:	9304      	str	r3, [sp, #16]
 800bee6:	7839      	ldrb	r1, [r7, #0]
 800bee8:	4827      	ldr	r0, [pc, #156]	; (800bf88 <_svfiprintf_r+0x1e4>)
 800beea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800beee:	2206      	movs	r2, #6
 800bef0:	1c7e      	adds	r6, r7, #1
 800bef2:	f7f4 f995 	bl	8000220 <memchr>
 800bef6:	2800      	cmp	r0, #0
 800bef8:	d038      	beq.n	800bf6c <_svfiprintf_r+0x1c8>
 800befa:	4b24      	ldr	r3, [pc, #144]	; (800bf8c <_svfiprintf_r+0x1e8>)
 800befc:	bb13      	cbnz	r3, 800bf44 <_svfiprintf_r+0x1a0>
 800befe:	9b03      	ldr	r3, [sp, #12]
 800bf00:	3307      	adds	r3, #7
 800bf02:	f023 0307 	bic.w	r3, r3, #7
 800bf06:	3308      	adds	r3, #8
 800bf08:	9303      	str	r3, [sp, #12]
 800bf0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf0c:	444b      	add	r3, r9
 800bf0e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf10:	e76d      	b.n	800bdee <_svfiprintf_r+0x4a>
 800bf12:	fb05 3202 	mla	r2, r5, r2, r3
 800bf16:	2001      	movs	r0, #1
 800bf18:	460f      	mov	r7, r1
 800bf1a:	e7a6      	b.n	800be6a <_svfiprintf_r+0xc6>
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	3701      	adds	r7, #1
 800bf20:	9305      	str	r3, [sp, #20]
 800bf22:	4619      	mov	r1, r3
 800bf24:	250a      	movs	r5, #10
 800bf26:	4638      	mov	r0, r7
 800bf28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf2c:	3a30      	subs	r2, #48	; 0x30
 800bf2e:	2a09      	cmp	r2, #9
 800bf30:	d903      	bls.n	800bf3a <_svfiprintf_r+0x196>
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d0c8      	beq.n	800bec8 <_svfiprintf_r+0x124>
 800bf36:	9105      	str	r1, [sp, #20]
 800bf38:	e7c6      	b.n	800bec8 <_svfiprintf_r+0x124>
 800bf3a:	fb05 2101 	mla	r1, r5, r1, r2
 800bf3e:	2301      	movs	r3, #1
 800bf40:	4607      	mov	r7, r0
 800bf42:	e7f0      	b.n	800bf26 <_svfiprintf_r+0x182>
 800bf44:	ab03      	add	r3, sp, #12
 800bf46:	9300      	str	r3, [sp, #0]
 800bf48:	4622      	mov	r2, r4
 800bf4a:	4b11      	ldr	r3, [pc, #68]	; (800bf90 <_svfiprintf_r+0x1ec>)
 800bf4c:	a904      	add	r1, sp, #16
 800bf4e:	4640      	mov	r0, r8
 800bf50:	f7fc fbf6 	bl	8008740 <_printf_float>
 800bf54:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bf58:	4681      	mov	r9, r0
 800bf5a:	d1d6      	bne.n	800bf0a <_svfiprintf_r+0x166>
 800bf5c:	89a3      	ldrh	r3, [r4, #12]
 800bf5e:	065b      	lsls	r3, r3, #25
 800bf60:	f53f af35 	bmi.w	800bdce <_svfiprintf_r+0x2a>
 800bf64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf66:	b01d      	add	sp, #116	; 0x74
 800bf68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf6c:	ab03      	add	r3, sp, #12
 800bf6e:	9300      	str	r3, [sp, #0]
 800bf70:	4622      	mov	r2, r4
 800bf72:	4b07      	ldr	r3, [pc, #28]	; (800bf90 <_svfiprintf_r+0x1ec>)
 800bf74:	a904      	add	r1, sp, #16
 800bf76:	4640      	mov	r0, r8
 800bf78:	f7fc fe98 	bl	8008cac <_printf_i>
 800bf7c:	e7ea      	b.n	800bf54 <_svfiprintf_r+0x1b0>
 800bf7e:	bf00      	nop
 800bf80:	0800c264 	.word	0x0800c264
 800bf84:	0800c26a 	.word	0x0800c26a
 800bf88:	0800c26e 	.word	0x0800c26e
 800bf8c:	08008741 	.word	0x08008741
 800bf90:	0800bcf1 	.word	0x0800bcf1

0800bf94 <_sbrk_r>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	4c06      	ldr	r4, [pc, #24]	; (800bfb0 <_sbrk_r+0x1c>)
 800bf98:	2300      	movs	r3, #0
 800bf9a:	4605      	mov	r5, r0
 800bf9c:	4608      	mov	r0, r1
 800bf9e:	6023      	str	r3, [r4, #0]
 800bfa0:	f7f6 fe00 	bl	8002ba4 <_sbrk>
 800bfa4:	1c43      	adds	r3, r0, #1
 800bfa6:	d102      	bne.n	800bfae <_sbrk_r+0x1a>
 800bfa8:	6823      	ldr	r3, [r4, #0]
 800bfaa:	b103      	cbz	r3, 800bfae <_sbrk_r+0x1a>
 800bfac:	602b      	str	r3, [r5, #0]
 800bfae:	bd38      	pop	{r3, r4, r5, pc}
 800bfb0:	200005b8 	.word	0x200005b8

0800bfb4 <strncmp>:
 800bfb4:	b510      	push	{r4, lr}
 800bfb6:	b16a      	cbz	r2, 800bfd4 <strncmp+0x20>
 800bfb8:	3901      	subs	r1, #1
 800bfba:	1884      	adds	r4, r0, r2
 800bfbc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bfc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d103      	bne.n	800bfd0 <strncmp+0x1c>
 800bfc8:	42a0      	cmp	r0, r4
 800bfca:	d001      	beq.n	800bfd0 <strncmp+0x1c>
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1f5      	bne.n	800bfbc <strncmp+0x8>
 800bfd0:	1a98      	subs	r0, r3, r2
 800bfd2:	bd10      	pop	{r4, pc}
 800bfd4:	4610      	mov	r0, r2
 800bfd6:	e7fc      	b.n	800bfd2 <strncmp+0x1e>

0800bfd8 <__ascii_wctomb>:
 800bfd8:	b149      	cbz	r1, 800bfee <__ascii_wctomb+0x16>
 800bfda:	2aff      	cmp	r2, #255	; 0xff
 800bfdc:	bf85      	ittet	hi
 800bfde:	238a      	movhi	r3, #138	; 0x8a
 800bfe0:	6003      	strhi	r3, [r0, #0]
 800bfe2:	700a      	strbls	r2, [r1, #0]
 800bfe4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bfe8:	bf98      	it	ls
 800bfea:	2001      	movls	r0, #1
 800bfec:	4770      	bx	lr
 800bfee:	4608      	mov	r0, r1
 800bff0:	4770      	bx	lr

0800bff2 <memmove>:
 800bff2:	4288      	cmp	r0, r1
 800bff4:	b510      	push	{r4, lr}
 800bff6:	eb01 0302 	add.w	r3, r1, r2
 800bffa:	d807      	bhi.n	800c00c <memmove+0x1a>
 800bffc:	1e42      	subs	r2, r0, #1
 800bffe:	4299      	cmp	r1, r3
 800c000:	d00a      	beq.n	800c018 <memmove+0x26>
 800c002:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c006:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c00a:	e7f8      	b.n	800bffe <memmove+0xc>
 800c00c:	4283      	cmp	r3, r0
 800c00e:	d9f5      	bls.n	800bffc <memmove+0xa>
 800c010:	1881      	adds	r1, r0, r2
 800c012:	1ad2      	subs	r2, r2, r3
 800c014:	42d3      	cmn	r3, r2
 800c016:	d100      	bne.n	800c01a <memmove+0x28>
 800c018:	bd10      	pop	{r4, pc}
 800c01a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c01e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c022:	e7f7      	b.n	800c014 <memmove+0x22>

0800c024 <__malloc_lock>:
 800c024:	4770      	bx	lr

0800c026 <__malloc_unlock>:
 800c026:	4770      	bx	lr

0800c028 <_realloc_r>:
 800c028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c02a:	4607      	mov	r7, r0
 800c02c:	4614      	mov	r4, r2
 800c02e:	460e      	mov	r6, r1
 800c030:	b921      	cbnz	r1, 800c03c <_realloc_r+0x14>
 800c032:	4611      	mov	r1, r2
 800c034:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c038:	f7ff be00 	b.w	800bc3c <_malloc_r>
 800c03c:	b922      	cbnz	r2, 800c048 <_realloc_r+0x20>
 800c03e:	f7ff fdaf 	bl	800bba0 <_free_r>
 800c042:	4625      	mov	r5, r4
 800c044:	4628      	mov	r0, r5
 800c046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c048:	f000 f814 	bl	800c074 <_malloc_usable_size_r>
 800c04c:	42a0      	cmp	r0, r4
 800c04e:	d20f      	bcs.n	800c070 <_realloc_r+0x48>
 800c050:	4621      	mov	r1, r4
 800c052:	4638      	mov	r0, r7
 800c054:	f7ff fdf2 	bl	800bc3c <_malloc_r>
 800c058:	4605      	mov	r5, r0
 800c05a:	2800      	cmp	r0, #0
 800c05c:	d0f2      	beq.n	800c044 <_realloc_r+0x1c>
 800c05e:	4631      	mov	r1, r6
 800c060:	4622      	mov	r2, r4
 800c062:	f7ff f985 	bl	800b370 <memcpy>
 800c066:	4631      	mov	r1, r6
 800c068:	4638      	mov	r0, r7
 800c06a:	f7ff fd99 	bl	800bba0 <_free_r>
 800c06e:	e7e9      	b.n	800c044 <_realloc_r+0x1c>
 800c070:	4635      	mov	r5, r6
 800c072:	e7e7      	b.n	800c044 <_realloc_r+0x1c>

0800c074 <_malloc_usable_size_r>:
 800c074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c078:	1f18      	subs	r0, r3, #4
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	bfbc      	itt	lt
 800c07e:	580b      	ldrlt	r3, [r1, r0]
 800c080:	18c0      	addlt	r0, r0, r3
 800c082:	4770      	bx	lr

0800c084 <_init>:
 800c084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c086:	bf00      	nop
 800c088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c08a:	bc08      	pop	{r3}
 800c08c:	469e      	mov	lr, r3
 800c08e:	4770      	bx	lr

0800c090 <_fini>:
 800c090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c092:	bf00      	nop
 800c094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c096:	bc08      	pop	{r3}
 800c098:	469e      	mov	lr, r3
 800c09a:	4770      	bx	lr
